{"version":3,"sources":["Home.js","Utils.js","PathfindingVisualizer/PathfindAlgorithms.js","PathfindingVisualizer/MazeAlgorithms.js","PathfindingVisualizer/Node.js","PathfindingVisualizer/PathfindMenu.js","PathfindingVisualizer/PathfindingVisualizer.js","SortingVisualizer/SortAlgorithms.js","SortingVisualizer/SortMenu.js","SortingVisualizer/SortingVisualizer.js","NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","state","Card","CardHeader","href","CardBody","React","Component","QElement","element","priority","this","random","min","max","Math","floor","PriorityQueue","items","i","length","has","contains","splice","enqueue","qElement","contain","push","isEmpty","shift","str","pathfindAlgorithms","dijkstra","grid","start","target","visitedNodes","unvisitedNodes","nodes","row","node","getAllNodes","distance","sort","a","b","curNode","isWall","Infinity","isVisited","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","cost","previousNode","neighbors","col","filter","recursiveDevision","rows","cols","walls","r","c","innerWalls","buildWalls","h","minC","maxC","minR","maxR","hole","addHWall","addVWall","Node","nodeType","type","isStart","isTarget","id","className","onMouseDown","mousePressed","onMouseEnter","mouseEntered","onAnimationEnd","animationEnded","PathfindMenu","visualizeDropdownOpen","editDropdownOpen","mazeDropdownOpen","clearDropdownOpen","isInstant","setState","Container","Row","Col","ButtonDropdown","isOpen","toggle","toggleVisualize","Button","color","onClick","getIsInstantText","DropdownToggle","split","DropdownMenu","DropdownItem","toggleInstant","divider","pathfinder","visualizePathfind","toggleEdit","resetStartTarget","toggleMaze","animateMaze","toggleClear","clearGrid","clearWeights","clearWalls","clearPaths","placeStartNode","placeTargetNode","setDrawMode","INIT_START","INIT_TARGET","nodeTypes","PathfindingVisualizer","weightCost","mouseIsDown","drawMode","drawWall","drawWeight","placingStart","placingTarget","startNode","targetNode","curRow","createNode","oldGrid","rootDistance","isWeight","getVisualType","updateVisualNode","document","getElementById","curStart","curStartNew","newNode","curTarget","curTargetNew","softRebuildGrid","setStartNode","setTargetNode","weight","mode","algorithm","updateGrid","dequeue","manhattanD","abs","minDistance","setPriority","aStar","breadthFirstSearch","pop","depthFirstSearch","shortestPath","nodesInShortestPath","currentNode","unshift","getShortestPathNodes","animateSearch","setTimeout","animatePath","maze","drawWallNode","rebuildGrid","drawWeightNode","onMouseUp","handleMouseUp","onMouseLeave","onContextMenu","e","preventDefault","onDragStart","Array","from","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleAnimationEnd","UNSORTED","COMPARE","SORTED","SWAP","MIN","sortAlgorithms","mergeSort","array","animations","doMergeSort","middle","left","right","merge","SortMenu","sorter","visualizeSort","reGenerateArray","SortingVisualizer","size","createBar","rebuildArray","bars","getElementsByClassName","style","backgroundColor","newMin","k","temp","selectionSort","cur","j","insertionSort","animateSort","step","action","height","bar","barIdx","NavBar","activeTab","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0217072e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardHeader, CardBody\r\n} from 'reactstrap';\r\n\r\n/**\r\n * Represents the home tab component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass Home extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the home tab component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <CardHeader>\r\n                        Jake Waclawski<br></br>\r\n                        <a href=\"https://github.com/jmw3638/Pathfinder\">GitHub</a>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","// User defined class \r\n// to store element and its priority \r\nclass QElement { \r\n    constructor(element, priority) \r\n    { \r\n        this.element = element; \r\n        this.priority = priority; \r\n    } \r\n} \r\n\r\nexport function random(min, max) { return Math.floor(Math.random() * (max - min + 1) + min); }\r\n  \r\n// PriorityQueue class \r\nclass PriorityQueue { \r\n  \r\n    // An array is used to implement priority \r\n    constructor() \r\n    { \r\n        this.items = []; \r\n    } \r\n  \r\n    contains(element) {\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            if(this.items[i].element === element) return i;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    setPriority(element, priority) {\r\n        var has = this.contains(element);\r\n        if(!has) return;\r\n        this.items.splice(has, 1);\r\n        this.enqueue(element, priority);\r\n    }\r\n\r\n    // enqueue function to add element \r\n    // to the queue as per priority \r\n    enqueue(element, priority) \r\n    { \r\n        // creating object from queue element \r\n        var qElement = new QElement(element, priority); \r\n        var contain = false; \r\n    \r\n        // iterating through the entire \r\n        // item array to add element at the \r\n        // correct location of the Queue \r\n        for (var i = 0; i < this.items.length; i++) { \r\n            if (this.items[i].priority > qElement.priority) { \r\n                // Once the correct location is found it is \r\n                // enqueued \r\n                this.items.splice(i, 0, qElement); \r\n                contain = true; \r\n                break; \r\n            } \r\n        } \r\n    \r\n        // if the element have the highest priority \r\n        // it is added at the end of the queue \r\n        if (!contain) { \r\n            this.items.push(qElement); \r\n        } \r\n    } \r\n\r\n    // dequeue method to remove \r\n    // element from the queue \r\n    dequeue() \r\n    { \r\n        // return the dequeued element \r\n        // and remove it. \r\n        // if the queue is empty \r\n        // returns Underflow \r\n        if (this.isEmpty()) \r\n            return \"Underflow\"; \r\n        return this.items.shift(); \r\n    } \r\n\r\n\r\n    // front function \r\n    front() \r\n    { \r\n        // returns the highest priority element \r\n        // in the Priority queue without removing it. \r\n        if (this.isEmpty()) \r\n            return \"No elements in Queue\"; \r\n        return this.items[0]; \r\n    } \r\n\r\n    // rear function \r\n    rear() \r\n    { \r\n        // returns the lowest priorty \r\n        // element of the queue \r\n        if (this.isEmpty()) \r\n            return \"No elements in Queue\"; \r\n        return this.items[this.items.length - 1]; \r\n    } \r\n\r\n    // isEmpty function \r\n    isEmpty() \r\n    { \r\n        // return true if the queue is empty. \r\n        return this.items.length === 0; \r\n    } \r\n\r\n\r\n    // printQueue function \r\n    // prints all the element of the queue \r\n    printPQueue() \r\n    { \r\n        var str = \"\"; \r\n        for (var i = 0; i < this.items.length; i++) \r\n            str += this.items[i].element + \" \"; \r\n        return str; \r\n    } \r\n} \r\n\r\nexport default PriorityQueue;","import PriorityQueue from \"../Utils\";\r\n\r\n// Pathfinding algorithms\r\nexport const pathfindAlgorithms = {\r\n    DIJKSTRA: \"dijkstra\",\r\n    ASTAR: \"astar\",\r\n    BFS: \"bfs\",\r\n    DFS: \"dfs\",\r\n}\r\n\r\n/**\r\n * Executes a Dijkstra's algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Node} start start node\r\n * @param {Node} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function dijkstra(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n        const curNode = unvisitedNodes.shift();\r\n        \r\n        if (!curNode) break;\r\n        if (curNode.isWall) continue;\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            neighbor.distance = curNode.distance + neighbor.cost;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes an A* (A-Star) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Node} start start node\r\n * @param {Node} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function aStar(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = new PriorityQueue();\r\n    unvisitedNodes.enqueue(start, 0);\r\n    start.distance = 0;\r\n    start.rootDistance = 0;\r\n    while (!unvisitedNodes.isEmpty()) {\r\n        const curNode = unvisitedNodes.dequeue().element;\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            const manhattanD = 2 * (Math.abs(target.row - neighbor.row) + (Math.abs(target.col - neighbor.col)));\r\n            neighbor.rootDistance = Math.min(neighbor.rootDistance, curNode.rootDistance + neighbor.cost);\r\n            const minDistance = Math.min(neighbor.distance, neighbor.rootDistance + manhattanD);\r\n            if (minDistance !== neighbor.distance) {\r\n                neighbor.distance = minDistance;\r\n                neighbor.previousNode = curNode;\r\n                if (unvisitedNodes.contains(neighbor)) unvisitedNodes.setPriority(neighbor, minDistance);\r\n            }\r\n            if (!unvisitedNodes.contains(neighbor)) unvisitedNodes.enqueue(neighbor, neighbor.distance);\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes Breadth First Search (BFS) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Node} start start node\r\n * @param {Node} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function breadthFirstSearch(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.shift();\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.isVisited) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n        if (curNode === target) return visitedNodes; \r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n            curNode.isVisited = true;\r\n            visitedNodes.push(curNode);\r\n\r\n            neighbor.distance = curNode.distance + 1;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes a Depth First Search (DFS) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Node} start start node\r\n * @param {Node} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function depthFirstSearch(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.pop();\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.isVisited) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n            curNode.isVisited = true;\r\n            visitedNodes.push(curNode);\r\n\r\n            neighbor.distance = curNode.distance + 1;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Gets all of the nodes in the grid.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * \r\n * @returns an array containing all of the nodes\r\n */\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) nodes.push(node);\r\n    }\r\n    return nodes;\r\n}\r\n\r\n/**\r\n * Gets the shortest path of nodes from the target node to \r\n * the start node.\r\n * \r\n * @param {Node} targetNode target node\r\n * \r\n * @returns an array of shortest path nodes in order\r\n */\r\nexport function getShortestPathNodes(targetNode) {\r\n    const nodesInShortestPath = [];\r\n    let currentNode = targetNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPath;\r\n}\r\n\r\n/**\r\n * Gets all unvisited neighbors of a given node.\r\n * \r\n * @param {Node} node node\r\n * @param {Array} grid grid of nodes\r\n * \r\n * @returns an array containing all unvisited neighbors\r\n */\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {row, col} = node;\r\n    \r\n    if (col > 0) neighbors.push(grid[row][col - 1]); // West\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // South\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); // East\r\n    if (row > 0) neighbors.push(grid[row - 1][col]); // North\r\n    \r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}","import { random } from '../Utils';\r\n\r\n/**\r\n * Algorithm for generating a maze using recursive devision.\r\n * \r\n * @param {int} rows number of rows\r\n * @param {int} cols number of columns\r\n * \r\n * @returns a grid of boolean values, true if wall node\r\n */\r\nexport function recursiveDevision(rows, cols) {\r\n    var walls = [];\r\n\r\n    //walls = innerWalls(walls, true, 0, cols-1, 0, rows-1);\r\n    walls = buildWalls(walls, rows, cols);\r\n    \r\n    return walls;\r\n}\r\n\r\n/**\r\n * Creates walls around the border of the maze.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} rows amount of rows \r\n * @param {int} cols amount of columns\r\n * \r\n * @returns a grid of walls\r\n */\r\nfunction buildWalls(walls, rows, cols) {\r\n    for (var r = 0; r < rows; r++) {\r\n        if (r === 0 || r === (rows-1)) {\r\n            for (var c = 0; c < cols; c++) {\r\n                walls.push([r, c]);\r\n            }\r\n        } else {\r\n            walls.push([r, 0]);\r\n            walls.push([r, cols-1]);\r\n        }\r\n    }\r\n\r\n    walls = innerWalls(walls, true, 1, cols-2, 1, rows-2);\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Recursive function that builds the inner walls of the maze.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {boolean} h is horizontal wall\r\n * @param {int} minC lower column bound\r\n * @param {int} maxC upper column bound\r\n * @param {int} minR lower row bound\r\n * @param {int} maxR upper row bound\r\n * \r\n * @returns a grid of walls\r\n */\r\nfunction innerWalls(walls, h, minC, maxC, minR, maxR) {\r\n    if (h) {\r\n        if (maxC - minC <= 1) { return walls; }\r\n\r\n        var r = Math.floor(random(minR+1, maxR-1)/2)*2;\r\n        walls = addHWall(walls, minC, maxC, r);\r\n\r\n        walls = innerWalls(walls, !h, minC, maxC, minR, r-1);\r\n        walls = innerWalls(walls, !h, minC, maxC, r+1, maxR);\r\n    } else {\r\n        if (maxR - minR <= 1) { return walls; }\r\n\r\n        var c = Math.floor(random(minC+1, maxC-1)/2)*2;\r\n        walls = addVWall(walls, minR, maxR, c);\r\n\r\n        walls = innerWalls(walls, !h, minC, c-1, minR, maxR);\r\n        walls = innerWalls(walls, !h, c+1, maxC, minR, maxR);\r\n    }\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Builds a horizontal wall at a given row.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} minC lower column bound\r\n * @param {int} maxC upper column bound\r\n * @param {int} r row\r\n */\r\nfunction addHWall(walls, minC, maxC, r) {\r\n    var hole = Math.floor(random(minC, maxC)/2)*2+1;\r\n    for (var i = minC; i <= maxC; i++) { if (i !== hole) walls.push([r, i]); }\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Builds a vertical wall at a given column.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} minR lower row bound\r\n * @param {int} maxR upper row bound\r\n * @param {int} c column \r\n */\r\nfunction addVWall(walls, minR, maxR, c) {\r\n    var hole = Math.floor(random(minR, maxR)/2)*2+1;\r\n    for (var i = minR; i <= maxR; i++) { if (i !== hole) walls.push([i, c]); }\r\n    return walls;\r\n}","import React from 'react';\r\n\r\nimport './Node.css';\r\n\r\n/**\r\n * Represents a grid node on the screen. Extra class names\r\n * can be applied to change the appearance of the node.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass Node extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the node.\r\n     * \r\n     * @returns a <div> element representing the node\r\n     */\r\n    render () {\r\n        const nodeType = this.props.type ? this.props.type :\r\n        this.props.isStart ? 'start' : \r\n        this.props.isTarget ? 'target' : \r\n        '';\r\n\r\n        return (\r\n            <div \r\n            id={`node-${this.props.row}-${this.props.col}`} \r\n            className={`node ${nodeType}`}\r\n            onMouseDown={() => this.props.mousePressed(this.props.row, this.props.col, this.props.isWall)}\r\n            onMouseEnter={() => this.props.mouseEntered(this.props.row, this.props.col, this.props.isWall)}\r\n            onAnimationEnd={() => this.props.animationEnded()}\r\n            /> \r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React from 'react';\r\nimport { Container, Row, Col, Button, ButtonDropdown, DropdownItem, DropdownToggle, DropdownMenu\r\n} from 'reactstrap';\r\n\r\nimport Node from './Node';\r\nimport { pathfindAlgorithms } from './PathfindAlgorithms';\r\n\r\n/**\r\n * Represents the top menu of the pathfinding visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindMenu extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Visualize button dropdown status\r\n            visualizeDropdownOpen: false,\r\n            // Edit button dropdown status\r\n            editDropdownOpen: false,\r\n            // Maze button dropdown status\r\n            mazeDropdownOpen: false,\r\n            // Clear button dropdown status\r\n            clearDropdownOpen: false,\r\n            // Display path instantly?\r\n            isInstant: false,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Toggles the visualize button dropdown.\r\n     */\r\n    toggleVisualize () { this.setState({visualizeDropdownOpen: !this.state.visualizeDropdownOpen}); }\r\n\r\n    /**\r\n     * Toggles the edit button dropdown.\r\n     */\r\n    toggleEdit () { this.setState({editDropdownOpen: !this.state.editDropdownOpen}); }\r\n\r\n    /**\r\n     * Toggles the maze button dropdown.\r\n     */\r\n    toggleMaze () { this.setState({mazeDropdownOpen: !this.state.mazeDropdownOpen}); }\r\n\r\n    /**\r\n     * Toggles the clear button dropdown.\r\n     */\r\n    toggleClear () { this.setState({clearDropdownOpen: !this.state.clearDropdownOpen}); }\r\n\r\n    /**\r\n     * Toggles if the path should be displayed instantly.\r\n     */\r\n    toggleInstant () { this.setState({isInstant: !this.state.isInstant}); }\r\n\r\n    /**\r\n     * Get the current text of the visualize button.\r\n     */\r\n    getIsInstantText () { return this.state.isInstant ? \"Instant\" : \"Visualize\"; }\r\n \r\n    /**\r\n     * Renders the menu component.\r\n     * \r\n     * @returns a <div> element representing the menu\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"pathfind-menu\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col className=\"title\">\r\n                            Pathfinding Visualizer\r\n                        </Col>\r\n                        <Col>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.visualizeDropdownOpen} toggle={() => this.toggleVisualize()}>\r\n                                            <Button color=\"success\" onClick={() => this.toggleVisualize()}>{this.getIsInstantText()}</Button>\r\n                                            <DropdownToggle split color=\"success\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.toggleInstant()}>Pathfind Mode</DropdownItem>\r\n                                                <DropdownItem divider />\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(pathfindAlgorithms.DIJKSTRA, this.state.isInstant)}>Dijkstra</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(pathfindAlgorithms.ASTAR, this.state.isInstant)}>A* (A-Star)</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(pathfindAlgorithms.BFS, this.state.isInstant)}>Breadth First Search</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(pathfindAlgorithms.DFS, this.state.isInstant)}>Depth First Search</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.editDropdownOpen} toggle={() => this.toggleEdit()}>\r\n                                            <Button color=\"info\" onClick={() => this.toggleEdit()}>Edit</Button>\r\n                                            <DropdownToggle split color=\"info\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.resetStartTarget()}>Reset Start/Target Nodes</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.mazeDropdownOpen} toggle={() => this.toggleMaze()}>\r\n                                            <Button color=\"warning\" onClick={() => this.toggleMaze()}>Maze</Button>\r\n                                            <DropdownToggle split color=\"warning\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.animateMaze()}>Recursive Devision</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.clearDropdownOpen} toggle={() => this.toggleClear()}>\r\n                                            <Button color=\"danger\" onClick={() => this.toggleClear()}>Clear</Button>\r\n                                            <DropdownToggle split color=\"danger\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearGrid()}>Clear All</DropdownItem>\r\n                                                <DropdownItem divider />\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearWeights()}>Clear Weights</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearWalls()}>Clear Walls</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearPaths()}>Clear Path</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <div className=\"visualizer-info\">\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={'node start-instant'}\r\n                            mousePressed={() => this.props.pathfinder.placeStartNode()}\r\n                            mouseEntered={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Start Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={'node target-instant'}\r\n                            mousePressed={() => this.props.pathfinder.placeTargetNode()}\r\n                            mouseEntered={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Target Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={'node weight-instant'}\r\n                            mousePressed={() => this.props.pathfinder.setDrawMode(2)}\r\n                            mouseEntered={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Weighted Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={'node wall-instant'}\r\n                            mousePressed={() => this.props.pathfinder.setDrawMode(1)}\r\n                            mouseEntered={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Wall Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={'node'}\r\n                            mousePressed={() => this.props.pathfinder.setDrawMode(0)}\r\n                            mouseEntered={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Unvisited Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={'node visited-instant'}\r\n                            mousePressed={() => null}\r\n                            mouseEntered={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-node\">\r\n                            <Node type={'node visited-weight-instant'}\r\n                            mousePressed={() => null}\r\n                            mouseEntered={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Visited Nodes</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={'node path-instant'}\r\n                            mousePressed={() => null}\r\n                            mouseEntered={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-node\">\r\n                            <Node type={'node path-weight-instant'}\r\n                            mousePressed={() => null}\r\n                            mouseEntered={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Path Nodes</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindMenu;","import React from 'react';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nimport { getShortestPathNodes, dijkstra, aStar, breadthFirstSearch, depthFirstSearch, pathfindAlgorithms\r\n} from './PathfindAlgorithms';\r\nimport { recursiveDevision\r\n} from './MazeAlgorithms';\r\nimport PathfindMenu from './PathfindMenu';\r\nimport Node from './Node';\r\n\r\n// Number of rows in the grid\r\nconst ROW_COUNT = 27;\r\n// Number of columns in the grid\r\nconst COL_COUNT = 71;\r\n// Initial cost of weighted nodes\r\nconst INIT_COST = 15;\r\n// Initial coordinates of the start node [row, col]\r\nconst INIT_START = [13, 10];\r\n// Initial coordinates of the target noe [row, col]\r\nconst INIT_TARGET = [13, 60];\r\n// Speed between visited node animations in miliseconds\r\nconst VISITED_SPEED = 5;\r\n// Speed between shortest path node animations in miliseconds\r\nconst PATH_SPEED = 25;\r\n// Speed between maze wall node animations in miliseconds\r\nconst MAZE_SPEED = 10;\r\n\r\n// Node class types\r\nconst nodeTypes = {\r\n    NODE: 'node',\r\n    NODE_ANIMATED: 'node node-animated',\r\n    WALL: 'node wall',\r\n    WALL_INSTANT: 'node wall-instant',\r\n    WEIGHT: 'node weight',\r\n    WEIGHT_INSTANT: 'node weight-instant',\r\n    START: 'node start',\r\n    START_INSTANT: 'node start-instant',\r\n    TARGET: 'node target',\r\n    TARGET_INSTANT: 'node target-instant',\r\n    VISITED: 'node visited',\r\n    VISITED_INSTANT: 'node visited-instant',\r\n    VISITED_WEIGHT: 'node visited-weight',\r\n    VISITED_WEIGHT_INSTANT: 'node visited-weight-instant',\r\n    PATH: 'node path',\r\n    PATH_INSTANT: 'node path-instant',\r\n    PATH_WEIGHT: 'node path-weight',\r\n    PATH_WEIGHT_INSTANT: 'node path-weight-instant',\r\n}\r\n\r\n/**\r\n * Represents the pathfinding visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindingVisualizer extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Current state of grid nodes\r\n            grid: [],\r\n            // Current cost of weighted nodes\r\n            weightCost: INIT_COST,\r\n            // Is the mouse down?\r\n            mouseIsDown: false,\r\n            // Current draw mode (0: none, 1: walls, 2: weights)\r\n            drawMode: 0,\r\n            // Are we erasing or drawing walls (null if neither)?\r\n            drawWall: null,\r\n            // Are we erasing or drawing weights (null if neither)?\r\n            drawWeight: null,\r\n            // Are we placing the start node?\r\n            placingStart: false,\r\n            // Are we placing the target node?\r\n            placingTarget: false,\r\n            // Current start node position\r\n            startNode: INIT_START,\r\n            // Current target node position\r\n            targetNode: INIT_TARGET,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the grid with new nodes. Start and target\r\n     * node positions are preserved.\r\n     * \r\n     * @returns new grid of nodes\r\n     */\r\n    rebuildGrid () {\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.createNode(r, c, 1, false);\r\n                curRow.push(node);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the grid with new nodes. Main node types are\r\n     * preserved (start, target, wall, weight).\r\n     * \r\n     * @returns new grid of nodes\r\n     */\r\n    softRebuildGrid () {\r\n        const oldGrid = this.state.grid;\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.createNode(r, c, oldGrid[r][c].cost, oldGrid[r][c].isWall)\r\n                curRow.push(node);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    /**\r\n     * Creates a new node with stored properties.\r\n     * \r\n     * @param {int} row row on grid\r\n     * @param {int} col column on grid\r\n     * @param {int} cost weight cost of node\r\n     * @param {boolean} isWall is node a wall\r\n     * \r\n     * @returns the new node object\r\n     */\r\n    createNode (row, col, cost, isWall) {\r\n        return {\r\n            row: row,\r\n            col: col,\r\n            cost: cost,\r\n            distance: Infinity,\r\n            rootDistance: Infinity,\r\n            isStart: row === this.state.startNode[0] && col === this.state.startNode[1],\r\n            isTarget: row === this.state.targetNode[0] && col === this.state.targetNode[1],\r\n            isWall: isWall,\r\n            previousNode: null,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual weight state of a given node.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     * @param {int} isWeight is new type weight node\r\n     */\r\n    drawWeightNode (row, col, isWeight) {\r\n        const node = this.state.grid[row][col];\r\n\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        if (!isWeight) {\r\n            if (this.getVisualType(node) === nodeTypes.NODE) return; \r\n            this.updateVisualNode(node, nodeTypes.NODE_ANIMATED);\r\n        } else if (this.getVisualType(node) !== nodeTypes.WEIGHT_INSTANT) {\r\n            this.updateVisualNode(node, nodeTypes.WEIGHT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual wall state of a given node. \r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     * @param {boolean} isWall is new type wall node\r\n     */\r\n    drawWallNode (row, col, isWall) {\r\n        const node = this.state.grid[row][col];\r\n\r\n        if (node.cost !== 1 || node.isStart || node.isTarget) return;\r\n\r\n        if (!isWall) {\r\n            if (this.getVisualType(node) === nodeTypes.NODE) return; \r\n            this.updateVisualNode(node, nodeTypes.NODE_ANIMATED)\r\n        } else if (this.getVisualType(node) !== nodeTypes.WALL_INSTANT) {\r\n            this.updateVisualNode(node, nodeTypes.WALL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the grid of nodes. Changes the properties of\r\n     * newly drawn node types according to their current visual state.\r\n     */\r\n    updateGrid () {\r\n        const grid = this.state.grid;\r\n\r\n        for (let r = 0; r < grid.length; r++) {\r\n            for (let c = 0; c < grid[0].length; c++) {\r\n                const node = grid[r][c];\r\n                const type = this.getVisualType(node);\r\n                \r\n                switch (type) {\r\n                    case nodeTypes.NODE:\r\n                        node.isWall = false;\r\n                        node.cost = 1;\r\n                        break;\r\n                    case nodeTypes.WALL:\r\n                        node.isWall = true;\r\n                        break;\r\n                    case nodeTypes.WALL_INSTANT:\r\n                        node.isWall = true;\r\n                        break;\r\n                    case nodeTypes.WEIGHT:\r\n                        node.cost = this.state.weightCost;\r\n                        break;\r\n                    case nodeTypes.WEIGHT_INSTANT:\r\n                        node.cost = this.state.weightCost;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Updates the visual state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {nodeTypes} type new node type\r\n     */\r\n    updateVisualNode (node, type) { document.getElementById(`node-${node.row}-${node.col}`).className = type; }\r\n\r\n    /**\r\n     * Gets the current node type.\r\n     * \r\n     * @param {Object} node \r\n     * \r\n     * @returns current node element class name\r\n     */\r\n    getVisualType (node) { return document.getElementById(`node-${node.row}-${node.col}`).className; }\r\n\r\n    /**\r\n     * Sets new start node position. Updates state, we are no\r\n     * longer placing the start node.\r\n     * \r\n     * @param {int} row row on grid\r\n     * @param {int} col column on grid\r\n     */\r\n    setStartNode (row, col) { \r\n        const grid = this.state.grid;\r\n        const curStart = this.state.grid[this.state.startNode[0]][this.state.startNode[1]];\r\n        const curStartNew = {\r\n            ...curStart,\r\n            isStart: false,\r\n        }\r\n        grid[this.state.startNode[0]][this.state.startNode[1]] = curStartNew;\r\n\r\n        this.setState({startNode: [row, col]}); \r\n        \r\n        const node = this.state.grid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: false,\r\n            isStart: true,\r\n        }\r\n        grid[row][col] = newNode;\r\n\r\n        this.setState({\r\n            grid: grid,\r\n            placingStart: false,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets new target node position. Updates state, we are no\r\n     * longer placing the target node.\r\n     * \r\n     * @param {int} row row on grid \r\n     * @param {int} col column on grid\r\n     */\r\n    setTargetNode (row, col) { \r\n        const grid = this.state.grid;\r\n        const curTarget = this.state.grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n        const curTargetNew = {\r\n            ...curTarget,\r\n            isTarget: false,\r\n        }\r\n        grid[this.state.targetNode[0]][this.state.targetNode[1]] = curTargetNew;\r\n\r\n        this.setState({targetNode: [row, col]}); \r\n    \r\n        const node = this.state.grid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: false,\r\n            isTarget: true,\r\n        }\r\n        grid[row][col] = newNode;\r\n        \r\n        this.setState({\r\n            grid: grid,\r\n            placingTarget: false,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears the entire grid.\r\n     */\r\n    clearGrid () {\r\n        this.clearWeights();\r\n        this.clearWalls();\r\n        this.clearPaths();\r\n    }\r\n\r\n    /**\r\n     * Clears the grid of all wall nodes.\r\n     */\r\n    clearWalls () { \r\n        const grid = this.state.grid;\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.isWall) {\r\n                    this.updateVisualNode(node, nodeTypes.NODE);\r\n                    node.isWall = false;\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Clears the grid of all weighted nodes and resets their\r\n     * costs to 1.\r\n     */\r\n    clearWeights () {\r\n        const grid = this.state.grid;\r\n\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.cost !== 1) {\r\n                    this.updateVisualNode(node, nodeTypes.NODE);\r\n                    node.cost = 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Clears the visual grid of all path and visited type nodes.\r\n     * Updates the class name of each appropriate node object.\r\n     */\r\n    clearPaths () {\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.state.grid[r][c];\r\n                const type = this.getVisualType(node);\r\n\r\n                if (type === nodeTypes.VISITED || \r\n                    type === nodeTypes.VISITED_INSTANT ||\r\n                    type === nodeTypes.PATH || \r\n                    type === nodeTypes.PATH_INSTANT) {\r\n\r\n                    this.updateVisualNode(node, nodeTypes.NODE);\r\n                }\r\n                else if (type === nodeTypes.VISITED_WEIGHT || \r\n                    type === nodeTypes.VISITED_WEIGHT_INSTANT || \r\n                    type === nodeTypes.PATH_WEIGHT ||\r\n                    type === nodeTypes.PATH_WEIGHT_INSTANT) {\r\n                \r\n                        this.updateVisualNode(node, nodeTypes.WEIGHT_INSTANT);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({grid: this.softRebuildGrid()})\r\n    }\r\n\r\n    /**\r\n     * Resets the start and target nodes to their initial locations.\r\n     */\r\n    resetStartTarget () {\r\n        this.setStartNode(INIT_START[0], INIT_START[1]);\r\n        this.setTargetNode(INIT_TARGET[0], INIT_TARGET[1]);\r\n    }\r\n\r\n    /**\r\n     * Sets new cost of weighted nodes.\r\n     * \r\n     * @param {int} weight new cost\r\n     */\r\n    setNewWeight (weight) { this.setState({weightCost: weight}); }\r\n\r\n    /**\r\n     * Updates the state, we are now placing the start node.\r\n     */\r\n    placeStartNode () { this.setState({placingStart: true}); }\r\n    \r\n    /**\r\n     * Updates the state, we are now placing the target node.\r\n     */\r\n    placeTargetNode () { this.setState({placingTarget: true}); }\r\n\r\n    /**\r\n     * Sets the current draw mode.\r\n     * 0: none\r\n     * 1: walls\r\n     * 2: weights\r\n     * \r\n     * @param {int} mode new draw mode\r\n     */\r\n    setDrawMode (mode) { this.setState({drawMode: mode}); }\r\n\r\n    /**\r\n     * Visualizes a given pathfinding algorithm. Uses the current state of\r\n     * the grid of nodes.\r\n     * \r\n     * @param {pathfindAlgorithms} algorithm pathfinding algorithm\r\n     * @param {boolean} isInstant true if displaying instantly\r\n     */\r\n    visualizePathfind (algorithm, isInstant) {\r\n        this.updateGrid();\r\n        this.clearPaths();\r\n\r\n        const grid = this.state.grid;\r\n        const start = grid[this.state.startNode[0]][this.state.startNode[1]];\r\n        const target = grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n\r\n        var visitedNodes = [];\r\n        switch (algorithm) {\r\n            case pathfindAlgorithms.DIJKSTRA:\r\n                visitedNodes = dijkstra(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.ASTAR:\r\n                visitedNodes = aStar(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.BFS:\r\n                visitedNodes = breadthFirstSearch(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.DFS:\r\n                visitedNodes = depthFirstSearch(grid, start, target);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        \r\n        const shortestPath = getShortestPathNodes(target);\r\n\r\n        this.animateSearch(visitedNodes, shortestPath, isInstant);\r\n    }\r\n\r\n    /**\r\n     * Animates the process of the pathfinding algorithm. Updates the class\r\n     * names of the nodes to change their appearance.\r\n     * \r\n     * @param {Array} visitedNodes array of visited nodes in order\r\n     * @param {Array} shortestPath array of shortest path nodes in order\r\n     * @param {boolean} isInstant true if displaying instantly\r\n     */\r\n    animateSearch (visitedNodes, shortestPath, isInstant) {\r\n        if (isInstant) {\r\n            for (let i = 0; i <= visitedNodes.length; i++) {\r\n                if (i === visitedNodes.length) {\r\n                    for (let i = 1; i < shortestPath.length - 1; i++) {\r\n                        const node = shortestPath[i];\r\n\r\n                        if (node.isStart || node.isTarget) continue;\r\n\r\n                        if (node.cost !== 1) this.updateVisualNode(node, nodeTypes.PATH_WEIGHT_INSTANT);\r\n                        else this.updateVisualNode(node, nodeTypes.PATH_INSTANT);\r\n                    }\r\n                    return;\r\n                }\r\n                const node = visitedNodes[i];\r\n                if (node.isStart || node.isTarget) continue;\r\n                \r\n                if (node.cost !== 1) this.updateVisualNode(node, nodeTypes.VISITED_WEIGHT_INSTANT);\r\n                else this.updateVisualNode(node, nodeTypes.VISITED_INSTANT);\r\n            }\r\n        } else {\r\n            for (let i = 0; i <= visitedNodes.length; i++) {\r\n                if (i === visitedNodes.length) {\r\n                    setTimeout(() => {\r\n                        this.animatePath(shortestPath);\r\n                    }, VISITED_SPEED * i);\r\n                    return;\r\n                }\r\n\r\n                const node = visitedNodes[i];\r\n                if (node.isStart || node.isTarget) continue;\r\n\r\n                setTimeout(() => {\r\n                    if (node.cost !== 1) this.updateVisualNode(node, nodeTypes.VISITED_WEIGHT);\r\n                    else this.updateVisualNode(node, nodeTypes.VISITED);\r\n                }, VISITED_SPEED * i);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animates the shortest path from the start node to the target node.\r\n     * Updates the class names of the nodes to change their appearance.\r\n     * \r\n     * @param {Array} shortestPath array of shortest path nodes in order \r\n     */\r\n    animatePath (shortestPath) {\r\n        for (let i = 0; i < shortestPath.length; i++) {\r\n            const node = shortestPath[i];\r\n            if (node.isStart || node.isTarget) continue;\r\n\r\n            setTimeout(() => {\r\n                if (node.cost !== 1) this.updateVisualNode(node, nodeTypes.PATH_WEIGHT);\r\n                else this.updateVisualNode(node, nodeTypes.PATH);\r\n            }, PATH_SPEED * i);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animates a generated maze.\r\n     */\r\n    animateMaze () {\r\n        this.clearWalls();\r\n        const maze = recursiveDevision(ROW_COUNT, COL_COUNT);\r\n\r\n        for (let i = 0; i < maze.length; i++) {\r\n            setTimeout(() => {\r\n                this.drawWallNode(maze[i][0], maze[i][1], true);\r\n            }, MAZE_SPEED * i);\r\n        }\r\n        setTimeout(() => {\r\n            this.updateGrid();\r\n        }, MAZE_SPEED * maze.length);\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Rebuilds the grid.\r\n     */\r\n    componentDidMount () {\r\n        const grid = this.rebuildGrid();\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse down event on a node. If we are placing the start or\r\n     * target node, update the node location and return. Otherwise, updates\r\n     * the node based on the current draw mode.\r\n     * 0: none\r\n     * 1: walls\r\n     * 2: weights\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseDown (row, col) {\r\n        if (this.state.placingStart) {\r\n            this.setStartNode(row, col);\r\n            return;\r\n        }\r\n\r\n        if (this.state.placingTarget) {\r\n            this.setTargetNode(row, col);\r\n            return;\r\n        }\r\n\r\n        const grid = this.state.grid;\r\n        if (grid[row][col].isStart || grid[row][col].isTarget) return;\r\n\r\n        switch (this.state.drawMode) {\r\n            case 0:\r\n                break;\r\n            case 1:\r\n                const isWall = grid[row][col].isWall;\r\n                this.drawWallNode(row, col, !isWall);\r\n                this.setState({drawWall: !isWall});\r\n                break;\r\n            case 2:\r\n                const isWeight = grid[row][col].cost !== 1;\r\n                this.drawWeightNode(row, col, !isWeight);\r\n                this.setState({drawWeight: !isWeight});\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({mouseIsDown: true});\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse up event. Sets the state so that nothing\r\n     * can be drawn.\r\n     */\r\n    handleMouseUp () {\r\n        if (!this.state.mouseIsDown) return;\r\n\r\n        this.updateGrid();\r\n\r\n        this.setState({\r\n            mouseIsDown: false,\r\n            drawWall: null,\r\n            drawWeight: null,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse enter event into a node. If the mouse is not down,\r\n     * return. Otherwise, updates the node based on the current draw mode.\r\n     * 0: none\r\n     * 1: walls\r\n     * 2: weights\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseEnter (row, col) {\r\n        if (!this.state.mouseIsDown) return;\r\n\r\n        const grid = this.state.grid;\r\n\r\n        switch (this.state.drawMode) {\r\n            case 0: \r\n                break;\r\n            case 1:\r\n                const isWall = grid[row][col].isWall;\r\n                if (isWall !== this.state.drawWall) this.drawWallNode(row, col, !isWall);\r\n                break;\r\n            case 2:\r\n                const isWeight = grid[row][col].cost !== 1;\r\n                if (isWeight !== this.state.drawWeight) this.drawWeightNode(row, col, !isWeight);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles an animation end event of a node. Updates the class name of the\r\n     * node to the instant class version.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    handleAnimationEnd (node) {\r\n        const type = this.getVisualType(node);\r\n        switch (type) {\r\n            case nodeTypes.START:\r\n                this.updateVisualNode(node, nodeTypes.START_INSTANT);\r\n                break;\r\n            case nodeTypes.TARGET:\r\n                this.updateVisualNode(node, nodeTypes.TARGET_INSTANT);\r\n                break;\r\n            case nodeTypes.WALL:\r\n                this.updateVisualNode(node, nodeTypes.WALL_INSTANT);\r\n                break;\r\n            case nodeTypes.WEIGHT:\r\n                this.updateVisualNode(node, nodeTypes.WEIGHT_INSTANT);\r\n                break;\r\n            case nodeTypes.VISITED:\r\n                this.updateVisualNode(node, nodeTypes.VISITED_INSTANT);\r\n                break;\r\n            case nodeTypes.VISITED_WEIGHT:\r\n                this.updateVisualNode(node, nodeTypes.VISITED_WEIGHT_INSTANT);\r\n                break;\r\n            case nodeTypes.PATH:\r\n                this.updateVisualNode(node, nodeTypes.PATH_INSTANT);\r\n                break;\r\n            case nodeTypes.PATH_WEIGHT:\r\n                this.updateVisualNode(node, nodeTypes.PATH_WEIGHT_INSTANT);\r\n                break;\r\n            default:\r\n                this.updateVisualNode(node, nodeTypes.NODE);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the pathfinding visualizer component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        //console.log(this.state.grid);\r\n\r\n        return (\r\n            <div className=\"pathfind-vis\">\r\n                <div className=\"pathfind-menu\">\r\n                    <PathfindMenu pathfinder={this} />\r\n                </div>\r\n                <div \r\n                className=\"grid\" \r\n                onMouseUp={() => this.handleMouseUp()}\r\n                onMouseLeave={() => this.handleMouseUp()}\r\n                onContextMenu={(e) => e.preventDefault()}\r\n                onDragStart={(e) => e.preventDefault()}\r\n                >\r\n                    {Array.from(this.state.grid).map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx} className=\"grid-row\">\r\n                                {Array.from(row).map((node, nodeIdx) => {\r\n                                    const {row, col, isStart, isTarget} = node;\r\n                                    return (\r\n                                        <Node key={nodeIdx}\r\n                                        row={row}\r\n                                        col={col}\r\n                                        isStart={isStart}\r\n                                        isTarget={isTarget}\r\n                                        mousePressed={(row, col) => this.handleMouseDown(row, col)}\r\n                                        mouseEntered={(row, col) => this.handleMouseEnter(row, col)}\r\n                                        animationEnded={() => this.handleAnimationEnd(node)}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindingVisualizer;","// Unsorted bar color\r\nconst UNSORTED = \"pink\";\r\n// Comparing bar color\r\nconst COMPARE = \"red\";\r\n// Sorted bar color\r\nconst SORTED = \"green\";\r\n// Swapping bar color\r\nconst SWAP = \"orange\";\r\n// Minimum bar color\r\nconst MIN = \"purple\";\r\n\r\n// Sorting algorithms\r\nexport const sortAlgorithms = {\r\n    SELECTION: \"selection\",\r\n    INSERTION: \"insertion\",\r\n    MERGE: \"merge\",\r\n}\r\n\r\n/**\r\n * Executes a Selection Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function selectionSort(array) {\r\n    const animations = [];\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n        var min = i;\r\n        animations.push([[MIN, min]]);\r\n        var newMin = true;\r\n        for (let k = i + 1; k < array.length; k++) {\r\n            if (newMin) {\r\n                animations.push([[COMPARE, k]]);\r\n                newMin = false;\r\n            } else animations.push([[UNSORTED, k-1], [COMPARE, k]]);\r\n            \r\n            if (array[min] > array[k]) {\r\n                animations.push([[UNSORTED, min], [MIN, k]]);\r\n                min = k;\r\n                newMin = true;\r\n            }\r\n        }\r\n        if (min !== i) {\r\n            animations.push([[UNSORTED, array.length-1], [SWAP, min, i], [null, min, array[i]], [null, i, array[min]]]);\r\n            animations.push([[UNSORTED, min], [SORTED, i]]);\r\n            var temp = array[i];\r\n            array[i] = array[min];\r\n            array[min] = temp;\r\n        } else animations.push([[UNSORTED, array.length-1], [SORTED, i]]);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Executes a Insertion Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function insertionSort(array) {\r\n    const animations = [];\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n        var cur = array[i];\r\n        var j = i - 1;\r\n        \r\n        animations.push([[COMPARE, j, i]]);\r\n        while (j >= 0) {\r\n            if (j + 2 >= array.length) animations.push([[COMPARE, j, j + 1]]);\r\n            else animations.push([[UNSORTED, j + 2], [COMPARE, j, j + 1]]);\r\n            if (array[j] <= cur) {\r\n                animations.push([[UNSORTED, j, j + 1]]);\r\n                break;\r\n            }\r\n            animations.push([[SWAP, j, j + 1], [null, j + 1, array[j]], [null, j, cur]]);\r\n            array[j + 1] = array[j];\r\n            j--;\r\n        }\r\n        if (j + 2 >= array.length) animations.push([[UNSORTED, j + 1]]);\r\n        else animations.push([[UNSORTED, j + 1, j + 2]]);\r\n        animations.push([[null, j + 1, cur]]);\r\n        array[j+1] = cur;\r\n    }\r\n    for (let i = array.length - 1; i >= 0; i--) animations.push([[SORTED, i]]);\r\n\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Executes a Merge Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function mergeSort(array) {\r\n    const animations = [];\r\n    array = doMergeSort(animations, array);\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Actual recursive Merge Sort function.\r\n * \r\n * @param {Array} animations array of animations\r\n * @param {Array} array array of values \r\n * \r\n * @returns sorted array\r\n */\r\nfunction doMergeSort(animations, array) {\r\n    const middle = array.length / 2;\r\n    if (array.length < 2) return array;\r\n    const left = array.splice(0, middle);\r\n    return merge(animations, doMergeSort(animations, left), doMergeSort(animations, array));\r\n}\r\n\r\n/**\r\n * Merge Sort helper function.\r\n * \r\n * @param {Array} animations array of animations\r\n * @param {Array} left left array\r\n * @param {Array} right right array\r\n * \r\n * @returns merged array\r\n */\r\nfunction merge (animations, left, right) {\r\n    var array = [];\r\n\r\n    while (left.length && right.length) {\r\n        if (left[0] < right[0]) array.push(left.shift());\r\n        else array.push(right.shift());\r\n    }\r\n    return [...array, ...left, ...right];\r\n}","import React from 'react';\r\nimport { Container, Row, Col, Button, ButtonDropdown, DropdownItem, DropdownToggle, DropdownMenu\r\n} from 'reactstrap';\r\n\r\nimport { sortAlgorithms } from './SortAlgorithms';\r\n\r\n/**\r\n * Represents the top menu of the sorting visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SortMenu extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        // Visualize button dropdown status\r\n        this.state = { visualizeDropdownOpen: false };\r\n    }\r\n\r\n    /**\r\n     * Toggles the visualize button dropdown.\r\n     */\r\n    toggleVisualize () { this.setState({visualizeDropdownOpen: !this.state.visualizeDropdownOpen}); }\r\n \r\n    /**\r\n     * Renders the menu component.\r\n     * \r\n     * @returns a <div> element representing the menu\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"sort-menu\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col className=\"title\">\r\n                            Sorting Visualizer\r\n                        </Col>\r\n                        <Col>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.visualizeDropdownOpen} toggle={() => this.toggleVisualize()}>\r\n                                            <Button color=\"success\" onClick={() => this.toggleVisualize()}>Visualize</Button>\r\n                                            <DropdownToggle split color=\"success\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.sorter.visualizeSort(sortAlgorithms.SELECTION)}>Selection Sort</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.sorter.visualizeSort(sortAlgorithms.INSERTION)}>Insertion Sort</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.sorter.visualizeSort(sortAlgorithms.MERGE)}>Merge Sort</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Button color=\"warning\" onClick={() => this.props.sorter.reGenerateArray()}>Randomize</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortMenu;","import React from 'react';\r\n\r\nimport './SortingVisualizer.css';\r\n\r\nimport { random } from '../Utils';\r\nimport SortMenu from './SortMenu';\r\nimport { selectionSort, insertionSort, mergeSort, sortAlgorithms } from './SortAlgorithms';\r\n\r\n// Size of array\r\nconst ARRAY_SIZE = 100;\r\n// Minimum value in array\r\nconst MIN_VALUE = 5;\r\n// Maximum value in array\r\nconst MAX_VALUE = 500;\r\n// Speed between animations in miliseconds\r\nconst SPEED = 10;\r\n\r\n// Unsorted bar color\r\nconst UNSORTED = \"pink\";\r\n\r\n/**\r\n * Represents the sorting visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SortingVisualizer extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        // Array of bar values\r\n        this.state = { array: [] };\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the array with new random values.\r\n     * \r\n     * @param {int} size size of array\r\n     * @param {int} min minimum value\r\n     * @param {int} max maximum value\r\n     */\r\n    rebuildArray (size, min, max) {\r\n        const array = [];\r\n        for (let i = 0; i < size; i++) { array.push(this.createBar(min, max)); }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Creates a new bar with a random value.\r\n     * \r\n     * @param {int} min lower bound of value\r\n     * @param {int} max upper bound of value\r\n     * \r\n     * @returns the created bar\r\n     */\r\n    createBar (min, max) { return random(min, max); }\r\n\r\n    /**\r\n     * Rebuilds the array and regenerates the visual array bars.\r\n     */\r\n    reGenerateArray () { \r\n        var array = this.state.array;\r\n        array = this.rebuildArray(ARRAY_SIZE, MIN_VALUE, MAX_VALUE);\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        for (let i = 0; i < array.length; i++) { bars[i].style.backgroundColor = UNSORTED; }\r\n        this.setState({array: array}); \r\n    }\r\n\r\n    /**\r\n     * Visualizes a given sorting algorithm.\r\n     * \r\n     * @param {sortAlgorithms} algorithm sorting algorithm\r\n     */\r\n    visualizeSort (algorithm) {\r\n        const array = this.state.array;\r\n        var animations = [];\r\n\r\n        switch (algorithm) {\r\n            case sortAlgorithms.SELECTION:\r\n                animations = selectionSort(array);\r\n                break;\r\n            case sortAlgorithms.INSERTION:\r\n                animations = insertionSort(array);\r\n                break;\r\n            case sortAlgorithms.MERGE:\r\n                animations = mergeSort(array);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.animateSort(animations);\r\n    }\r\n\r\n    /**\r\n     * Animates the process of the sorting algorithm. Iterates through an\r\n     * array of animation steps generated by the algorithm.\r\n     * \r\n     * @param {Array} animations \r\n     */\r\n    animateSort (animations) {\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        var i = 0\r\n        for (const step of animations) {\r\n            setTimeout(() => {\r\n                for (const action of step) { \r\n                    if (action[0] === null) {\r\n                        bars[action[1]].style.height = `${action[2]}px`;\r\n                    } else {\r\n                        for (let k = 1; k < action.length; k++) {\r\n                            bars[action[k]].style.backgroundColor = action[0]; \r\n                        }\r\n                    }\r\n                }\r\n            }, SPEED * i++);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Rebuilds the array.\r\n     */\r\n    componentDidMount () {\r\n        const array = this.rebuildArray(ARRAY_SIZE, MIN_VALUE, MAX_VALUE);\r\n        this.setState({array: array});\r\n    }\r\n\r\n    /**\r\n     * Renders the sorting visualizer component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        //console.log(this.state.array);\r\n\r\n        return (\r\n            <div className=\"sort-vis\">\r\n                <div className=\"sort-menu\">\r\n                    <SortMenu sorter={this}/>\r\n                </div>\r\n                <div className=\"array\">\r\n                    {Array.from(this.state.array).map((bar, barIdx) => {\r\n                        return (\r\n                            <div className=\"bar\"\r\n                            key={barIdx}\r\n                            style={{\r\n                                backgroundColor: UNSORTED,\r\n                                height: `${bar}px`,\r\n                            }}/>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\r\nimport { Card, CardHeader, CardBody, NavItem, NavLink, Nav, TabContent, TabPane\r\n} from 'reactstrap'\r\nimport classnames from 'classnames';\r\n\r\nimport Home from './Home';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\n\r\n// Default tab to display on page load\r\nconst DEFAULT_TAB = \"home\";\r\n\r\n/**\r\n * Represents the navigation bar at the top of the page. Each tab\r\n * contains one component of the project.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass NavBar extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        // Current active tab\r\n        this.state = { activeTab: DEFAULT_TAB };\r\n    }\r\n\r\n    /**\r\n     * Renders the navigation bar.\r\n     * \r\n     * @returns a <div> element representing the navigation bar\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"nav-bar\">\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink className={classnames({active: this.state.activeTab === \"home\"})}\r\n                                onClick={() => this.setState({activeTab: \"home\"})}\r\n                                >Home\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className={classnames({active: this.state.activeTab === \"pathfind\"})}\r\n                                onClick={() => this.setState({activeTab: \"pathfind\"})}\r\n                                >Pathfinding Visualizer\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className={classnames({active: this.state.activeTab === \"sort\"})}\r\n                                onClick={() => this.setState({activeTab: \"sort\"})}\r\n                                >Sorting Visualizer\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <TabContent activeTab={this.state.activeTab}>\r\n                            <TabPane tabId=\"home\">\r\n                                <Home />\r\n                            </TabPane>\r\n                            <TabPane tabId=\"pathfind\">\r\n                                <PathfindingVisualizer />\r\n                            </TabPane>\r\n                            <TabPane tabId=\"sort\">\r\n                                <SortingVisualizer />\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import './App.css';\r\nimport NavBar from './NavBar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar></NavBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}