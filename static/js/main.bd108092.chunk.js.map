{"version":3,"sources":["Utils.js","PathfindingVisualizer/SearchAlgorithms.js","PathfindingVisualizer/MazeAlgorithms.js","PathfindingVisualizer/PathfindMenu.js","PathfindingVisualizer/Node.js","PathfindingVisualizer/PathfindingVisualizer.js","SortingVisualizer/SortMenu.js","SortingVisualizer/SortingVisualizer.js","NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["QElement","element","priority","this","random","min","max","Math","floor","PriorityQueue","items","i","length","has","contains","splice","enqueue","qElement","contain","push","isEmpty","shift","str","algorithms","dijkstra","grid","start","target","visitedNodes","unvisitedNodes","nodes","row","node","getAllNodes","distance","sort","a","b","curNode","isWall","Infinity","isVisited","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","cost","previousNode","neighbors","col","filter","recursiveDevision","rows","cols","walls","r","c","innerWalls","buildWalls","h","minC","maxC","minR","maxR","hole","addHWall","addVWall","PathfindMenu","props","toggleVisualize","setState","visualizeDropdownOpen","state","toggleEdit","editDropdownOpen","toggleMaze","mazeDropdownOpen","toggleClear","clearDropdownOpen","toggleInstant","isInstant","getIsInstantText","className","Container","Row","Col","ButtonDropdown","isOpen","toggle","Button","color","onClick","DropdownToggle","split","DropdownMenu","DropdownItem","divider","pathfinder","visualizePathfind","drawStop","drawWalls","drawWeights","resetStartTarget","placeStartNode","placeTargetNode","genRecursiveDevision","clearGrid","clearWeights","clearWalls","clearPath","React","Component","Node","nodeType","isStart","isTarget","id","onMouseDown","mousePressed","onMouseEnter","mouseEntered","INIT_START","INIT_TARGET","PathfindingVisualizer","rebuildGrid","curRow","createNode","softRebuildGrid","oldGrid","rootDistance","startNode","targetNode","setNodeCost","document","getElementById","newNode","placingStart","placingTarget","setStartNode","curStart","curStartNew","setTargetNode","curTarget","curTargetNew","setWallNode","wall","drawMode","algorithm","dequeue","manhattanD","abs","minDistance","setPriority","aStar","breadthFirstSearch","pop","depthFirstSearch","shortestPath","nodesInShortestPath","currentNode","unshift","getShortestPathNodes","animateSearch","setTimeout","animatePath","maze","console","log","mouseIsDown","drawWall","drawWeight","Card","CardHeader","CardBody","onMouseUp","handleMouseUp","onMouseLeave","onContextMenu","e","preventDefault","onDragStart","Array","from","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","SortMenu","sorter","selectionSort","reGenerateArray","UNSORTED","SORTED","SortingVisualizer","rebuildArray","size","array","createBar","bars","getElementsByClassName","style","backgroundColor","animations","k","temp","animateSort","step","action","height","bar","barIdx","NavBar","activeTab","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bd108092.chunk.js","sourcesContent":["// User defined class \r\n// to store element and its priority \r\nclass QElement { \r\n    constructor(element, priority) \r\n    { \r\n        this.element = element; \r\n        this.priority = priority; \r\n    } \r\n} \r\n\r\nexport function random(min, max) { return Math.floor(Math.random() * (max - min + 1) + min); }\r\n  \r\n// PriorityQueue class \r\nclass PriorityQueue { \r\n  \r\n    // An array is used to implement priority \r\n    constructor() \r\n    { \r\n        this.items = []; \r\n    } \r\n  \r\n    contains(element) {\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            if(this.items[i].element === element) return i;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    setPriority(element, priority) {\r\n        var has = this.contains(element);\r\n        if(!has) return;\r\n        this.items.splice(has, 1);\r\n        this.enqueue(element, priority);\r\n    }\r\n\r\n    // enqueue function to add element \r\n    // to the queue as per priority \r\n    enqueue(element, priority) \r\n    { \r\n        // creating object from queue element \r\n        var qElement = new QElement(element, priority); \r\n        var contain = false; \r\n    \r\n        // iterating through the entire \r\n        // item array to add element at the \r\n        // correct location of the Queue \r\n        for (var i = 0; i < this.items.length; i++) { \r\n            if (this.items[i].priority > qElement.priority) { \r\n                // Once the correct location is found it is \r\n                // enqueued \r\n                this.items.splice(i, 0, qElement); \r\n                contain = true; \r\n                break; \r\n            } \r\n        } \r\n    \r\n        // if the element have the highest priority \r\n        // it is added at the end of the queue \r\n        if (!contain) { \r\n            this.items.push(qElement); \r\n        } \r\n    } \r\n\r\n    // dequeue method to remove \r\n    // element from the queue \r\n    dequeue() \r\n    { \r\n        // return the dequeued element \r\n        // and remove it. \r\n        // if the queue is empty \r\n        // returns Underflow \r\n        if (this.isEmpty()) \r\n            return \"Underflow\"; \r\n        return this.items.shift(); \r\n    } \r\n\r\n\r\n    // front function \r\n    front() \r\n    { \r\n        // returns the highest priority element \r\n        // in the Priority queue without removing it. \r\n        if (this.isEmpty()) \r\n            return \"No elements in Queue\"; \r\n        return this.items[0]; \r\n    } \r\n\r\n    // rear function \r\n    rear() \r\n    { \r\n        // returns the lowest priorty \r\n        // element of the queue \r\n        if (this.isEmpty()) \r\n            return \"No elements in Queue\"; \r\n        return this.items[this.items.length - 1]; \r\n    } \r\n\r\n    // isEmpty function \r\n    isEmpty() \r\n    { \r\n        // return true if the queue is empty. \r\n        return this.items.length === 0; \r\n    } \r\n\r\n\r\n    // printQueue function \r\n    // prints all the element of the queue \r\n    printPQueue() \r\n    { \r\n        var str = \"\"; \r\n        for (var i = 0; i < this.items.length; i++) \r\n            str += this.items[i].element + \" \"; \r\n        return str; \r\n    } \r\n} \r\n\r\nexport default PriorityQueue;","import PriorityQueue from \"../Utils\";\r\n\r\nexport const algorithms = {\r\n    DIJKSTRA: \"dijkstra\",\r\n    ASTAR: \"astar\",\r\n    BFS: \"bfs\",\r\n    DFS: \"dfs\",\r\n}\r\n\r\nexport function dijkstra(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n        const curNode = unvisitedNodes.shift();\r\n        \r\n        if (!curNode) break;\r\n        if (curNode.isWall) continue;\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            neighbor.distance = curNode.distance + neighbor.cost;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\nexport function aStar(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = new PriorityQueue();\r\n    unvisitedNodes.enqueue(start, 0);\r\n    start.distance = 0;\r\n    start.rootDistance = 0;\r\n    while (!unvisitedNodes.isEmpty()) {\r\n        const curNode = unvisitedNodes.dequeue().element;\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            const manhattanD = 2 * (Math.abs(target.row - neighbor.row) + (Math.abs(target.col - neighbor.col)));\r\n            neighbor.rootDistance = Math.min(neighbor.rootDistance, curNode.rootDistance + neighbor.cost);\r\n            const minDistance = Math.min(neighbor.distance, neighbor.rootDistance + manhattanD);\r\n            if (minDistance !== neighbor.distance) {\r\n                neighbor.distance = minDistance;\r\n                neighbor.previousNode = curNode;\r\n                if (unvisitedNodes.contains(neighbor)) unvisitedNodes.setPriority(neighbor, minDistance);\r\n            }\r\n            if (!unvisitedNodes.contains(neighbor)) unvisitedNodes.enqueue(neighbor, neighbor.distance);\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\nexport function breadthFirstSearch(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.shift();\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.isVisited) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n        if (curNode === target) return visitedNodes; \r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n            curNode.isVisited = true;\r\n            visitedNodes.push(curNode);\r\n\r\n            neighbor.distance = curNode.distance + 1;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\nexport function depthFirstSearch(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.pop();\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.isVisited) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n            curNode.isVisited = true;\r\n            visitedNodes.push(curNode);\r\n\r\n            neighbor.distance = curNode.distance + 1;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n        nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n    }\r\n\r\nexport function getShortestPathNodes(targetNode) {\r\n    const nodesInShortestPath = [];\r\n    let currentNode = targetNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPath;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {row, col} = node;\r\n    \r\n    if (col > 0) neighbors.push(grid[row][col - 1]); // West\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // South\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); // East\r\n    if (row > 0) neighbors.push(grid[row - 1][col]); // North\r\n    \r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}","import { random } from '../Utils';\r\n\r\nexport function recursiveDevision(rows, cols) {\r\n    var walls = [];\r\n\r\n    //walls = innerWalls(walls, true, 0, cols-1, 0, rows-1);\r\n    walls = buildWalls(walls, rows, cols);\r\n    \r\n    return walls;\r\n}\r\n\r\nfunction buildWalls(walls, rows, cols) {\r\n    for (var r = 0; r < rows; r++) {\r\n        if (r === 0 || r === (rows-1)) {\r\n            for (var c = 0; c < cols; c++) {\r\n                walls.push([r, c]);\r\n            }\r\n        } else {\r\n            walls.push([r, 0]);\r\n            walls.push([r, cols-1]);\r\n        }\r\n    }\r\n\r\n    walls = innerWalls(walls, true, 1, cols-2, 1, rows-2);\r\n    return walls;\r\n}\r\n\r\nfunction innerWalls(walls, h, minC, maxC, minR, maxR) {\r\n    if (h) {\r\n        if (maxC - minC <= 1) { return walls; }\r\n\r\n        var r = Math.floor(random(minR, maxR)/2)*2;\r\n        walls = addHWall(walls, minC, maxC, r);\r\n\r\n        walls = innerWalls(walls, !h, minC, maxC, minR, r-1);\r\n        walls = innerWalls(walls, !h, minC, maxC, r+1, maxR);\r\n    } else {\r\n        if (maxR - minR <= 1) { return walls; }\r\n\r\n        var c = Math.floor(random(minC, maxC)/2)*2;\r\n        walls = addVWall(walls, minR, maxR, c);\r\n\r\n        walls = innerWalls(walls, !h, minC, c-1, minR, maxR);\r\n        walls = innerWalls(walls, !h, c+1, maxC, minR, maxR);\r\n    }\r\n    return walls;\r\n}\r\n\r\nfunction addHWall(walls, minC, maxC, r) {\r\n    var hole = Math.floor(random(minC, maxC)/2)*2+1;\r\n    for (var i = minC; i <= maxC; i++) { if (i !== hole) walls.push([r, i]); }\r\n    return walls;\r\n}\r\n\r\nfunction addVWall(walls, minR, maxR, c) {\r\n    var hole = Math.floor(random(minR, maxR)/2)*2+1;\r\n    for (var i = minR; i <= maxR; i++) { if (i !== hole) walls.push([i, c]); }\r\n    return walls;\r\n}","import React from 'react';\r\nimport { Container, Row, Col, Button, ButtonDropdown, DropdownItem, DropdownToggle, DropdownMenu\r\n} from 'reactstrap';\r\n\r\nimport './PathfindMenu.css';\r\nimport { algorithms } from './SearchAlgorithms';\r\n\r\nclass PathfindMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visualizeDropdownOpen: false,\r\n            editDropdownOpen: false,\r\n            mazeDropdownOpen: false,\r\n            clearDropdownOpen: false,\r\n            isInstant: false,\r\n        };\r\n    }\r\n\r\n    toggleVisualize = () => { this.setState({visualizeDropdownOpen: !this.state.visualizeDropdownOpen}); }\r\n\r\n    toggleEdit = () => { this.setState({editDropdownOpen: !this.state.editDropdownOpen}); }\r\n\r\n    toggleMaze = () => { this.setState({mazeDropdownOpen: !this.state.mazeDropdownOpen}); }\r\n\r\n    toggleClear = () => { this.setState({clearDropdownOpen: !this.state.clearDropdownOpen}); }\r\n\r\n    toggleInstant = () => { this.setState({isInstant: !this.state.isInstant}); }\r\n\r\n    getIsInstantText = () => { return this.state.isInstant ? \"Instant\" : \"Visualize\"; }\r\n \r\n    render () {\r\n        return (\r\n            <div className=\"pathfind-menu\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col className=\"title\">\r\n                            Pathfinding Visualizer\r\n                        </Col>\r\n                        <Col>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.visualizeDropdownOpen} toggle={this.toggleVisualize}>\r\n                                            <Button color=\"success\" onClick={this.toggleVisualize}>{this.getIsInstantText()}</Button>\r\n                                            <DropdownToggle split color=\"success\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={this.toggleInstant}>Pathfind Mode</DropdownItem>\r\n                                                <DropdownItem divider />\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(algorithms.DIJKSTRA, this.state.isInstant)}>Dijkstra</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(algorithms.ASTAR, this.state.isInstant)}>A* (A-Star)</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(algorithms.BFS, this.state.isInstant)}>Breadth First Search</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(algorithms.DFS, this.state.isInstant)}>Depth First Search</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.editDropdownOpen} toggle={this.toggleEdit}>\r\n                                            <Button color=\"info\" onClick={this.toggleEdit}>Edit</Button>\r\n                                            <DropdownToggle split color=\"info\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.drawStop()}>Stop Drawing</DropdownItem>\r\n                                                <DropdownItem divider />\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.drawWalls()}>Draw Walls</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.drawWeights()}>Draw Weights</DropdownItem>\r\n                                                <DropdownItem divider />\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.resetStartTarget()}>Reset Start/Target Nodes</DropdownItem>\r\n                                                <DropdownItem divider />\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.placeStartNode()}>Place Start Node</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.placeTargetNode()}>Place Target Node</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.mazeDropdownOpen} toggle={this.toggleMaze}>\r\n                                            <Button color=\"warning\" onClick={this.toggleMaze}>Maze</Button>\r\n                                            <DropdownToggle split color=\"warning\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.genRecursiveDevision()}>Recursive Devision</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.clearDropdownOpen} toggle={this.toggleClear}>\r\n                                            <Button color=\"danger\" onClick={this.toggleClear}>Clear</Button>\r\n                                            <DropdownToggle split color=\"danger\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearGrid()}>Clear All</DropdownItem>\r\n                                                <DropdownItem divider />\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearWeights()}>Clear Weights</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearWalls()}>Clear Walls</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearPath()}>Clear Path</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindMenu;","import React from 'react';\r\n\r\nimport './Node.css';\r\n\r\nclass Node extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render () {\r\n        const nodeType = this.props.isStart ? 'node-start' : \r\n        this.props.isTarget ? 'node-target' : \r\n        this.props.isWall ? 'node-wall' :\r\n        '';\r\n\r\n        return (\r\n            <div \r\n            id={`node-${this.props.row}-${this.props.col}`} \r\n            className={`node ${nodeType}`}\r\n            onMouseDown={() => this.props.mousePressed(this.props.row, this.props.col, this.props.isWall)}\r\n            onMouseEnter={() => this.props.mouseEntered(this.props.row, this.props.col, this.props.isWall)}\r\n            /> \r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React from 'react';\r\nimport { Card, CardHeader, CardBody\r\n} from 'reactstrap';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nimport { getShortestPathNodes, dijkstra, aStar, breadthFirstSearch, depthFirstSearch, algorithms \r\n} from './SearchAlgorithms';\r\nimport { recursiveDevision\r\n} from './MazeAlgorithms';\r\n\r\nimport PathfindMenu from './PathfindMenu';\r\nimport Node from './Node';\r\n\r\nconst ROW_COUNT = 25;\r\nconst COL_COUNT = 63;\r\n\r\nconst INIT_START = [12, 10];\r\nconst INIT_TARGET = [12, 52];\r\n\r\nclass PathfindingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsDown: false,\r\n            drawMode: 0,\r\n            drawWall: null,\r\n            drawWeight: null,\r\n            placingStart: false,\r\n            placingTarget: false,\r\n            startNode: INIT_START,\r\n            targetNode: INIT_TARGET,\r\n        };\r\n    }\r\n\r\n    rebuildGrid = () => {\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                curRow.push(this.createNode(r, c, 1, false));\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    softRebuildGrid = () => {\r\n        const oldGrid = this.state.grid;\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                curRow.push(this.createNode(r, c, oldGrid[r][c].cost, oldGrid[r][c].isWall));\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    createNode = (row, col, cost, isWall) => {\r\n        return {\r\n            row: row,\r\n            col: col,\r\n            cost: cost,\r\n            distance: Infinity,\r\n            rootDistance: Infinity,\r\n            isStart: row === this.state.startNode[0] && col === this.state.startNode[1],\r\n            isTarget: row === this.state.targetNode[0] && col === this.state.targetNode[1],\r\n            isWall: isWall,\r\n            previousNode: null,\r\n        }\r\n    }\r\n\r\n    setNodeCost = (row, col, cost) => {\r\n        const grid = this.state.grid;\r\n        const node = grid[row][col];\r\n\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        if (cost === 1) document.getElementById(`node-${row}-${col}`).className = 'node';\r\n        else document.getElementById(`node-${row}-${col}`).className = 'node node-weight';\r\n\r\n        const newNode = {\r\n            ...node,\r\n            cost: cost,\r\n        };\r\n        grid[row][col] = newNode;\r\n        \r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    placeStartNode = () => { this.setState({placingStart: true}); }\r\n    \r\n    placeTargetNode = () => { this.setState({placingTarget: true}); }\r\n\r\n    setStartNode = (row, col) => { \r\n        const grid = this.state.grid;\r\n        const curStart = this.state.grid[this.state.startNode[0]][this.state.startNode[1]];\r\n        const curStartNew = {\r\n            ...curStart,\r\n            isStart: false,\r\n        }\r\n        grid[this.state.startNode[0]][this.state.startNode[1]] = curStartNew;\r\n\r\n        this.setState({startNode: [row, col]}); \r\n        \r\n        const node = this.state.grid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: false,\r\n            isStart: true,\r\n        }\r\n        grid[row][col] = newNode;\r\n\r\n        this.setState({\r\n            grid: grid,\r\n            placingStart: false,\r\n        });\r\n    }\r\n\r\n    setTargetNode = (row, col) => { \r\n        const grid = this.state.grid;\r\n        const curTarget = this.state.grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n        const curTargetNew = {\r\n            ...curTarget,\r\n            isTarget: false,\r\n        }\r\n        grid[this.state.targetNode[0]][this.state.targetNode[1]] = curTargetNew;\r\n\r\n        this.setState({targetNode: [row, col]}); \r\n    \r\n        const node = this.state.grid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: false,\r\n            isTarget: true,\r\n        }\r\n        grid[row][col] = newNode;\r\n        \r\n        this.setState({\r\n            grid: grid,\r\n            placingTarget: false,\r\n        });\r\n    }\r\n\r\n    setWallNode = (row, col, wall) => {\r\n        const grid = this.state.grid;\r\n        if (grid[row][col].isStart || grid[row][col].isTarget) return;\r\n\r\n        const node = this.state.grid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: wall,\r\n        };\r\n        grid[row][col] = newNode;\r\n        \r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    clearPath = () => {\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = document.getElementById(`node-${r}-${c}`);\r\n                if (node.className === 'node node-visited' || node.className === 'node node-path' || node.className === 'node node-visited-instant') {\r\n                    node.className = 'node';\r\n                }\r\n                else if (node.className === 'node node-visited-weight' || node.className === 'node node-path-weight') {\r\n                    node.className = 'node node-weight';\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: this.softRebuildGrid()})\r\n    }\r\n\r\n    clearWalls = () => { \r\n        const grid = this.state.grid;\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.isWall) {\r\n                    const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n                    element.className = 'node';\r\n                    node.isWall = false;\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    clearWeights = () => {\r\n        const grid = this.state.grid;\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.cost !== 1) {\r\n                    const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n                    element.className = 'node';\r\n                    node.cost = 1;\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    clearGrid = () => {\r\n        this.clearPath();\r\n        this.clearWeights();\r\n        this.clearWalls();\r\n    }\r\n\r\n    drawStop = () => { this.setState({drawMode: 0}); }\r\n\r\n    drawWalls = () => { this.setState({drawMode: 1}); }\r\n\r\n    drawWeights = () => { this.setState({drawMode: 2}); }\r\n\r\n    resetStartTarget = () => {\r\n        this.setStartNode(INIT_START[0], INIT_START[1]);\r\n        this.setTargetNode(INIT_TARGET[0], INIT_TARGET[1]);\r\n    }\r\n\r\n    visualizePathfind = (algorithm, isInstant) => {\r\n        this.clearPath();\r\n\r\n        const grid = this.state.grid;\r\n        const start = grid[this.state.startNode[0]][this.state.startNode[1]];\r\n        const target = grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n\r\n        var visitedNodes = null;\r\n        switch (algorithm) {\r\n            case algorithms.DIJKSTRA:\r\n                visitedNodes = dijkstra(grid, start, target);\r\n                break;\r\n            case algorithms.ASTAR:\r\n                visitedNodes = aStar(grid, start, target);\r\n                break;\r\n            case algorithms.BFS:\r\n                visitedNodes = breadthFirstSearch(grid, start, target);\r\n                break;\r\n            case algorithms.DFS:\r\n                visitedNodes = depthFirstSearch(grid, start, target);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const shortestPath = getShortestPathNodes(target);\r\n\r\n        this.animateSearch(visitedNodes, shortestPath, isInstant);\r\n    }\r\n\r\n    animateSearch = (visitedNodes, shortestPath, isInstant) => {\r\n        if (isInstant) {\r\n            for (let i = 0; i <= visitedNodes.length; i++) {\r\n                if (i === visitedNodes.length) {\r\n                    for (let i = 1; i < shortestPath.length - 1; i++) {\r\n                        const node = shortestPath[i];\r\n                        if (!node.isStart && !node.isTarget) {\r\n                            if (node.cost !== 1) {\r\n                                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path-weight';\r\n                            } else {\r\n                                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\r\n                            }\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n                const node = visitedNodes[i];\r\n                if(!node.isStart && !node.isTarget) {\r\n                    if (node.cost !== 1) {\r\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited-weight-instant';\r\n                    } else {\r\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited-instant';\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = 0; i <= visitedNodes.length; i++) {\r\n                if (i === visitedNodes.length) {\r\n                    setTimeout(() => {\r\n                        this.animatePath(shortestPath);\r\n                    }, 5 * i);\r\n                    return;\r\n                }\r\n                setTimeout(() => {\r\n                    const node = visitedNodes[i];\r\n                    if(!node.isStart && !node.isTarget) { \r\n                        if (node.cost !== 1) {\r\n                            document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited-weight';\r\n                        } else {\r\n                            document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n                        }\r\n                    }\r\n                }, 5 * i);\r\n            }\r\n        }\r\n    }\r\n\r\n    animatePath = (shortestPath) => {\r\n        for (let i = 0; i < shortestPath.length; i++) {\r\n            setTimeout(() => {\r\n                const node = shortestPath[i];\r\n                if (!node.isStart && !node.isTarget) {\r\n                    if (node.cost !== 1) {\r\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path-weight';\r\n                    } else {\r\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\r\n                    }\r\n                }\r\n            }, 50 * i);\r\n        }\r\n    }\r\n\r\n    genRecursiveDevision = () => {\r\n        this.clearWalls();\r\n        const maze = recursiveDevision(ROW_COUNT, COL_COUNT);\r\n\r\n        for (let i = 0; i < maze.length; i++) {\r\n            setTimeout(() => {\r\n                console.log(maze[i]);\r\n                console.log(maze[i][0]);\r\n                console.log(maze[i][1]);\r\n                this.setWallNode(maze[i][0], maze[i][1], true);\r\n            }, 100 * i);\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        const grid = this.rebuildGrid();\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        if (this.state.placingStart) {\r\n            this.setStartNode(row, col);\r\n            return;\r\n        }\r\n\r\n        if (this.state.placingTarget) {\r\n            this.setTargetNode(row, col);\r\n            return;\r\n        }\r\n\r\n        switch (this.state.drawMode) {\r\n            case 1:\r\n                const isWall = this.state.grid[row][col].isWall;\r\n                this.setWallNode(row, col, !isWall);\r\n                this.setState({drawWall: !isWall});\r\n                break;\r\n            case 2:\r\n                if (this.state.grid[row][col].cost === 1) {\r\n                    this.setNodeCost(row, col, 5);\r\n                    this.setState({drawWeight: true});\r\n                } else {\r\n                    this.setNodeCost(row, col, 1);\r\n                    this.setState({drawWeight: false});\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({mouseIsDown: true});\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.setState({\r\n            mouseIsDown: false,\r\n            drawWall: null,\r\n            drawWeight: null,\r\n        });\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsDown) return;\r\n        switch (this.state.drawMode) {\r\n            case 1:\r\n                const isWall = this.state.grid[row][col].isWall;\r\n                if (isWall !== this.state.drawWall) this.setWallNode(row, col, !isWall);\r\n                break;\r\n            case 2:\r\n                if (this.state.drawWeight) this.setNodeCost(row, col, 5);\r\n                if (!this.state.drawWeight) this.setNodeCost(row, col, 1);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render () {\r\n        console.log(this.state.grid);\r\n\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <PathfindMenu pathfinder={this} />\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <div \r\n                        className=\"grid\" \r\n                        onMouseUp={() => this.handleMouseUp()}\r\n                        onMouseLeave={() => this.handleMouseUp()}\r\n                        onContextMenu={(e) => e.preventDefault()}\r\n                        onDragStart={(e) => e.preventDefault()}\r\n                        >\r\n                            {Array.from(this.state.grid).map((row, rowIdx) => {\r\n                                return (\r\n                                    <div key={rowIdx} className=\"grid-row\">\r\n                                        {Array.from(row).map((node, nodeIdx) => {\r\n                                            const {row, col, isStart, isTarget, isWall} = node;\r\n                                            return (\r\n                                                <Node\r\n                                                key={nodeIdx}\r\n                                                row={row}\r\n                                                col={col}\r\n                                                isStart={isStart}\r\n                                                isTarget={isTarget}\r\n                                                isWall={isWall}\r\n                                                mousePressed={(row, col) => this.handleMouseDown(row, col)}\r\n                                                mouseEntered={(row, col) => this.handleMouseEnter(row, col)}\r\n                                                />\r\n                                            );\r\n                                        })}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindingVisualizer;","import React from 'react';\r\nimport { Container, Row, Col, Button, ButtonDropdown, DropdownItem, DropdownToggle, DropdownMenu\r\n} from 'reactstrap';\r\n\r\nimport './SortMenu.css';\r\n\r\nclass SortMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visualizeDropdownOpen: false,\r\n        };\r\n    }\r\n\r\n    toggleVisualize = () => { this.setState({visualizeDropdownOpen: !this.state.visualizeDropdownOpen}); }\r\n \r\n    render () {\r\n        return (\r\n            <div className=\"sort-menu\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col className=\"title\">\r\n                            Sorting Visualizer\r\n                        </Col>\r\n                        <Col>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.visualizeDropdownOpen} toggle={this.toggleVisualize}>\r\n                                            <Button color=\"success\" onClick={this.toggleVisualize}>Visualize</Button>\r\n                                            <DropdownToggle split color=\"success\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={this.props.sorter.selectionSort}>Selection Sort</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Button color=\"warning\" onClick={this.props.sorter.reGenerateArray}>Randomize</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortMenu;","import React from 'react';\r\n\r\nimport { Card, CardHeader, CardBody\r\n} from 'reactstrap'\r\n\r\nimport { random } from '../Utils';\r\nimport SortMenu from './SortMenu';\r\n\r\nimport './SortingVisualizer.css';\r\n\r\nconst ARRAY_SIZE = 50;\r\nconst MIN_VALUE = 5;\r\nconst MAX_VALUE = 500;\r\n\r\nconst UNSORTED = \"pink\";\r\nconst COMPARE = \"red\";\r\nconst SORTED = \"green\";\r\nconst SWAP = \"orange\";\r\nconst MIN = \"purple\";\r\n\r\nclass SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    rebuildArray = (size, min, max) => {\r\n        const array = [];\r\n        for (let i = 0; i < size; i++) { array.push(this.createBar(min, max)); }\r\n        return array;\r\n    }\r\n\r\n    createBar = (min, max) => {\r\n        const value = random(min, max);\r\n        return value;\r\n    }\r\n\r\n    reGenerateArray = () => { \r\n        var array = this.state.array;\r\n        array = this.rebuildArray(ARRAY_SIZE, MIN_VALUE, MAX_VALUE);\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        for (let i = 0; i < array.length; i++) { bars[i].style.backgroundColor = UNSORTED; }\r\n        this.setState({array: array}); \r\n    }\r\n\r\n    selectionSort = () => {\r\n        const array = this.state.array;\r\n        const animations = [];\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n            var min = i;\r\n            for (let k = i + 1; k < array.length; k++) {\r\n                animations.push([[MIN, min], [COMPARE, k]]);\r\n                if (array[min] > array[k]) {\r\n                    animations.push([[UNSORTED, min]]);\r\n                    min = k;\r\n                }\r\n                else animations.push([[UNSORTED, k]]);\r\n            }\r\n\r\n            if (min !== i) {\r\n                animations.push([[SWAP, min, i], [null, min, array[i]], [null, i, array[min]]]);\r\n                animations.push([[UNSORTED, min], [SORTED, i]]);\r\n                var temp = array[i];\r\n                array[i] = array[min];\r\n                array[min] = temp;\r\n            } else animations.push([[SORTED, i]]);\r\n        }\r\n\r\n        this.animateSort(animations);\r\n    }\r\n\r\n    animateSort = (animations) => {\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        var i = 0\r\n        for (const step of animations) {\r\n            setTimeout(() => {\r\n                for (const action of step) { \r\n                    if (action[0] === null) {\r\n                        bars[action[1]].style.height = `${action[2]}px`;\r\n                    } else {\r\n                        for (let k = 1; k < action.length; k++) {\r\n                            bars[action[k]].style.backgroundColor = action[0]; \r\n                        }\r\n                    }\r\n                }\r\n            }, 100 * i);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        const array = this.rebuildArray(ARRAY_SIZE, MIN_VALUE, MAX_VALUE);\r\n        this.setState({array: array});\r\n    }\r\n\r\n    render () {\r\n        console.log(this.state.array);\r\n\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <SortMenu sorter={this}/>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <div className=\"bar-array\">\r\n                            {Array.from(this.state.array).map((bar, barIdx) => {\r\n                                return (\r\n                                    <div className=\"bar\"\r\n                                    key={barIdx}\r\n                                    style={{\r\n                                      backgroundColor: UNSORTED,\r\n                                      height: `${bar}px`,\r\n                                    }}/>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\r\nimport classnames from 'classnames';\r\n\r\nimport './NavBar.css';\r\n\r\nimport { Card, CardHeader, CardBody, NavItem, NavLink, Nav, TabContent, TabPane\r\n} from 'reactstrap'\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\n\r\nclass NavBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeTab: \"home\"\r\n        };\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <Card className=\"nav-bar\">\r\n                    <CardHeader>\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink className={classnames({active: this.state.activeTab === \"home\"})}\r\n                                onClick={() => this.setState({activeTab: \"home\"})}\r\n                                >Home\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className={classnames({active: this.state.activeTab === \"pathfind\"})}\r\n                                onClick={() => this.setState({activeTab: \"pathfind\"})}\r\n                                >Pathfinding Visualizer\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className={classnames({active: this.state.activeTab === \"sort\"})}\r\n                                onClick={() => this.setState({activeTab: \"sort\"})}\r\n                                >Sorting Visualizer\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <TabContent activeTab={this.state.activeTab}>\r\n                            <TabPane tabId=\"home\">\r\n                                Jake Waclawski<br></br>\r\n                                <a href=\"https://github.com/jmw3638/Pathfinder\">GitHub</a>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"pathfind\">\r\n                                <PathfindingVisualizer />\r\n                            </TabPane>\r\n                            <TabPane tabId=\"sort\">\r\n                                <SortingVisualizer />\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import './App.css';\r\nimport NavBar from './NavBar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar></NavBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}