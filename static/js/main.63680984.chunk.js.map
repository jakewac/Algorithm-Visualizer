{"version":3,"sources":["Home.js","Utils.js","PathfindingVisualizer/PathfindAlgorithms.js","PathfindingVisualizer/MazeAlgorithms.js","PathfindingVisualizer/Node.js","PathfindingVisualizer/PathfindMenu.js","PathfindingVisualizer/PathfindInfo.js","PathfindingVisualizer/PathfindingVisualizer.js","SortingVisualizer/SortAlgorithms.js","SortingVisualizer/SortMenu.js","SortingVisualizer/SortingVisualizer.js","NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","state","Card","CardHeader","href","CardBody","React","Component","random","min","max","Math","floor","QElement","element","priority","this","PriorityQueue","items","i","length","has","contains","splice","enqueue","qElement","contain","push","isEmpty","shift","str","pathfindAlgorithms","dijkstra","grid","start","target","visitedNodes","unvisitedNodes","nodes","row","node","getAllNodes","distance","sort","a","b","curNode","isWall","Infinity","isVisited","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","cost","previousNode","neighbors","col","filter","recursiveDevision","rows","cols","walls","r","c","innerWalls","buildWalls","h","minC","maxC","minR","maxR","rGap","cGap","addVWall","addHWall","numHoles","holes","hole","includes","Node","nodeType","type","isStart","isTarget","id","className","onMouseDown","mousePressed","onMouseEnter","mouseEntered","onMouseLeave","mouseLeft","onAnimationEnd","animationEnded","PathfindMenu","visualizeDropdownOpen","editDropdownOpen","mazeDropdownOpen","clearDropdownOpen","isInstant","setState","document","getElementById","pathfinder","setDrawMode","Container","Row","Col","ButtonDropdown","isOpen","toggle","toggleVisualize","Button","color","onClick","getIsInstantText","DropdownToggle","split","DropdownMenu","DropdownItem","toggleInstant","divider","visualizePathfind","toggleEdit","resetStartTarget","toggleMaze","animateMaze","toggleClear","clearGrid","clearWeights","clearWalls","clearPaths","startNodeKey","key","keyAnimationEnded","targetNodeKey","weightNodeKey","wallNodeKey","PathfindInfo","INIT_START","INIT_TARGET","nodeTypes","PathfindingVisualizer","weightCost","mouseIsDown","canDraw","drawMode","drawWall","drawWeight","startNode","targetNode","curRow","createNode","oldGrid","curVisual","rootDistance","getNodeVisual","curStart","updateNodeVisual","curTarget","isWeight","updateGridState","updateAlgorithmInfo","initStart","initTarget","drawStartNode","drawTargetNode","weight","mode","algorithm","softRebuildGrid","dequeue","manhattanD","abs","minDistance","setPriority","aStar","breadthFirstSearch","pop","depthFirstSearch","shortestPath","nodesInShortestPath","currentNode","unshift","getShortestPathNodes","totalCost","getShortestPathCost","animateSearch","drawVisitedNode","animatePath","setTimeout","drawPathNode","pathNodes","innerHTML","maze","drawWallNode","rebuildGrid","drawWeightNode","isPreview","onMouseUp","handleMouseUp","onContextMenu","e","preventDefault","onDragStart","Array","from","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseLeft","handleAnimationEnd","UNSORTED","COMPARE","SORTED","SWAP","MIN","sortAlgorithms","mergeSort","array","animations","doMergeSort","middle","left","right","merge","SortMenu","sorter","visualizeSort","reGenerateArray","SortingVisualizer","size","createBar","rebuildArray","bars","getElementsByClassName","style","backgroundColor","newMin","k","temp","selectionSort","cur","j","insertionSort","animateSort","step","action","height","bar","barIdx","NavBar","activeTab","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.63680984.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardHeader, CardBody\r\n} from 'reactstrap';\r\n\r\n/**\r\n * Represents the home tab component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass Home extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the home tab component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <CardHeader>\r\n                        Jake Waclawski<br></br>\r\n                        <a href=\"https://github.com/jmw3638/Pathfinder\">GitHub</a>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","/**\r\n * Generates a random integer between two given values.\r\n * \r\n * @param {int} min minimum value\r\n * @param {int} max maximum value \r\n * \r\n * @returns the generated integer\r\n */\r\nexport function random(min, max) { return Math.floor(Math.random() * (max - min + 1) + min); }\r\n\r\n/**\r\n * User defined PriorityQueue helper class. Stores element and its priority.\r\n */\r\nclass QElement { \r\n    constructor(element, priority) \r\n    { \r\n        this.element = element; \r\n        this.priority = priority; \r\n    } \r\n} \r\n  \r\n/**\r\n * Represents a priority queue data structure.\r\n */\r\nclass PriorityQueue { \r\n    constructor() { \r\n        this.items = []; \r\n    } \r\n  \r\n    /**\r\n     * Determines if an element is in the priority queue.\r\n     * \r\n     * @param {Object} element element to search for\r\n     * \r\n     * @returns the index of the element, false if not found\r\n     */\r\n    contains(element) {\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            if(this.items[i].element === element) return i;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets an element's priority.\r\n     * \r\n     * @param {Object} element the element\r\n     * @param {int} priority new priority\r\n     */\r\n    setPriority(element, priority) {\r\n        var has = this.contains(element);\r\n        if(!has) return;\r\n        this.items.splice(has, 1);\r\n        this.enqueue(element, priority);\r\n    }\r\n\r\n    /**\r\n     * Adds an element to the priority queue with a given priority.\r\n     * \r\n     * @param {Object} element \r\n     * @param {int} priority \r\n     */\r\n    enqueue(element, priority) \r\n    { \r\n        var qElement = new QElement(element, priority); \r\n        var contain = false; \r\n\r\n        for (var i = 0; i < this.items.length; i++) { \r\n            if (this.items[i].priority > qElement.priority) { \r\n                this.items.splice(i, 0, qElement); \r\n                contain = true; \r\n                break; \r\n            } \r\n        } \r\n\r\n        if (!contain) this.items.push(qElement);  \r\n    } \r\n\r\n    /**\r\n     * Removes and returns the first element from the priority queue.\r\n     * \r\n     * @returns the removed element, false if the queue is empty\r\n     */\r\n    dequeue() \r\n    { \r\n        if (this.isEmpty()) return false; \r\n        return this.items.shift(); \r\n    } \r\n\r\n\r\n    /**\r\n     * Returns the highest priority element in the queue without removing it.\r\n     * \r\n     * @returns highest priority element, false if empty\r\n     */\r\n    front() \r\n    { \r\n        if (this.isEmpty()) return false; \r\n        return this.items[0]; \r\n    } \r\n\r\n    /**\r\n     * Returns the lowest priority element in the queue without removing it.\r\n     * \r\n     * @returns lowest priority element, false if empty\r\n     */\r\n    rear() \r\n    {  \r\n        if (this.isEmpty()) return false; \r\n        return this.items[this.items.length - 1]; \r\n    } \r\n\r\n    /**\r\n     * Determines if the priority queue is empty or not.\r\n     * \r\n     * @returns if the priority queue is empty\r\n     */\r\n    isEmpty() { return this.items.length === 0; } \r\n\r\n\r\n    /**\r\n     * Prints all elements of the priority queue.\r\n     * \r\n     * @returns the generated print string\r\n     */\r\n    printPQueue() \r\n    { \r\n        var str = \"\"; \r\n        for (var i = 0; i < this.items.length; i++) str += this.items[i].element + \" \"; \r\n        return str; \r\n    } \r\n} \r\n\r\nexport default PriorityQueue;","import PriorityQueue from \"../Utils\";\r\n\r\n// Pathfinding algorithms\r\nexport const pathfindAlgorithms = {\r\n    DIJKSTRA: \"Dijkstra\",\r\n    ASTAR: \"A-Star\",\r\n    BFS: \"Breadth First Search\",\r\n    DFS: \"Depth First Search\",\r\n}\r\n\r\n/**\r\n * Executes a Dijkstra's algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function dijkstra(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n        const curNode = unvisitedNodes.shift();\r\n        \r\n        if (!curNode) break;\r\n        if (curNode.isWall) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            neighbor.distance = curNode.distance + neighbor.cost;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes an A* (A-Star) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function aStar(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = new PriorityQueue();\r\n    unvisitedNodes.enqueue(start, 0);\r\n    start.distance = 0;\r\n    start.rootDistance = 0;\r\n    while (!unvisitedNodes.isEmpty()) {\r\n        const curNode = unvisitedNodes.dequeue().element;\r\n\r\n        if (curNode.isWall) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            const manhattanD = 2 * (Math.abs(target.row - neighbor.row) + (Math.abs(target.col - neighbor.col)));\r\n            neighbor.rootDistance = Math.min(neighbor.rootDistance, curNode.rootDistance + neighbor.cost);\r\n            const minDistance = Math.min(neighbor.distance, neighbor.rootDistance + manhattanD);\r\n            if (minDistance !== neighbor.distance) {\r\n                neighbor.distance = minDistance;\r\n                neighbor.previousNode = curNode;\r\n                if (unvisitedNodes.contains(neighbor)) unvisitedNodes.setPriority(neighbor, minDistance);\r\n            }\r\n            if (!unvisitedNodes.contains(neighbor)) unvisitedNodes.enqueue(neighbor, neighbor.distance);\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes Breadth First Search (BFS) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function breadthFirstSearch(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.shift();\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.isVisited) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode === target) return visitedNodes; \r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n            \r\n\r\n            neighbor.distance = curNode.distance + 1;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes a Depth First Search (DFS) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function depthFirstSearch(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.pop();\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.isVisited) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n            curNode.isVisited = true;\r\n            visitedNodes.push(curNode);\r\n\r\n            neighbor.distance = curNode.distance + 1;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Gets all of the nodes in the grid.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * \r\n * @returns an array containing all of the nodes\r\n */\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) nodes.push(node);\r\n    }\r\n    return nodes;\r\n}\r\n\r\n/**\r\n * Gets the shortest path of nodes from the target node to \r\n * the start node.\r\n * \r\n * @param {Object} targetNode target node\r\n * \r\n * @returns an array of shortest path nodes in order\r\n */\r\nexport function getShortestPathNodes(targetNode) {\r\n    const nodesInShortestPath = [];\r\n    let currentNode = targetNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPath;\r\n}\r\n\r\n/**\r\n * Gets the total weighted cost of the shortest path.\r\n * \r\n * @param {Object} targetNode target node\r\n * \r\n * @returns the total cost\r\n */\r\nexport function getShortestPathCost(targetNode) {\r\n    const nodesInShortestPath = [];\r\n    let currentNode = targetNode;\r\n    let totalCost = 0;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPath.unshift(currentNode);\r\n        totalCost += currentNode.cost;\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return totalCost;\r\n}\r\n\r\n/**\r\n * Gets all unvisited neighbors of a given node.\r\n * \r\n * @param {Object} node node\r\n * @param {Array} grid grid of nodes\r\n * \r\n * @returns an array containing all unvisited neighbors\r\n */\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {row, col} = node;\r\n    \r\n    if (col > 0) neighbors.push(grid[row][col - 1]); // West\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // South\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); // East\r\n    if (row > 0) neighbors.push(grid[row - 1][col]); // North\r\n    \r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}","import { random } from '../Utils';\r\n\r\n/**\r\n * Algorithm for generating a maze using recursive devision.\r\n * \r\n * @param {int} rows number of rows\r\n * @param {int} cols number of columns\r\n * \r\n * @returns a grid of boolean values, true if wall node\r\n */\r\nexport function recursiveDevision(rows, cols) {\r\n    var walls = [];\r\n\r\n    //walls = innerWalls(walls, true, 0, cols-1, 0, rows-1);\r\n    walls = buildWalls(walls, rows, cols);\r\n    \r\n    return walls;\r\n}\r\n\r\n/**\r\n * Creates walls around the border of the maze.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} rows amount of rows \r\n * @param {int} cols amount of columns\r\n * \r\n * @returns a grid of walls\r\n */\r\nfunction buildWalls(walls, rows, cols) {\r\n    for (var r = 0; r < rows; r++) {\r\n        if (r === 0 || r === (rows-1)) {\r\n            for (var c = 0; c < cols; c++) {\r\n                walls.push([r, c]);\r\n            }\r\n        } else {\r\n            walls.push([r, 0]);\r\n            walls.push([r, cols-1]);\r\n        }\r\n    }\r\n\r\n    walls = innerWalls(walls, true, 1, cols-2, 1, rows-2);\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Recursive function that builds the inner walls of the maze.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {boolean} h is horizontal wall\r\n * @param {int} minC lower column bound\r\n * @param {int} maxC upper column bound\r\n * @param {int} minR lower row bound\r\n * @param {int} maxR upper row bound\r\n * \r\n * @returns a grid of walls\r\n */\r\nfunction innerWalls(walls, h, minC, maxC, minR, maxR) {\r\n    const rGap = maxR - minR;\r\n    const cGap = maxC - minC;\r\n\r\n    if (maxR - minR <= 1) return walls; \r\n    if (maxC - minC <= 1) return walls; \r\n\r\n    var r = Math.floor(random(minR+1, maxR-1)/2)*2;\r\n    var c = Math.floor(random(minC+1, maxC-1)/2)*2;\r\n\r\n    // ^ xor: one or the other but not both\r\n    if (rGap <= 5 ^ cGap<= 5) {\r\n        if (rGap <= 5) {\r\n            walls = addVWall(walls, minR, maxR, c);\r\n\r\n            walls = innerWalls(walls, !h, minC, c-1, minR, maxR);\r\n            walls = innerWalls(walls, !h, c+1, maxC, minR, maxR);\r\n        }\r\n        if (cGap <= 5) {\r\n            walls = addHWall(walls, minC, maxC, r);\r\n    \r\n            walls = innerWalls(walls, !h, minC, maxC, minR, r-1);\r\n            walls = innerWalls(walls, !h, minC, maxC, r+1, maxR);\r\n        }\r\n        return walls;\r\n    } \r\n    if (h) {\r\n        walls = addHWall(walls, minC, maxC, r);\r\n\r\n        walls = innerWalls(walls, !h, minC, maxC, minR, r-1);\r\n        walls = innerWalls(walls, !h, minC, maxC, r+1, maxR);\r\n    } else {\r\n        walls = addVWall(walls, minR, maxR, c);\r\n\r\n        walls = innerWalls(walls, !h, minC, c-1, minR, maxR);\r\n        walls = innerWalls(walls, !h, c+1, maxC, minR, maxR);\r\n    }\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Builds a horizontal wall at a given row.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} minC lower column bound\r\n * @param {int} maxC upper column bound\r\n * @param {int} r row\r\n */\r\nfunction addHWall(walls, minC, maxC, r) {\r\n    const numHoles = random(1, (maxC - minC)/4);\r\n    const holes = [];\r\n    for (let i = 0; i < numHoles; i++) {\r\n        const hole = Math.floor(random(minC, maxC)/2)*2+1;\r\n        holes.push(hole);\r\n    }\r\n\r\n    for (var i = minC; i <= maxC; i++) if (!holes.includes(i)) walls.push([r, i]); \r\n    return walls;\r\n}\r\n\r\n/**\r\n * Builds a vertical wall at a given column.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} minR lower row bound\r\n * @param {int} maxR upper row bound\r\n * @param {int} c column \r\n */\r\nfunction addVWall(walls, minR, maxR, c) {\r\n    const numHoles = random(1, (maxR - minR)/4);\r\n    const holes = [];\r\n    for (let i = 0; i < numHoles; i++) {\r\n        const hole = Math.floor(random(minR, maxR)/2)*2+1;\r\n        holes.push(hole);\r\n    }\r\n\r\n    for (var i = minR; i <= maxR; i++) if (!holes.includes(i)) walls.push([i, c]); \r\n    return walls;\r\n}","import React from 'react';\r\n\r\nimport './Node.css';\r\n\r\n/**\r\n * Represents a grid node on the screen. Extra class names\r\n * can be applied to change the appearance of the node.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass Node extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the node.\r\n     * \r\n     * @returns a <div> element representing the node\r\n     */\r\n    render () {\r\n        const nodeType = this.props.type ? this.props.type :\r\n        this.props.isStart ? 'start' : \r\n        this.props.isTarget ? 'target' : \r\n        '';\r\n\r\n        return (\r\n            <div \r\n            id={`node-${this.props.row}-${this.props.col}`} \r\n            className={`node ${nodeType}`}\r\n            onMouseDown={() => this.props.mousePressed(this.props.row, this.props.col)}\r\n            onMouseEnter={() => this.props.mouseEntered(this.props.row, this.props.col)}\r\n            onMouseLeave={() => this.props.mouseLeft(this.props.row, this.props.col)}\r\n            onAnimationEnd={() => this.props.animationEnded(nodeType)}\r\n            /> \r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React from 'react';\r\nimport { Container, Row, Col, Button, ButtonDropdown, DropdownItem, DropdownToggle, DropdownMenu\r\n} from 'reactstrap';\r\n\r\nimport Node from './Node';\r\nimport { pathfindAlgorithms } from './PathfindAlgorithms';\r\n\r\n/**\r\n * Represents the top menu of the pathfinding visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindMenu extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Visualize button dropdown status\r\n            visualizeDropdownOpen: false,\r\n            // Edit button dropdown status\r\n            editDropdownOpen: false,\r\n            // Maze button dropdown status\r\n            mazeDropdownOpen: false,\r\n            // Clear button dropdown status\r\n            clearDropdownOpen: false,\r\n            // Display path instantly?\r\n            isInstant: false,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Toggles the visualize button dropdown.\r\n     */\r\n    toggleVisualize () { this.setState({visualizeDropdownOpen: !this.state.visualizeDropdownOpen}); }\r\n\r\n    /**\r\n     * Toggles the edit button dropdown.\r\n     */\r\n    toggleEdit () { this.setState({editDropdownOpen: !this.state.editDropdownOpen}); }\r\n\r\n    /**\r\n     * Toggles the maze button dropdown.\r\n     */\r\n    toggleMaze () { this.setState({mazeDropdownOpen: !this.state.mazeDropdownOpen}); }\r\n\r\n    /**\r\n     * Toggles the clear button dropdown.\r\n     */\r\n    toggleClear () { this.setState({clearDropdownOpen: !this.state.clearDropdownOpen}); }\r\n\r\n    /**\r\n     * Toggles if the path should be displayed instantly.\r\n     */\r\n    toggleInstant () { this.setState({isInstant: !this.state.isInstant}); }\r\n\r\n    /**\r\n     * Get the current text of the visualize button.\r\n     */\r\n    getIsInstantText () { return this.state.isInstant ? \"Instant\" : \"Visualize\"; }\r\n\r\n    /**\r\n     * Reverts the node state to the instant version.\r\n     * \r\n     * @param {string} type node key type\r\n     */\r\n    keyAnimationEnded (type) { document.getElementById(`node-${type}`).className = `node ${type}`; }\r\n\r\n    /**\r\n     * Animates the start node key and sets draw mode to start node.\r\n     * \r\n     * @param {int} row row value of key node\r\n     * @param {int} col column value of key node\r\n     */\r\n    startNodeKey (row, col) {\r\n        document.getElementById(`node-${row}-${col}`).className = `node ${row}`;\r\n        this.props.pathfinder.setDrawMode(3);\r\n    }\r\n\r\n    /**\r\n     * Animates the target node key and sets draw mode to target node.\r\n     * \r\n     * @param {int} row row value of key node\r\n     * @param {int} col column value of key node\r\n     */\r\n    targetNodeKey (row, col) {\r\n        document.getElementById(`node-${row}-${col}`).className = `node ${row}`;\r\n        this.props.pathfinder.setDrawMode(4);\r\n    }\r\n\r\n    /**\r\n     * Animates the weight node key and sets draw mode to weight nodes.\r\n     * \r\n     * @param {int} row row value of key node\r\n     * @param {int} col column value of key node\r\n     */\r\n    weightNodeKey (row, col) {\r\n        document.getElementById(`node-${row}-${col}`).className = `node ${row}`;\r\n        this.props.pathfinder.setDrawMode(2);\r\n    }\r\n\r\n    /**\r\n     * Animates the wall node key and sets draw mode to wall nodes.\r\n     * \r\n     * @param {int} row row value of key node\r\n     * @param {int} col column value of key node\r\n     */\r\n    wallNodeKey (row, col) {\r\n        document.getElementById(`node-${row}-${col}`).className = `node ${row}`;\r\n        this.props.pathfinder.setDrawMode(1);\r\n    }\r\n    \r\n    /**\r\n     * Renders the menu component.\r\n     * \r\n     * @returns a <div> element representing the menu\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"pathfind-menu\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col className=\"title\">\r\n                            Pathfinding Visualizer\r\n                        </Col>\r\n                        <Col>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.visualizeDropdownOpen} toggle={() => this.toggleVisualize()}>\r\n                                            <Button color=\"success\" onClick={() => this.toggleVisualize()}>{this.getIsInstantText()}</Button>\r\n                                            <DropdownToggle split color=\"success\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.toggleInstant()}>Pathfind Mode</DropdownItem>\r\n                                                <DropdownItem divider />\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(pathfindAlgorithms.DIJKSTRA, this.state.isInstant)}>Dijkstra</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(pathfindAlgorithms.ASTAR, this.state.isInstant)}>A* (A-Star)</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(pathfindAlgorithms.BFS, this.state.isInstant)}>Breadth First Search</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.visualizePathfind(pathfindAlgorithms.DFS, this.state.isInstant)}>Depth First Search</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.editDropdownOpen} toggle={() => this.toggleEdit()}>\r\n                                            <Button color=\"info\" onClick={() => this.toggleEdit()}>Edit</Button>\r\n                                            <DropdownToggle split color=\"info\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.resetStartTarget()}>Reset Start/Target Nodes</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.mazeDropdownOpen} toggle={() => this.toggleMaze()}>\r\n                                            <Button color=\"warning\" onClick={() => this.toggleMaze()}>Maze</Button>\r\n                                            <DropdownToggle split color=\"warning\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.animateMaze()}>Recursive Devision</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.clearDropdownOpen} toggle={() => this.toggleClear()}>\r\n                                            <Button color=\"danger\" onClick={() => this.toggleClear()}>Clear</Button>\r\n                                            <DropdownToggle split color=\"danger\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearGrid()}>Clear All</DropdownItem>\r\n                                                <DropdownItem divider />\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearWeights()}>Clear Weights</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearWalls()}>Clear Walls</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.pathfinder.clearPaths()}>Clear Path</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <div className=\"visualizer-key\">\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"start-instant\"}\r\n                            row={\"start\"}\r\n                            col={\"instant\"}\r\n                            mousePressed={(row, col) => this.startNodeKey(row, col)}\r\n                            animationEnded={(key) => this.keyAnimationEnded(key)}\r\n                            mouseEntered={() => null}\r\n                            mouseLeft={() => null}\r\n                            />\r\n                        </div>\r\n                        <div id='start-text' className=\"key-text\">Start Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"target-instant\"}\r\n                            row={\"target\"}\r\n                            col={\"instant\"}\r\n                            mousePressed={(row, col) => this.targetNodeKey(row, col)}\r\n                            animationEnded={(key) => this.keyAnimationEnded(key)}\r\n                            mouseEntered={() => null}\r\n                            mouseLeft={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Target Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"weight-instant\"}\r\n                            row={\"weight\"}\r\n                            col={\"instant\"}\r\n                            mousePressed={(row, col) => this.weightNodeKey(row, col)}\r\n                            animationEnded={(key) => this.keyAnimationEnded(key)}\r\n                            mouseEntered={() => null}\r\n                            mouseLeft={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Weighted Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"wall-instant\"}\r\n                            row={\"wall\"}\r\n                            col={\"instant\"}\r\n                            mousePressed={(row, col) => this.wallNodeKey(row, col)}\r\n                            animationEnded={(key) => this.keyAnimationEnded(key)}\r\n                            mouseEntered={() => null}\r\n                            mouseLeft={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Wall Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"\"}\r\n                            mousePressed={() => null}\r\n                            mouseEntered={() => null}\r\n                            mouseLeft={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Unvisited Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"visited-instant\"}\r\n                            mousePressed={() => null}\r\n                            mouseEntered={() => null}\r\n                            mouseLeft={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"visited-weight-instant\"}\r\n                            mousePressed={() => null}\r\n                            mouseEntered={() => null}\r\n                            mouseLeft={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Visited Nodes</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"path-instant\"}\r\n                            mousePressed={() => null}\r\n                            mouseEntered={() => null}\r\n                            mouseLeft={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"path-weight-instant\"}\r\n                            mousePressed={() => null}\r\n                            mouseEntered={() => null}\r\n                            mouseLeft={() => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"key-text\">Path Nodes</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindMenu;","import React from 'react';\r\n\r\n/**\r\n * Represents the algorithm info bar in the pathfinding visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindInfo extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the info bar.\r\n     * \r\n     * @returns a <div> element representing the info bar\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"pathfind-info\">\r\n                <div className=\"info-item\">\r\n                    <div>Algorithm:</div>\r\n                    <div id=\"algorithm-info-text\" className=\"info-text\">None</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div>Visited Nodes:</div>\r\n                    <div id=\"visited-info-text\" className=\"info-text\">0</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div>Path Nodes:</div>\r\n                    <div id=\"path-info-text\" className=\"info-text\">0</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div>Path Cost:</div>\r\n                    <div id=\"weighted-info-text\" className=\"info-text\">0</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindInfo;","import React from 'react';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nimport { getShortestPathNodes, dijkstra, aStar, breadthFirstSearch, depthFirstSearch, pathfindAlgorithms, getShortestPathCost\r\n} from './PathfindAlgorithms';\r\nimport { recursiveDevision\r\n} from './MazeAlgorithms';\r\nimport PathfindMenu from './PathfindMenu';\r\nimport PathfindInfo from './PathfindInfo';\r\nimport Node from './Node';\r\n\r\n// Number of rows in the grid\r\nconst ROW_COUNT = 27;\r\n// Number of columns in the grid\r\nconst COL_COUNT = 71;\r\n// Initial cost of weighted nodes\r\nconst INIT_COST = 15;\r\n// Initial coordinates of the start node [row, col]\r\nconst INIT_START = [13, 10];\r\n// Initial coordinates of the target noe [row, col]\r\nconst INIT_TARGET = [13, 60];\r\n// Speed between visited node animations in miliseconds\r\nconst VISITED_SPEED = 5;\r\n// Speed between shortest path node animations in miliseconds\r\nconst PATH_SPEED = 25;\r\n// Speed between maze wall node animations in miliseconds\r\nconst MAZE_SPEED = 10;\r\n\r\n// Node class types\r\nconst nodeTypes = {\r\n    NODE: 'node',\r\n    NODE_ANIMATED: 'node node-animated',\r\n    WALL: 'node wall',\r\n    WALL_INSTANT: 'node wall-instant',\r\n    WALL_PREVIEW: 'node wall-preview',\r\n    WEIGHT: 'node weight',\r\n    WEIGHT_INSTANT: 'node weight-instant',\r\n    WEIGHT_PREVIEW: 'node weight-preview',\r\n    START: 'node start',\r\n    START_INSTANT: 'node start-instant',\r\n    START_PREVIEW: 'node start-preview',\r\n    TARGET: 'node target',\r\n    TARGET_INSTANT: 'node target-instant',\r\n    TARGET_PREVIEW: 'node target-preview',\r\n    VISITED: 'node visited',\r\n    VISITED_INSTANT: 'node visited-instant',\r\n    VISITED_WEIGHT: 'node visited-weight',\r\n    VISITED_WEIGHT_INSTANT: 'node visited-weight-instant',\r\n    PATH: 'node path',\r\n    PATH_INSTANT: 'node path-instant',\r\n    PATH_WEIGHT: 'node path-weight',\r\n    PATH_WEIGHT_INSTANT: 'node path-weight-instant',\r\n}\r\n\r\n/**\r\n * Represents the pathfinding visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindingVisualizer extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Current state of grid nodes\r\n            grid: [],\r\n            // Current cost of weighted nodes\r\n            weightCost: INIT_COST,\r\n            // Is the mouse down?\r\n            mouseIsDown: false,\r\n            // Are we allowed to draw currently?\r\n            canDraw: true,\r\n            // Current draw mode (0: none, 1: walls, 2: weights)\r\n            drawMode: 0,\r\n            // Are we erasing or drawing walls (null if neither)?\r\n            drawWall: null,\r\n            // Are we erasing or drawing weights (null if neither)?\r\n            drawWeight: null,\r\n            // Current start node position\r\n            startNode: INIT_START,\r\n            // Current target node position\r\n            targetNode: INIT_TARGET,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the grid with new nodes. Start and target\r\n     * node positions are preserved.\r\n     */\r\n    rebuildGrid () {\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.createNode(r, c, 1, false);\r\n                curRow.push(node);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the grid with new nodes. Main node types are\r\n     * preserved (start, target, wall, weight).\r\n     */\r\n    softRebuildGrid () {\r\n        const oldGrid = this.state.grid;\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.createNode(r, c, oldGrid[r][c].cost, oldGrid[r][c].isWall)\r\n                curRow.push(node);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Creates a new node with stored properties.\r\n     * \r\n     * @param {int} row row on grid\r\n     * @param {int} col column on grid\r\n     * @param {int} cost weight cost of node\r\n     * @param {boolean} isWall is node a wall\r\n     * \r\n     * @returns the new node object\r\n     */\r\n    createNode (row, col, cost, isWall) {\r\n        let curVisual = nodeTypes.NODE;\r\n        if (cost !== 1) curVisual = nodeTypes.WEIGHT;\r\n        if (isWall) curVisual = nodeTypes.WALL;\r\n\r\n        return {\r\n            curVisual: curVisual,\r\n            row: row,\r\n            col: col,\r\n            cost: cost,\r\n            distance: Infinity,\r\n            rootDistance: Infinity,\r\n            isStart: row === this.state.startNode[0] && col === this.state.startNode[1],\r\n            isTarget: row === this.state.targetNode[0] && col === this.state.targetNode[1],\r\n            isWall: isWall,\r\n            previousNode: null,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the grid of nodes. Changes the properties of\r\n     * newly drawn node types according to their current visual state.\r\n     */\r\n    updateGridState () {\r\n        const grid = this.state.grid;\r\n\r\n        for (let r = 0; r < grid.length; r++) {\r\n            for (let c = 0; c < grid[0].length; c++) {\r\n                const node = grid[r][c];\r\n                const type = this.getNodeVisual(node);\r\n\r\n                node.curVisual = nodeTypes.NODE;\r\n                node.isStart = false;\r\n                node.isTarget = false;\r\n                node.isWall = false;\r\n                node.cost = 1;\r\n                \r\n                switch (type) {\r\n                    case nodeTypes.START: \r\n                    case nodeTypes.START_INSTANT:\r\n                        node.curVisual = nodeTypes.START_INSTANT;\r\n                        node.isStart = true;\r\n                        this.setState({startNode: [node.row, node.col]});\r\n                        break;\r\n                    case nodeTypes.TARGET: \r\n                    case nodeTypes.TARGET_INSTANT:\r\n                        node.curVisual = nodeTypes.TARGET_INSTANT;\r\n                        node.isTarget = true;\r\n                        this.setState({targetNode: [node.row, node.col]});\r\n                        break;\r\n                    case nodeTypes.WALL: \r\n                    case nodeTypes.WALL_INSTANT:\r\n                        node.curVisual = nodeTypes.WALL_INSTANT;\r\n                        node.isWall = true;\r\n                        break;\r\n                    case nodeTypes.WEIGHT:\r\n                    case nodeTypes.WEIGHT_INSTANT:\r\n                    case nodeTypes.VISITED_WEIGHT:\r\n                    case nodeTypes.VISITED_WEIGHT_INSTANT:\r\n                    case nodeTypes.PATH_WEIGHT:\r\n                    case nodeTypes.PATH_WEIGHT_INSTANT:\r\n                        node.curVisual = nodeTypes.WEIGHT_INSTANT;\r\n                        node.cost = this.state.weightCost;\r\n                        break;\r\n                    case nodeTypes.VISITED:\r\n                    case nodeTypes.VISITED_INSTANT:\r\n                        node.curVisual = nodeTypes.VISITED_INSTANT;\r\n                        break;\r\n                    case nodeTypes.PATH:\r\n                    case nodeTypes.PATH_INSTANT:\r\n                        node.curVisual = nodeTypes.PATH_INSTANT;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Updates the visual state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {nodeTypes} type new node type\r\n     */\r\n    updateNodeVisual (node, type) { document.getElementById(`node-${node.row}-${node.col}`).className = type; }\r\n\r\n    /**\r\n     * Gets the current node type.\r\n     * \r\n     * @param {Object} node \r\n     * \r\n     * @returns current node element class name\r\n     */\r\n    getNodeVisual (node) { return document.getElementById(`node-${node.row}-${node.col}`).className; }\r\n\r\n    /**\r\n     * Sets new start node position. Updates state, we are no\r\n     * longer placing the start node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    drawStartNode (node) { \r\n        const curStart = this.state.grid[this.state.startNode[0]][this.state.startNode[1]];\r\n\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(curStart, nodeTypes.NODE_ANIMATED);\r\n        this.updateNodeVisual(node, nodeTypes.START);\r\n    }\r\n\r\n    /**\r\n     * Sets new target node position. Updates state, we are no\r\n     * longer placing the target node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    drawTargetNode (node) { \r\n        const curTarget = this.state.grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(curTarget, nodeTypes.NODE_ANIMATED);\r\n        this.updateNodeVisual(node, nodeTypes.TARGET);\r\n    }\r\n\r\n    /**\r\n     * Updates the visual wall state of a given node. \r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isWall are we drawing (true) or erasing (false)\r\n     */\r\n    drawWallNode (node, isWall) {\r\n        if (node.cost !== 1 || node.isStart || node.isTarget) return;\r\n\r\n        if (!isWall) {\r\n            if (this.getNodeVisual(node) === nodeTypes.NODE) return; \r\n            this.updateNodeVisual(node, nodeTypes.NODE_ANIMATED)\r\n        } else if (this.getNodeVisual(node) !== nodeTypes.WALL_INSTANT) {\r\n            this.updateNodeVisual(node, nodeTypes.WALL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual weight state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isWeight are we drawing (true) or erasing (false)\r\n     */\r\n    drawWeightNode (node, isWeight) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        if (!isWeight) {\r\n            if (this.getNodeVisual(node) === nodeTypes.NODE) return; \r\n            this.updateNodeVisual(node, nodeTypes.NODE_ANIMATED);\r\n        } else if (this.getNodeVisual(node) !== nodeTypes.WEIGHT_INSTANT) {\r\n            this.updateNodeVisual(node, nodeTypes.WEIGHT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual visited state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    drawVisitedNode (node, isInstant) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        const isWeight = node.cost !== 1;\r\n\r\n        if (isInstant) {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT_INSTANT);\r\n            else this.updateNodeVisual(node, nodeTypes.VISITED_INSTANT);\r\n        } else {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT);\r\n            else this.updateNodeVisual(node, nodeTypes.VISITED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual path state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    drawPathNode (node, isInstant) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        const isWeight = node.cost !== 1;\r\n\r\n        if (isInstant) {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT_INSTANT);\r\n            else this.updateNodeVisual(node, nodeTypes.PATH_INSTANT);\r\n        } else {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT);\r\n            else this.updateNodeVisual(node, nodeTypes.PATH);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the entire grid.\r\n     */\r\n    clearGrid () {\r\n        this.clearWeights();\r\n        this.clearWalls();\r\n        this.clearPaths();\r\n    }\r\n\r\n    /**\r\n     * Clears the grid of all wall nodes.\r\n     */\r\n    clearWalls () { \r\n        const grid = this.state.grid;\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.isWall) {\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                    node.isWall = false;\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: grid});\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Clears the grid of all weighted nodes and resets their\r\n     * costs to 1.\r\n     */\r\n    clearWeights () {\r\n        const grid = this.state.grid;\r\n\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.cost !== 1) {\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                    node.cost = 1;\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: grid});\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Clears the visual grid of all path and visited type nodes.\r\n     * Updates the class name of each appropriate node object.\r\n     */\r\n    clearPaths () {\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.state.grid[r][c];\r\n                const type = this.getNodeVisual(node);\r\n\r\n                if (type === nodeTypes.VISITED || \r\n                    type === nodeTypes.VISITED_INSTANT ||\r\n                    type === nodeTypes.PATH || \r\n                    type === nodeTypes.PATH_INSTANT) {\r\n\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                }\r\n                else if (type === nodeTypes.VISITED_WEIGHT || \r\n                    type === nodeTypes.VISITED_WEIGHT_INSTANT || \r\n                    type === nodeTypes.PATH_WEIGHT ||\r\n                    type === nodeTypes.PATH_WEIGHT_INSTANT) {\r\n                \r\n                    this.updateNodeVisual(node, nodeTypes.WEIGHT_INSTANT);\r\n                }\r\n            }\r\n        }\r\n        this.updateAlgorithmInfo(\"None\", 0, 0, 0);\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Resets the start and target nodes to their initial locations.\r\n     */\r\n    resetStartTarget () {\r\n        const initStart = this.state.grid[INIT_START[0]][INIT_START[1]];\r\n        const initTarget = this.state.grid[INIT_TARGET[0]][INIT_TARGET[1]];\r\n\r\n        this.drawStartNode(initStart);\r\n        this.drawTargetNode(initTarget);\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Sets new cost of weighted nodes.\r\n     * \r\n     * @param {int} weight new cost\r\n     */\r\n    setNewWeight (weight) { this.setState({weightCost: weight}); }\r\n\r\n    /**\r\n     * Sets the current draw mode.\r\n     * \r\n     * 0: none\r\n     * 1: walls\r\n     * 2: weights\r\n     * 3: start\r\n     * 4: target\r\n     * \r\n     * @param {int} mode new draw mode\r\n     */\r\n    setDrawMode (mode) { \r\n        if (this.state.drawMode === mode) mode = 0;\r\n        this.setState({drawMode: mode}); \r\n    }\r\n\r\n    /**\r\n     * Visualizes a given pathfinding algorithm. Uses the current state of\r\n     * the grid of nodes.\r\n     * \r\n     * @param {pathfindAlgorithms} algorithm pathfinding algorithm\r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    visualizePathfind (algorithm, isInstant) {\r\n        this.clearPaths();\r\n        this.softRebuildGrid();\r\n\r\n        const grid = this.state.grid;\r\n        const start = grid[this.state.startNode[0]][this.state.startNode[1]];\r\n        const target = grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n\r\n        var visitedNodes = [];\r\n        switch (algorithm) {\r\n            case pathfindAlgorithms.DIJKSTRA:\r\n                visitedNodes = dijkstra(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.ASTAR:\r\n                visitedNodes = aStar(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.BFS:\r\n                visitedNodes = breadthFirstSearch(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.DFS:\r\n                visitedNodes = depthFirstSearch(grid, start, target);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const shortestPath = getShortestPathNodes(target);\r\n        const totalCost = getShortestPathCost(target);\r\n\r\n        this.updateAlgorithmInfo(algorithm, visitedNodes.length, shortestPath.length, totalCost);\r\n\r\n        this.animateSearch(visitedNodes, shortestPath, isInstant);\r\n    }\r\n\r\n    /**\r\n     * Animates the process of the pathfinding algorithm. Updates the class\r\n     * names of the nodes to change their appearance.\r\n     * \r\n     * @param {Array} visitedNodes array of visited nodes in order\r\n     * @param {Array} shortestPath array of shortest path nodes in order\r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    animateSearch (visitedNodes, shortestPath, isInstant) {\r\n        if (isInstant) {\r\n            for (let i = 0; i < visitedNodes.length; i++) {\r\n                const node = visitedNodes[i];\r\n                this.drawVisitedNode(node, isInstant);\r\n            }\r\n            this.animatePath(shortestPath, isInstant);\r\n        } else {\r\n            this.setState({canDraw: false});\r\n\r\n            for (let i = 0; i < visitedNodes.length; i++) {\r\n                setTimeout(() => {\r\n                    const node = visitedNodes[i];\r\n                    this.drawVisitedNode(node, isInstant);\r\n                }, VISITED_SPEED * i);\r\n            }\r\n            setTimeout(() => { this.animatePath(shortestPath, isInstant); }, VISITED_SPEED * visitedNodes.length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animates the shortest path from the start node to the target node.\r\n     * Updates the class names of the nodes to change their appearance.\r\n     * \r\n     * @param {Array} shortestPath array of shortest path nodes in order \r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    animatePath (shortestPath, isInstant) {\r\n        if (isInstant) {\r\n            for (let i = 1; i < shortestPath.length; i++) {\r\n                const node = shortestPath[i];\r\n                this.drawPathNode(node, isInstant);\r\n            }\r\n            setTimeout(() => { this.updateGridState() }, 0);\r\n        } else {\r\n            for (let i = 0; i < shortestPath.length; i++) {\r\n                setTimeout(() => {\r\n                    const node = shortestPath[i];\r\n                    this.drawPathNode(node, isInstant)\r\n                }, PATH_SPEED * i);\r\n            }\r\n            setTimeout(() => { \r\n                this.updateGridState();\r\n                this.setState({canDraw: true});\r\n            }, PATH_SPEED * shortestPath.length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual algorithm information.\r\n     * \r\n     * @param {string} algorithm current algorithm\r\n     * @param {int} visitedNodes amount of nodes visited\r\n     * @param {int} pathNodes amount of nodes in path\r\n     * @param {int} totalCost total cost of shortest path\r\n     */\r\n    updateAlgorithmInfo (algorithm, visitedNodes, pathNodes, totalCost) {\r\n        document.getElementById(\"algorithm-info-text\").innerHTML = `${algorithm}`;\r\n        document.getElementById(\"visited-info-text\").innerHTML = `${visitedNodes}`;\r\n        document.getElementById(\"path-info-text\").innerHTML = `${pathNodes}`;\r\n        document.getElementById(\"weighted-info-text\").innerHTML = `${totalCost}`;\r\n    }\r\n\r\n    /**\r\n     * Animates a generated maze.\r\n     */\r\n    animateMaze () {\r\n        this.setState({canDraw: false});\r\n        this.clearGrid();\r\n        const maze = recursiveDevision(ROW_COUNT, COL_COUNT);\r\n\r\n        for (let i = 0; i < maze.length; i++) {\r\n            setTimeout(() => {\r\n                const node = this.state.grid[maze[i][0]][maze[i][1]];\r\n                this.drawWallNode(node, true);\r\n            }, MAZE_SPEED * i);\r\n        }\r\n        setTimeout(() => {\r\n            this.updateGridState();\r\n            this.setState({canDraw: true});\r\n        }, MAZE_SPEED * maze.length);\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Rebuilds the grid.\r\n     */\r\n    componentDidMount () { this.rebuildGrid(); }\r\n\r\n    /**\r\n     * Handles a mouse down event on a node. If we are placing the start or\r\n     * target node, update the node location and return. Otherwise, updates\r\n     * the node based on the current draw mode.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseDown (row, col) {\r\n        if (!this.state.canDraw) return;\r\n        this.setState({mouseIsDown: true});\r\n\r\n        const grid = this.state.grid;\r\n        const node = grid[row][col];\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        switch (this.state.drawMode) {\r\n            case 1: // Wall\r\n                const isWall = node.isWall;\r\n                this.drawWallNode(node, !isWall);\r\n                this.setState({drawWall: !isWall});\r\n                break;\r\n            case 2: // Weight\r\n                const isWeight = node.cost !== 1;\r\n                this.drawWeightNode(node, !isWeight);\r\n                this.setState({drawWeight: !isWeight});\r\n                break;\r\n            case 3: // Start\r\n                this.clearPaths();\r\n                this.drawStartNode(node);\r\n                this.setState({drawMode: 0});\r\n                break;\r\n            case 4: // Target\r\n                this.clearPaths();\r\n                this.drawTargetNode(node);\r\n                this.setState({drawMode: 0});\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse up event. Sets the state so that nothing\r\n     * can be drawn.\r\n     */\r\n    handleMouseUp () {\r\n        if (!this.state.mouseIsDown) return;\r\n\r\n        this.updateGridState();\r\n\r\n        this.setState({\r\n            mouseIsDown: false,\r\n            drawWall: null,\r\n            drawWeight: null,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse enter event into a node. If the mouse is not down,\r\n     * return. Otherwise, updates the node based on the current draw mode.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseEnter (row, col) {\r\n        if (!this.state.canDraw) return;\r\n\r\n        const grid = this.state.grid;\r\n        const node = grid[row][col];\r\n\r\n        const isWall = node.isWall;\r\n        const isWeight = node.cost !== 1;\r\n\r\n        const isPreview = !isWall && !isWeight && !node.isStart && !node.isTarget;\r\n\r\n        switch (this.state.drawMode) {\r\n            case 1:\r\n                if (this.state.mouseIsDown && isWall !== this.state.drawWall) {\r\n                    this.drawWallNode(node, !isWall);\r\n                } else if (!this.state.mouseIsDown && isPreview) this.updateNodeVisual(node, nodeTypes.WALL_PREVIEW);\r\n                break;\r\n            case 2:\r\n                if (this.state.mouseIsDown && isWeight !== this.state.drawWeight) {\r\n                    this.drawWeightNode(node, !isWeight);\r\n                } else if (!this.state.mouseIsDown && isPreview) this.updateNodeVisual(node, nodeTypes.WEIGHT_PREVIEW);\r\n                break; \r\n            case 3:\r\n                if (isPreview) this.updateNodeVisual(node, nodeTypes.START_PREVIEW);\r\n                break;\r\n            case 4:\r\n                if (isPreview) this.updateNodeVisual(node, nodeTypes.TARGET_PREVIEW);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse leave event from a node.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseLeft (row, col) {\r\n        if (this.state.mouseIsDown || this.state.drawMode === 0 || !this.state.canDraw) return;\r\n        \r\n        const node = this.state.grid[row][col];\r\n\r\n        if (node.isWall || node.cost !== 1 || node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(node, node.curVisual);\r\n    }\r\n\r\n    /**\r\n     * Handles an animation end event of a node. Updates the class name of the\r\n     * node to the instant class version.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    handleAnimationEnd (node) {\r\n        const type = this.getNodeVisual(node);\r\n        switch (type) {\r\n            case nodeTypes.START:\r\n                this.updateNodeVisual(node, nodeTypes.START_INSTANT);\r\n                break;\r\n            case nodeTypes.TARGET:\r\n                this.updateNodeVisual(node, nodeTypes.TARGET_INSTANT);\r\n                break;\r\n            case nodeTypes.WALL:\r\n                this.updateNodeVisual(node, nodeTypes.WALL_INSTANT);\r\n                break;\r\n            case nodeTypes.WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.WEIGHT_INSTANT);\r\n                break;\r\n            case nodeTypes.VISITED:\r\n                this.updateNodeVisual(node, nodeTypes.VISITED_INSTANT);\r\n                break;\r\n            case nodeTypes.VISITED_WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT_INSTANT);\r\n                break;\r\n            case nodeTypes.PATH:\r\n                this.updateNodeVisual(node, nodeTypes.PATH_INSTANT);\r\n                break;\r\n            case nodeTypes.PATH_WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT_INSTANT);\r\n                break;\r\n            default:\r\n                this.updateNodeVisual(node, nodeTypes.NODE);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the pathfinding visualizer component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        //console.log(this.state.grid);\r\n\r\n        return (\r\n            <div className=\"pathfind-vis\">\r\n                <div className=\"pathfind-menu\">\r\n                    <PathfindMenu pathfinder={this} />\r\n                </div>\r\n                <div>\r\n                    <PathfindInfo></PathfindInfo>\r\n                </div>\r\n                <div \r\n                className=\"grid\" \r\n                onMouseUp={() => this.handleMouseUp()}\r\n                onMouseLeave={() => this.handleMouseUp()}\r\n                onContextMenu={(e) => e.preventDefault()}\r\n                onDragStart={(e) => e.preventDefault()}\r\n                >\r\n                    {Array.from(this.state.grid).map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx} className=\"grid-row\">\r\n                                {Array.from(row).map((node, nodeIdx) => {\r\n                                    const {row, col, isStart, isTarget} = node;\r\n                                    return (\r\n                                        <Node key={nodeIdx}\r\n                                        row={row}\r\n                                        col={col}\r\n                                        isStart={isStart}\r\n                                        isTarget={isTarget}\r\n                                        mousePressed={(row, col) => this.handleMouseDown(row, col)}\r\n                                        mouseEntered={(row, col) => this.handleMouseEnter(row, col)}\r\n                                        mouseLeft={(row, col) => this.handleMouseLeft(row, col)}\r\n                                        animationEnded={() => this.handleAnimationEnd(node)}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindingVisualizer;","// Unsorted bar color\r\nconst UNSORTED = \"pink\";\r\n// Comparing bar color\r\nconst COMPARE = \"red\";\r\n// Sorted bar color\r\nconst SORTED = \"green\";\r\n// Swapping bar color\r\nconst SWAP = \"orange\";\r\n// Minimum bar color\r\nconst MIN = \"purple\";\r\n\r\n// Sorting algorithms\r\nexport const sortAlgorithms = {\r\n    SELECTION: \"selection\",\r\n    INSERTION: \"insertion\",\r\n    MERGE: \"merge\",\r\n}\r\n\r\n/**\r\n * Executes a Selection Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function selectionSort(array) {\r\n    const animations = [];\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n        var min = i;\r\n        animations.push([[MIN, min]]);\r\n        var newMin = true;\r\n        for (let k = i + 1; k < array.length; k++) {\r\n            if (newMin) {\r\n                animations.push([[COMPARE, k]]);\r\n                newMin = false;\r\n            } else animations.push([[UNSORTED, k-1], [COMPARE, k]]);\r\n            \r\n            if (array[min] > array[k]) {\r\n                animations.push([[UNSORTED, min], [MIN, k]]);\r\n                min = k;\r\n                newMin = true;\r\n            }\r\n        }\r\n        if (min !== i) {\r\n            animations.push([[UNSORTED, array.length-1], [SWAP, min, i], [null, min, array[i]], [null, i, array[min]]]);\r\n            animations.push([[UNSORTED, min], [SORTED, i]]);\r\n            var temp = array[i];\r\n            array[i] = array[min];\r\n            array[min] = temp;\r\n        } else animations.push([[UNSORTED, array.length-1], [SORTED, i]]);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Executes a Insertion Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function insertionSort(array) {\r\n    const animations = [];\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n        var cur = array[i];\r\n        var j = i - 1;\r\n        \r\n        animations.push([[COMPARE, j, i]]);\r\n        while (j >= 0) {\r\n            if (j + 2 >= array.length) animations.push([[COMPARE, j, j + 1]]);\r\n            else animations.push([[UNSORTED, j + 2], [COMPARE, j, j + 1]]);\r\n            if (array[j] <= cur) {\r\n                animations.push([[UNSORTED, j, j + 1]]);\r\n                break;\r\n            }\r\n            animations.push([[SWAP, j, j + 1], [null, j + 1, array[j]], [null, j, cur]]);\r\n            array[j + 1] = array[j];\r\n            j--;\r\n        }\r\n        if (j + 2 >= array.length) animations.push([[UNSORTED, j + 1]]);\r\n        else animations.push([[UNSORTED, j + 1, j + 2]]);\r\n        animations.push([[null, j + 1, cur]]);\r\n        array[j+1] = cur;\r\n    }\r\n    for (let i = array.length - 1; i >= 0; i--) animations.push([[SORTED, i]]);\r\n\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Executes a Merge Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function mergeSort(array) {\r\n    const animations = [];\r\n    array = doMergeSort(animations, array);\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Actual recursive Merge Sort function.\r\n * \r\n * @param {Array} animations array of animations\r\n * @param {Array} array array of values \r\n * \r\n * @returns sorted array\r\n */\r\nfunction doMergeSort(animations, array) {\r\n    const middle = array.length / 2;\r\n    if (array.length < 2) return array;\r\n    const left = array.splice(0, middle);\r\n    return merge(animations, doMergeSort(animations, left), doMergeSort(animations, array));\r\n}\r\n\r\n/**\r\n * Merge Sort helper function.\r\n * \r\n * @param {Array} animations array of animations\r\n * @param {Array} left left array\r\n * @param {Array} right right array\r\n * \r\n * @returns merged array\r\n */\r\nfunction merge (animations, left, right) {\r\n    var array = [];\r\n\r\n    while (left.length && right.length) {\r\n        if (left[0] < right[0]) array.push(left.shift());\r\n        else array.push(right.shift());\r\n    }\r\n    return [...array, ...left, ...right];\r\n}","import React from 'react';\r\nimport { Container, Row, Col, Button, ButtonDropdown, DropdownItem, DropdownToggle, DropdownMenu\r\n} from 'reactstrap';\r\n\r\nimport { sortAlgorithms } from './SortAlgorithms';\r\n\r\n/**\r\n * Represents the top menu of the sorting visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SortMenu extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        // Visualize button dropdown status\r\n        this.state = { visualizeDropdownOpen: false };\r\n    }\r\n\r\n    /**\r\n     * Toggles the visualize button dropdown.\r\n     */\r\n    toggleVisualize () { this.setState({visualizeDropdownOpen: !this.state.visualizeDropdownOpen}); }\r\n \r\n    /**\r\n     * Renders the menu component.\r\n     * \r\n     * @returns a <div> element representing the menu\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"sort-menu\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col className=\"title\">\r\n                            Sorting Visualizer\r\n                        </Col>\r\n                        <Col>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.visualizeDropdownOpen} toggle={() => this.toggleVisualize()}>\r\n                                            <Button color=\"success\" onClick={() => this.toggleVisualize()}>Visualize</Button>\r\n                                            <DropdownToggle split color=\"success\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.sorter.visualizeSort(sortAlgorithms.SELECTION)}>Selection Sort</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.sorter.visualizeSort(sortAlgorithms.INSERTION)}>Insertion Sort</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.sorter.visualizeSort(sortAlgorithms.MERGE)}>Merge Sort</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Button color=\"warning\" onClick={() => this.props.sorter.reGenerateArray()}>Randomize</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortMenu;","import React from 'react';\r\n\r\nimport './SortingVisualizer.css';\r\n\r\nimport { random } from '../Utils';\r\nimport SortMenu from './SortMenu';\r\nimport { selectionSort, insertionSort, mergeSort, sortAlgorithms } from './SortAlgorithms';\r\n\r\n// Size of array\r\nconst ARRAY_SIZE = 100;\r\n// Minimum value in array\r\nconst MIN_VALUE = 5;\r\n// Maximum value in array\r\nconst MAX_VALUE = 500;\r\n// Speed between animations in miliseconds\r\nconst SPEED = 10;\r\n\r\n// Unsorted bar color\r\nconst UNSORTED = \"pink\";\r\n\r\n/**\r\n * Represents the sorting visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SortingVisualizer extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        // Array of bar values\r\n        this.state = { array: [] };\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the array with new random values.\r\n     * \r\n     * @param {int} size size of array\r\n     * @param {int} min minimum value\r\n     * @param {int} max maximum value\r\n     */\r\n    rebuildArray (size, min, max) {\r\n        const array = [];\r\n        for (let i = 0; i < size; i++) { array.push(this.createBar(min, max)); }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Creates a new bar with a random value.\r\n     * \r\n     * @param {int} min lower bound of value\r\n     * @param {int} max upper bound of value\r\n     * \r\n     * @returns the created bar\r\n     */\r\n    createBar (min, max) { return random(min, max); }\r\n\r\n    /**\r\n     * Rebuilds the array and regenerates the visual array bars.\r\n     */\r\n    reGenerateArray () { \r\n        var array = this.state.array;\r\n        array = this.rebuildArray(ARRAY_SIZE, MIN_VALUE, MAX_VALUE);\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        for (let i = 0; i < array.length; i++) { bars[i].style.backgroundColor = UNSORTED; }\r\n        this.setState({array: array}); \r\n    }\r\n\r\n    /**\r\n     * Visualizes a given sorting algorithm.\r\n     * \r\n     * @param {sortAlgorithms} algorithm sorting algorithm\r\n     */\r\n    visualizeSort (algorithm) {\r\n        const array = this.state.array;\r\n        var animations = [];\r\n\r\n        switch (algorithm) {\r\n            case sortAlgorithms.SELECTION:\r\n                animations = selectionSort(array);\r\n                break;\r\n            case sortAlgorithms.INSERTION:\r\n                animations = insertionSort(array);\r\n                break;\r\n            case sortAlgorithms.MERGE:\r\n                animations = mergeSort(array);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.animateSort(animations);\r\n    }\r\n\r\n    /**\r\n     * Animates the process of the sorting algorithm. Iterates through an\r\n     * array of animation steps generated by the algorithm.\r\n     * \r\n     * @param {Array} animations \r\n     */\r\n    animateSort (animations) {\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        var i = 0\r\n        for (const step of animations) {\r\n            setTimeout(() => {\r\n                for (const action of step) { \r\n                    if (action[0] === null) {\r\n                        bars[action[1]].style.height = `${action[2]}px`;\r\n                    } else {\r\n                        for (let k = 1; k < action.length; k++) {\r\n                            bars[action[k]].style.backgroundColor = action[0]; \r\n                        }\r\n                    }\r\n                }\r\n            }, SPEED * i++);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Rebuilds the array.\r\n     */\r\n    componentDidMount () {\r\n        const array = this.rebuildArray(ARRAY_SIZE, MIN_VALUE, MAX_VALUE);\r\n        this.setState({array: array});\r\n    }\r\n\r\n    /**\r\n     * Renders the sorting visualizer component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        //console.log(this.state.array);\r\n\r\n        return (\r\n            <div className=\"sort-vis\">\r\n                <div className=\"sort-menu\">\r\n                    <SortMenu sorter={this}/>\r\n                </div>\r\n                <div className=\"array\">\r\n                    {Array.from(this.state.array).map((bar, barIdx) => {\r\n                        return (\r\n                            <div className=\"bar\"\r\n                            key={barIdx}\r\n                            style={{\r\n                                backgroundColor: UNSORTED,\r\n                                height: `${bar}px`,\r\n                            }}/>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\r\nimport { Card, CardHeader, CardBody, NavItem, NavLink, Nav, TabContent, TabPane\r\n} from 'reactstrap'\r\nimport classnames from 'classnames';\r\n\r\nimport Home from './Home';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\n\r\n// Default tab to display on page load\r\nconst DEFAULT_TAB = \"home\";\r\n\r\n/**\r\n * Represents the navigation bar at the top of the page. Each tab\r\n * contains one component of the project.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass NavBar extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        // Current active tab\r\n        this.state = { activeTab: DEFAULT_TAB };\r\n    }\r\n\r\n    /**\r\n     * Renders the navigation bar.\r\n     * \r\n     * @returns a <div> element representing the navigation bar\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"nav-bar\">\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink className={classnames({active: this.state.activeTab === \"home\"})}\r\n                                onClick={() => this.setState({activeTab: \"home\"})}\r\n                                >Home\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className={classnames({active: this.state.activeTab === \"pathfind\"})}\r\n                                onClick={() => this.setState({activeTab: \"pathfind\"})}\r\n                                >Pathfinding Visualizer\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className={classnames({active: this.state.activeTab === \"sort\"})}\r\n                                onClick={() => this.setState({activeTab: \"sort\"})}\r\n                                >Sorting Visualizer\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <TabContent activeTab={this.state.activeTab}>\r\n                            <TabPane tabId=\"home\">\r\n                                <Home />\r\n                            </TabPane>\r\n                            <TabPane tabId=\"pathfind\">\r\n                                <PathfindingVisualizer />\r\n                            </TabPane>\r\n                            <TabPane tabId=\"sort\">\r\n                                <SortingVisualizer />\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import './App.css';\r\nimport NavBar from './NavBar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar></NavBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}