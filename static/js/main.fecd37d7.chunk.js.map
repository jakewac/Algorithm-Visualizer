{"version":3,"sources":["Home/Home.js","PathfindingVisualizer/Algorithms/PathfindAlgorithms.js","PathfindingVisualizer/Algorithms/MazeAlgorithms.js","PathfindingVisualizer/Menu/PathfindStats.js","PathfindingVisualizer/Grid/Node.js","PathfindingVisualizer/Menu/NodeKey.js","PathfindingVisualizer/Menu/PVisualizerSettings.js","PathfindingVisualizer/Menu/PathfindMenu.js","PathfindingVisualizer/PathfindingVisualizer.js","SortingVisualizer/Algorithms/SortAlgorithms.js","SortingVisualizer/Menu/SVisualizerSettings.js","SortingVisualizer/Menu/SortMenu.js","SortingVisualizer/SortingVisualizer.js","NavBar/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","state","Card","CardHeader","href","CardBody","CardFooter","className","onClick","changeTab","React","Component","pathfindAlgorithms","heuristic","cur","start","target","diagonalNeighbors","dMultiplier","document","getElementById","value","diagCost","Math","sqrt","rowDistance","abs","row","colDistance","col","startRowDistance","startColDistance","cross","manhattanD","diagonalD","min","getAllNodes","grid","nodes","node","push","getUnvisitedNeighbors","diagonals","neighbors","isDiagonal","length","filter","neighbor","isVisited","mazeAlgorithms","recursiveDevision","rows","cols","walls","r","c","innerWalls","random","buildWalls","h","minC","maxC","minR","maxR","rGap","cGap","floor","addVWall","addHWall","numHoles","holes","i","hole","includes","max","PathfindStats","id","Node","nodeType","this","type","isStart","isTarget","onMouseDown","mousePressed","onMouseEnter","mouseEntered","onMouseLeave","mouseLeft","onAnimationEnd","animationEnded","NodeKey","drawMode","pathfinder","setDrawMode","keyNodePressed","keyAnimationEnded","PVisualizerSettings","curAlgorithm","mazeDropdownHidden","clearDropdownHidden","editDropdownHidden","algorithmDropdownHidden","pathfindDropdownHidden","style","backgroundColor","setState","hidden","animateMaze","clearGrid","clearWalls","clearWeights","clearPaths","resetStartTarget","changeDiagonalMovement","placeholder","visualizePathfind","getCurrentAlgorithmText","PathfindMenu","ROW_COUNT","COL_COUNT","INIT_START","INIT_TARGET","nodeTypes","PathfindingVisualizer","weightCost","mouseIsDown","interactable","drawWall","drawWeight","startNode","targetNode","curRow","createNode","oldGrid","cost","isWall","curVisual","previousNode","getNodeVisual","curStart","updateNodeVisual","curTarget","isWeight","isInstant","updateGridState","updateAlgorithmInfo","initStart","initTarget","drawStartNode","drawTargetNode","weight","mode","algorithm","speed","softRebuildGrid","visitedNodes","unvisitedNodes","distance","Infinity","sort","a","b","curNode","shift","unvisitedNeighbors","neighborCost","tentativeDistance","dijkstra","startCost","finalCost","tentativeStartCost","aStar","breadthFirstSearch","pop","depthFirstSearch","devAlg","shortestPath","nodesInShortestPath","currentNode","unshift","getShortestPathNodes","totalCost","getShortestPathCost","animateSearch","drawVisitedNode","animatePath","setTimeout","drawPathNode","pathNodes","innerHTML","maze","randomWallMaze","randomWeightMaze","rNum","randomWallWeightMaze","drawWeightNode","drawWallNode","rebuildGrid","isPreview","onMouseUp","handleMouseUp","onContextMenu","e","preventDefault","onDragStart","Array","from","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseLeft","handleAnimationEnd","UNSORTED","COMPARE","SORTED","SWAP","MIN","sortAlgorithms","mergeSort","array","animations","doMergeSort","middle","left","right","merge","splice","SVisualizerSettings","randomizeDropdownHidden","visualizeDropdownHidden","sorter","reGenerateArray","visualizeSort","SortMenu","SortingVisualizer","size","createBar","bars","getElementsByClassName","rebuildArray","newMin","k","temp","selectionSort","j","insertionSort","animateSort","step","action","height","bar","barIdx","DEFAULT_TAB","NavBar","navigateDropdownHidden","curTab","tab","elements","display","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fecd37d7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Card, CardHeader, CardBody, CardFooter\r\n} from 'reactstrap';\r\n\r\nimport './Home.css';\r\n\r\n/**\r\n * Represents the home tab component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass Home extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the home tab component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <h1>Algorithm Visualizer</h1>\r\n                        <h4>Jake Waclawski</h4>\r\n                        <a href=\"https://github.com/jmw3638/Pathfinder\">GitHub</a><br />\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        \r\n                    </CardBody>\r\n                    <CardFooter>\r\n                        <div className=\"home-visualizer-button\"\r\n                        onClick={() => this.props.changeTab(\"Pathfinding Visualizer\")}\r\n                        >Pathfinding Visualizer</div>\r\n                        <div className=\"home-visualizer-button\"\r\n                        onClick={() => this.props.changeTab(\"Sorting Visualizer\")}\r\n                        >Sorting Visualizer</div>\r\n                    </CardFooter>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","// Pathfinding algorithms\r\nexport const pathfindAlgorithms = {\r\n    DIJKSTRA: \"Dijkstra\",\r\n    ASTAR: \"A* (A-Star)\",\r\n    BFS: \"Breadth First Search\",\r\n    DFS: \"Depth First Search\",\r\n    DEV: \"Development Algorithm\",\r\n}\r\n\r\nfunction heuristic(cur, start, target, diagonalNeighbors) {\r\n    let dMultiplier = document.getElementById(\"hs-dmultiplier\").value;\r\n    \r\n    const diagCost = Math.sqrt(2);\r\n    if (!dMultiplier) dMultiplier = 1;\r\n\r\n    const rowDistance = Math.abs(target.row - cur.row);\r\n    const colDistance = Math.abs(target.col - cur.col);\r\n\r\n    const startRowDistance = Math.abs(target.row - start.row);\r\n    const startColDistance = Math.abs(target.col - start.col);\r\n\r\n    const cross = Math.abs(colDistance * startRowDistance - startColDistance * rowDistance);\r\n\r\n    const manhattanD = dMultiplier * (rowDistance + colDistance);\r\n\r\n    const diagonalD = dMultiplier * (rowDistance + colDistance) + (diagCost - 2 * dMultiplier) * Math.min(rowDistance, colDistance);\r\n\r\n    const directRoute = Math.sqrt(rowDistance**2 + colDistance**2);\r\n\r\n    let heuristic = diagonalNeighbors ? diagonalD : manhattanD;\r\n\r\n    heuristic += (cross * 0.001);\r\n\r\n    return heuristic;\r\n}\r\n\r\nexport function devAlg(grid, start, target, diagonalNeighbors) {\r\n    \r\n}\r\n\r\n/**\r\n * Executes a Dijkstra's algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function dijkstra(grid, start, target, diagonalNeighbors) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = getAllNodes(grid);\r\n\r\n    for (const node of getAllNodes(grid)) node.distance = Infinity;\r\n    start.distance = 0;\r\n\r\n    while (unvisitedNodes.length !== 0) {\r\n        unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n        const curNode = unvisitedNodes.shift();\r\n\r\n        if (curNode.isVisited || curNode.isWall) continue;\r\n        if (curNode === target || curNode.distance === Infinity) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid, diagonalNeighbors);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            var neighborCost = neighbor.cost\r\n            const diagCost = Math.sqrt(2) - 1;\r\n            if (neighbor.isDiagonal) neighborCost += diagCost;\r\n            neighbor.isDiagonal = false;\r\n\r\n            const tentativeDistance = curNode.distance + neighborCost;\r\n\r\n            if (neighbor.distance > tentativeDistance) {\r\n                neighbor.previousNode = curNode;\r\n                neighbor.distance = tentativeDistance;\r\n            }\r\n        }\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n    }\r\n\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes an A* (A-Star) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function aStar(grid, start, target, diagonalNeighbors) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [];\r\n\r\n    for (const node of getAllNodes(grid)) {\r\n        node.startCost = Infinity;\r\n        node.finalCost = Infinity;\r\n    }\r\n    start.startCost = 0;\r\n    start.finalCost = heuristic(start, start, target, diagonalNeighbors);\r\n    unvisitedNodes.push(start);\r\n\r\n    while (unvisitedNodes.length !== 0) {\r\n        unvisitedNodes.sort((a, b) => a.finalCost - b.finalCost);\r\n        const curNode = unvisitedNodes.shift();\r\n\r\n        if (curNode.isVisited || curNode.isWall) continue;\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid, diagonalNeighbors);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            var neighborCost = neighbor.cost\r\n            const diagCost = Math.sqrt(2) - 1;\r\n            if (neighbor.isDiagonal) neighborCost += diagCost;\r\n            neighbor.isDiagonal = false;\r\n            \r\n            const tentativeStartCost = curNode.startCost + neighborCost;\r\n            \r\n            if (tentativeStartCost < neighbor.startCost) {\r\n                neighbor.previousNode = curNode;\r\n\r\n                neighbor.startCost = tentativeStartCost;\r\n                neighbor.finalCost = neighbor.startCost + heuristic(neighbor, start, target, diagonalNeighbors);\r\n\r\n                if (!unvisitedNodes.includes(neighbor)) unvisitedNodes.push(neighbor);\r\n            }\r\n        }\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n    }\r\n\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes Breadth First Search (BFS) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function breadthFirstSearch(grid, start, target, diagonalNeighbors) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    start.distance = 0;\r\n   \r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.shift();\r\n\r\n        if (curNode.isVisited || curNode.isWall) continue;\r\n        if (curNode === target || curNode.distance === Infinity) return visitedNodes; \r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid, diagonalNeighbors);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n            neighbor.previousNode = curNode;\r\n            neighbor.distance = curNode.distance + 1;\r\n        }\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes a Depth First Search (DFS) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function depthFirstSearch(grid, start, target, diagonalNeighbors) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    \r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.pop();\r\n\r\n        if (curNode.isWall || curNode.isVisited) continue;\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid, diagonalNeighbors);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n            neighbor.previousNode = curNode;\r\n        }\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Gets all of the nodes in the grid.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * \r\n * @returns an array containing all of the nodes\r\n */\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) nodes.push(node);\r\n    }\r\n    return nodes;\r\n}\r\n\r\n/**\r\n * Gets the shortest path of nodes from the target node to \r\n * the start node.\r\n * \r\n * @param {Object} targetNode target node\r\n * \r\n * @returns an array of shortest path nodes in order\r\n */\r\nexport function getShortestPathNodes(targetNode) {\r\n    const nodesInShortestPath = [];\r\n    let currentNode = targetNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPath;\r\n}\r\n\r\n/**\r\n * Gets the total weighted cost of the shortest path.\r\n * \r\n * @param {Object} targetNode target node\r\n * \r\n * @returns the total cost\r\n */\r\nexport function getShortestPathCost(targetNode) {\r\n    const nodesInShortestPath = [];\r\n    let currentNode = targetNode;\r\n    let totalCost = 0;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPath.unshift(currentNode);\r\n        totalCost += currentNode.cost;\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return totalCost;\r\n}\r\n\r\n/**\r\n * Gets all unvisited neighbors of a given node.\r\n * \r\n * @param {Object} node node\r\n * @param {Array} grid grid of nodes\r\n * @param {boolean} diagonals are we allowing diagonal neighbors\r\n * \r\n * @returns an array containing all unvisited neighbors\r\n */\r\nfunction getUnvisitedNeighbors(node, grid, diagonals) {\r\n    const neighbors = [];\r\n    const {row, col} = node;\r\n    \r\n    if (diagonals && row > 0 && col > 0) {\r\n        neighbors.push(grid[row - 1][col - 1]); // North West    \r\n        grid[row - 1][col - 1].isDiagonal = true;;\r\n    }\r\n\r\n    if (col > 0) neighbors.push(grid[row][col - 1]); // West\r\n\r\n    if (diagonals && row < grid.length - 1 && col > 0) {\r\n        neighbors.push(grid[row + 1][col - 1]); // South West\r\n        grid[row + 1][col - 1].isDiagonal = true;;\r\n    }\r\n\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // South\r\n\r\n    if (diagonals && row < grid.length - 1 && col < grid[row].length - 1) {\r\n        neighbors.push(grid[row + 1][col + 1]); // South East\r\n        grid[row + 1][col + 1].isDiagonal = true;;\r\n    }\r\n\r\n    if (col < grid[row].length - 1) neighbors.push(grid[row][col + 1]); // East\r\n\r\n    if (diagonals && row > 0 && col < grid[row].length - 1) {\r\n        neighbors.push(grid[row - 1][col + 1]); // North East\r\n        grid[row - 1][col + 1].isDiagonal = true;;\r\n    }\r\n\r\n    if (row > 0) neighbors.push(grid[row - 1][col]); // North\r\n\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}","// Maze algorithms\r\nexport const mazeAlgorithms = {\r\n    RECURSIVE_DEVISION: \"Recursive Devision\",\r\n    RANDOM_WALL: \"Random Wall\",\r\n    RANDOM_WEIGHT: \"Random Weight\",\r\n    RANDOM_WALL_WEIGHT: \"Random Wall/Weight\"\r\n}\r\n\r\n/**\r\n * Algorithm for generating a random wall maze.\r\n * \r\n * @param {int} rows number of rows\r\n * @param {int} cols number of columns\r\n * \r\n * @returns a grid of boolean values, true if wall node\r\n */\r\nexport function randomWallMaze(rows, cols) {\r\n    var walls = []\r\n\r\n    for (let r = 0; r < rows; r++) {\r\n        for (let c = 0; c < cols; c++) {\r\n            const rNum = random(1, 10);\r\n            if (rNum <= 3) walls.push([r, c]);\r\n        }\r\n    }\r\n\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Algorithm for generating a random weight maze.\r\n * \r\n * @param {int} rows number of rows\r\n * @param {int} cols number of columns\r\n * \r\n * @returns a grid of boolean values, true if wall node\r\n */\r\nexport function randomWeightMaze(rows, cols) {\r\n    var walls = []\r\n\r\n    for (let r = 0; r < rows; r++) {\r\n        for (let c = 0; c < cols; c++) {\r\n            const rNum = random(1, 10);\r\n            if (rNum <= 3) walls.push([r, c, true]);\r\n        }\r\n    }\r\n\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Algorithm for generating a random wall/weight maze.\r\n * \r\n * @param {int} rows number of rows\r\n * @param {int} cols number of columns\r\n * \r\n * @returns a grid of boolean values, true if wall node\r\n */\r\nexport function randomWallWeightMaze(rows, cols) {\r\n    var walls = []\r\n\r\n    for (let r = 0; r < rows; r++) {\r\n        for (let c = 0; c < cols; c++) {\r\n            const rNum = random(1, 10);\r\n            if (rNum <= 2) walls.push([r, c]);\r\n            if (rNum >= 8) walls.push([r, c, true]);\r\n        }\r\n    }\r\n\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Algorithm for generating a maze using recursive devision.\r\n * \r\n * @param {int} rows number of rows\r\n * @param {int} cols number of columns\r\n * \r\n * @returns a grid of boolean values, true if wall node\r\n */\r\nexport function recursiveDevision(rows, cols) {\r\n    var walls = [];\r\n\r\n    //walls = innerWalls(walls, true, 0, cols-1, 0, rows-1);\r\n    walls = buildWalls(walls, rows, cols);\r\n    \r\n    return walls;\r\n}\r\n\r\n/**\r\n * Creates walls around the border of the maze.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} rows amount of rows \r\n * @param {int} cols amount of columns\r\n * \r\n * @returns a grid of walls\r\n */\r\nfunction buildWalls(walls, rows, cols) {\r\n    for (var r = 0; r < rows; r++) {\r\n        if (r === 0 || r === (rows-1)) {\r\n            for (var c = 0; c < cols; c++) {\r\n                walls.push([r, c]);\r\n            }\r\n        } else {\r\n            walls.push([r, 0]);\r\n            walls.push([r, cols-1]);\r\n        }\r\n    }\r\n\r\n    walls = innerWalls(walls, random(0, 1), 1, cols-2, 1, rows-2);\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Recursive function that builds the inner walls of the maze.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {boolean} h is horizontal wall\r\n * @param {int} minC lower column bound\r\n * @param {int} maxC upper column bound\r\n * @param {int} minR lower row bound\r\n * @param {int} maxR upper row bound\r\n * \r\n * @returns a grid of walls\r\n */\r\nfunction innerWalls(walls, h, minC, maxC, minR, maxR) {\r\n    const rGap = maxR - minR;\r\n    const cGap = maxC - minC;\r\n\r\n    if (maxR - minR <= 1) return walls; \r\n    if (maxC - minC <= 1) return walls; \r\n\r\n    var r = Math.floor(random(minR+1, maxR-1)/2)*2;\r\n    var c = Math.floor(random(minC+1, maxC-1)/2)*2;\r\n\r\n    // ^ xor: one or the other but not both\r\n    if (rGap <= 5 ^ cGap<= 5) {\r\n        if (rGap <= 5) {\r\n            walls = addVWall(walls, minR, maxR, c);\r\n\r\n            walls = innerWalls(walls, !h, minC, c-1, minR, maxR);\r\n            walls = innerWalls(walls, !h, c+1, maxC, minR, maxR);\r\n        }\r\n        if (cGap <= 5) {\r\n            walls = addHWall(walls, minC, maxC, r);\r\n    \r\n            walls = innerWalls(walls, !h, minC, maxC, minR, r-1);\r\n            walls = innerWalls(walls, !h, minC, maxC, r+1, maxR);\r\n        }\r\n        return walls;\r\n    } \r\n    if (h) {\r\n        walls = addHWall(walls, minC, maxC, r);\r\n\r\n        walls = innerWalls(walls, !h, minC, maxC, minR, r-1);\r\n        walls = innerWalls(walls, !h, minC, maxC, r+1, maxR);\r\n    } else {\r\n        walls = addVWall(walls, minR, maxR, c);\r\n\r\n        walls = innerWalls(walls, !h, minC, c-1, minR, maxR);\r\n        walls = innerWalls(walls, !h, c+1, maxC, minR, maxR);\r\n    }\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Builds a horizontal wall at a given row.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} minC lower column bound\r\n * @param {int} maxC upper column bound\r\n * @param {int} r row\r\n */\r\nfunction addHWall(walls, minC, maxC, r) {\r\n    const numHoles = random(1, (maxC - minC)/4);\r\n    const holes = [];\r\n    for (let i = 0; i < numHoles; i++) {\r\n        const hole = Math.floor(random(minC, maxC)/2)*2+1;\r\n        holes.push(hole);\r\n    }\r\n\r\n    for (var i = minC; i <= maxC; i++) if (!holes.includes(i)) walls.push([r, i]); \r\n    return walls;\r\n}\r\n\r\n/**\r\n * Builds a vertical wall at a given column.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} minR lower row bound\r\n * @param {int} maxR upper row bound\r\n * @param {int} c column \r\n */\r\nfunction addVWall(walls, minR, maxR, c) {\r\n    const numHoles = random(1, (maxR - minR)/4);\r\n    const holes = [];\r\n    for (let i = 0; i < numHoles; i++) {\r\n        const hole = Math.floor(random(minR, maxR)/2)*2+1;\r\n        holes.push(hole);\r\n    }\r\n\r\n    for (var i = minR; i <= maxR; i++) if (!holes.includes(i)) walls.push([i, c]); \r\n    return walls;\r\n}\r\n\r\n/**\r\n * Generates a random integer between two given values.\r\n * \r\n * @param {int} min minimum value\r\n * @param {int} max maximum value \r\n * \r\n * @returns the generated integer\r\n */\r\nfunction random(min, max) { return Math.floor(Math.random() * (max - min + 1) + min); }","import React from 'react';\r\n\r\n/**\r\n * Represents the algorithm stats text above the grid of the pathfinding\r\n * visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindStats extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the algorithm stats component.\r\n     * \r\n     * @returns a <div> element representing the stats text\r\n     */\r\n    render () {\r\n\r\n        return (\r\n            <div className=\"pv-stats\">\r\n                <div className=\"pv-stats-item\">\r\n                    <div>Visited Nodes:</div>\r\n                    <div id=\"pv-stats-visited\" className=\"pv-stats-text\">0</div>\r\n                </div>\r\n                <div className=\"pv-stats-item\">\r\n                    <div>Path Nodes:</div>\r\n                    <div id=\"pv-stats-path\" className=\"pv-stats-text\">0</div>\r\n                </div>\r\n                <div className=\"pv-stats-item\">\r\n                    <div>Path Cost:</div>\r\n                    <div id=\"pv-stats-weighted\" className=\"pv-stats-text\">0</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindStats;","import React from 'react';\r\n\r\nimport './Node.css';\r\n\r\n/**\r\n * Represents a grid node on the screen. Extra class names\r\n * can be applied to change the appearance of the node.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass Node extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the node.\r\n     * \r\n     * @returns a <div> element representing the node\r\n     */\r\n    render () {\r\n        const nodeType = this.props.type ? this.props.type :\r\n        this.props.isStart ? 'start' : \r\n        this.props.isTarget ? 'target' : \r\n        '';\r\n\r\n        return (\r\n            <div \r\n            id={`node-${this.props.row}-${this.props.col}`} \r\n            className={`node ${nodeType}`}\r\n            onMouseDown={() => this.props.mousePressed(this.props.row, this.props.col)}\r\n            onMouseEnter={() => this.props.mouseEntered(this.props.row, this.props.col)}\r\n            onMouseLeave={() => this.props.mouseLeft(this.props.row, this.props.col)}\r\n            onAnimationEnd={() => this.props.animationEnded(nodeType)}\r\n            /> \r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React from 'react';\r\n\r\nimport Node from '../Grid/Node';\r\n\r\n/**\r\n * Represents the node key in the menu.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass NodeKey extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Runs the animation for the pressed node. Sets the appropriate draw mode.\r\n     * \r\n     * @param {string} id element id\r\n     * @param {string} className class name to set\r\n     * @param {int} drawMode draw mode to set\r\n     */\r\n    keyNodePressed (id, className, drawMode) {\r\n        document.getElementById(`node-${id}`).className = className;\r\n        if (drawMode || drawMode === 0) this.props.pathfinder.setDrawMode(drawMode);\r\n    }\r\n\r\n    /**\r\n     * Reverts the node state to the instant version.\r\n     * \r\n     * @param {string} id node element id\r\n     * @param {string} className class name to set\r\n     */\r\n    keyAnimationEnded (id, className) { document.getElementById(`node-${id}`).className = `node ${className}`; }\r\n\r\n    /**\r\n     * Renders the key component.\r\n     * \r\n     * @returns a <div> element representing the key\r\n     */\r\n    render () {\r\n\r\n        return (\r\n            <div className=\"pv-key\">\r\n                <div className=\"pv-key-item\" onClick={() => this.keyNodePressed(\"start-instant\", \"node start\", 3)}>\r\n                    <div className=\"pv-key-node\">\r\n                        <Node type={\"start-instant\"}\r\n                        row={\"start\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div id='start-text' className=\"pv-key-text\">Start Node</div>\r\n                </div>\r\n                <div className=\"pv-key-item\" onClick={() => this.keyNodePressed(\"target-instant\", \"node target\", 4)}>\r\n                    <div className=\"pv-key-node\">\r\n                        <Node type={\"target-instant\"}\r\n                        row={\"target\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-text\">Target Node</div>\r\n                </div>\r\n                <div className=\"pv-key-item\" onClick={() => this.keyNodePressed(\"weight-instant\", \"node weight\", 2)}>\r\n                    <div className=\"pv-key-node\">\r\n                        <Node type={\"weight-instant\"}\r\n                        row={\"weight\"}\r\n                        col={\"instant\"}                           \r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-text\">Weighted Node</div>\r\n                </div>\r\n                <div className=\"pv-key-item\" onClick={() => this.keyNodePressed(\"wall-instant\", \"node wall\", 1)}>\r\n                    <div className=\"pv-key-node\">\r\n                        <Node type={\"wall-instant\"}\r\n                        row={\"wall\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-text\">Wall Node</div>\r\n                </div>\r\n                <div className=\"pv-key-item\" onClick={() => this.keyNodePressed(\"unvisited-instant\", \"node node-animated\", 0)}>\r\n                    <div className=\"pv-key-node\">\r\n                        <Node type={\"unvisited-instant\"}\r\n                        row={\"unvisited\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, \"node\")}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-text\">Unvisited Node</div>\r\n                </div>\r\n                <div className=\"pv-key-item\">\r\n                    <div className=\"pv-key-node\" onClick={() => this.keyNodePressed(\"visited-instant\", \"node visited\")}>\r\n                        <Node type={\"visited-instant\"}\r\n                        row={\"visited\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-node\" onClick={() => this.keyNodePressed(\"visited-weight-instant\", \"node visited-weight\")}>\r\n                        <Node type={\"visited-weight-instant\"}\r\n                        row={\"visited-weight\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>         \r\n                    </div>\r\n                    <div className=\"pv-key-text\">Visited Nodes</div>\r\n                </div>\r\n                <div className=\"pv-key-item\">\r\n                    <div className=\"pv-key-node\" onClick={() => this.keyNodePressed(\"path-instant\", \"node path\")}>\r\n                        <Node type={\"path-instant\"}\r\n                        row={\"path\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-node\" onClick={() => this.keyNodePressed(\"path-weight-instant\", \"node path-weight\")}>\r\n                        <Node type={\"path-weight-instant\"}\r\n                        row={\"path-weight\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-text\">Path Nodes</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NodeKey;","import React from 'react';\r\n\r\nimport { pathfindAlgorithms } from '../Algorithms/PathfindAlgorithms';\r\nimport { mazeAlgorithms } from '../Algorithms/MazeAlgorithms';\r\n\r\n/**\r\n * Represents the settings bar in the menu of the pathfinding visualizer\r\n * component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PVisualizerSettings extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Currently selected pathfinding algorithm\r\n            curAlgorithm: null,\r\n            // Is the maze button dropdown open?\r\n            mazeDropdownHidden: true,\r\n            // Is the clear button dropdown open?\r\n            clearDropdownHidden: true,\r\n            // Is the edit button dropdown open?\r\n            editDropdownHidden: true,\r\n            // Is the algorithm button dropdown open?\r\n            algorithmDropdownHidden: true,\r\n            // Is the pathfind button dropdown open?\r\n            pathfindDropdownHidden: true,\r\n\r\n            diagonalNeighbors: false,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the current algorithm for the information text as a string.\r\n     * \r\n     * @returns the string\r\n     */\r\n    getCurrentAlgorithmText () {\r\n        if (!this.state.curAlgorithm) return \"Select an Algorithm\";\r\n        return this.state.curAlgorithm;\r\n    }\r\n\r\n    changeDiagonalMovement () {\r\n        document.getElementById(\"diagmove-bool\").style.backgroundColor = !this.state.diagonalNeighbors ? \"rgb(100, 255, 100)\" : \"rgb(255, 100, 100)\";\r\n\r\n        this.setState({diagonalNeighbors: !this.state.diagonalNeighbors});\r\n    }\r\n\r\n    /**\r\n     * Renders the settings bar component.\r\n     * \r\n     * @returns a <div> element representing the settings bar\r\n     */\r\n    render () {\r\n\r\n        return (\r\n            <div className=\"pv-menu-bar\">\r\n                <div className=\"maze-dropdown dropdown-animate\">\r\n                    <div className=\"pv-menu-bar-button\" \r\n                    onMouseEnter={() => this.setState({mazeDropdownHidden: false})}>\r\n                    <span>Maze</span></div>\r\n                    <div className=\"pv-menu-dropdown-content maze-drop-content dropdown-animate\"\r\n                    hidden={this.state.mazeDropdownHidden}\r\n                    onClick={() => this.setState({mazeDropdownHidden: true})}>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.animateMaze(mazeAlgorithms.RECURSIVE_DEVISION)}\r\n                        >Recursive Devision</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.animateMaze(mazeAlgorithms.RANDOM_WALL)}\r\n                        >Random Wall</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.animateMaze(mazeAlgorithms.RANDOM_WEIGHT)}\r\n                        >Random Weight</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.animateMaze(mazeAlgorithms.RANDOM_WALL_WEIGHT)}\r\n                        >Random Wall/Weight</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"clear-dropdown dropdown-animate\">\r\n                    <div className=\"pv-menu-bar-button\" \r\n                    onClick={() => this.props.pathfinder.clearGrid()}\r\n                    onMouseEnter={() => this.setState({clearDropdownHidden: false})}>\r\n                    <span>Clear</span></div>\r\n                    <div className=\"pv-menu-dropdown-content clear-drop-content dropdown-animate\"\r\n                    hidden={this.state.clearDropdownHidden} \r\n                    onClick={() => this.setState({clearDropdownHidden: true})}>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.clearWalls()}\r\n                        >Clear Walls</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.clearWeights()}\r\n                        >Clear Weights</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.clearPaths()}\r\n                        >Clear Path</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.resetStartTarget()}\r\n                        >Reset Start/Target</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"edit-dropdown dropdown-animate\">\r\n                    <div className=\"pv-menu-bar-button\" \r\n                    onMouseEnter={() => this.setState({editDropdownHidden: false})}>\r\n                    <span>Edit</span></div>\r\n                    <div className=\"pv-menu-dropdown-content edit-drop-content dropdown-animate\"\r\n                    hidden={this.state.editDropdownHidden} >\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.changeDiagonalMovement()}>\r\n                            <div id=\"diagmove-bool\" className=\"bool-setting\" />\r\n                            Diagonal Movement</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\">\r\n                            <input id=\"hs-dmultiplier\" className=\"heuristic-setting\" placeholder=\"A* Multiplier\" type=\"number\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"algorithm-dropdown dropdown-animate\">\r\n                    <div className=\"pv-menu-bar-button\"\r\n                    onMouseEnter={() => this.setState({algorithmDropdownHidden: false})}\r\n                    onClick={() => this.setState({curAlgorithm: null})}>\r\n                    <span>Algorithm</span></div>\r\n                    <div className=\"pv-menu-dropdown-content alg-drop-content dropdown-animate\"\r\n                    hidden={this.state.algorithmDropdownHidden}>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.DIJKSTRA})}\r\n                        >Dijkstra</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.ASTAR})}\r\n                        >A* (A-Star)</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.BFS})}\r\n                        >Breadth First Search</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.DFS})}\r\n                        >Depth First Search</div>\r\n                        {/* <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.DEV})}\r\n                        >Development Algorithm</div> */}\r\n                    </div>\r\n                </div>\r\n                <div className=\"pathfind-dropdown dropdown-animate\">\r\n                    <div className=\"pv-menu-bar-button\" \r\n                    onMouseEnter={() => this.setState({pathfindDropdownHidden: false})}\r\n                    onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, this.state.diagonalNeighbors)}>\r\n                    <span>Pathfind</span></div>\r\n                    <div className=\"pv-menu-dropdown-content pathfind-drop-content dropdown-animate\"\r\n                    hidden={this.state.pathfindDropdownHidden}\r\n                    onClick={() => this.setState({pathfindDropdownHidden: true})}>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, this.state.diagonalNeighbors, 250)}\r\n                        >Very Slow</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, this.state.diagonalNeighbors, 50)}\r\n                        >Slow</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, this.state.diagonalNeighbors, 15)}\r\n                        >Fast</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, this.state.diagonalNeighbors, 5)}\r\n                        >Very Fast</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, this.state.diagonalNeighbors, 0)}\r\n                        >Instant</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"pv-curalg dropdown-animate\">{this.getCurrentAlgorithmText()}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PVisualizerSettings;","import React from 'react';\r\n\r\nimport './PathfindMenu.css';\r\n\r\nimport PathfindStats from './PathfindStats';\r\nimport NodeKey from './NodeKey';\r\nimport PVisualizerSettings from './PVisualizerSettings';\r\n\r\n/**\r\n * Represents the menu above the grid of the pathfinding visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindMenu extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    \r\n    /**\r\n     * Renders the menu component.\r\n     * \r\n     * @returns a <div> element representing the menu\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"pathfind-menu\">\r\n                <PVisualizerSettings pathfinder={this.props.pathfinder} />\r\n                <NodeKey pathfinder={this.props.pathfinder} />\r\n                <PathfindStats />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindMenu;","import React from 'react';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nimport { getShortestPathNodes, dijkstra, aStar, breadthFirstSearch, depthFirstSearch, devAlg, pathfindAlgorithms, getShortestPathCost\r\n} from './Algorithms/PathfindAlgorithms';\r\nimport { recursiveDevision, mazeAlgorithms, randomWallMaze, randomWeightMaze, randomWallWeightMaze\r\n} from './Algorithms/MazeAlgorithms';\r\nimport PathfindMenu from './Menu/PathfindMenu';\r\nimport Node from './Grid/Node';\r\n\r\n// Number of rows in the grid\r\nconst ROW_COUNT = 29;\r\n// Number of columns in the grid\r\nconst COL_COUNT = 71;\r\n// Initial cost of weighted nodes\r\nconst INIT_COST = 15;\r\n// Initial coordinates of the start node [row, col]\r\nconst INIT_START = [14, 10];\r\n// Initial coordinates of the target noe [row, col]\r\nconst INIT_TARGET = [14, 60];\r\n// Default speed between visited node animations in miliseconds\r\nconst VISITED_SPEED = 15;\r\n// Speed between shortest path node animations in miliseconds\r\nconst PATH_SPEED = 25;\r\n// Speed between maze wall node animations in miliseconds\r\nconst MAZE_SPEED = 10;\r\n\r\n// Node class types\r\nconst nodeTypes = {\r\n    NODE: 'node',\r\n    NODE_ANIMATED: 'node node-animated',\r\n    WALL: 'node wall',\r\n    WALL_INSTANT: 'node wall-instant',\r\n    WALL_PREVIEW: 'node wall-preview',\r\n    WEIGHT: 'node weight',\r\n    WEIGHT_INSTANT: 'node weight-instant',\r\n    WEIGHT_PREVIEW: 'node weight-preview',\r\n    START: 'node start',\r\n    START_INSTANT: 'node start-instant',\r\n    START_PREVIEW: 'node start-preview',\r\n    TARGET: 'node target',\r\n    TARGET_INSTANT: 'node target-instant',\r\n    TARGET_PREVIEW: 'node target-preview',\r\n    VISITED: 'node visited',\r\n    VISITED_INSTANT: 'node visited-instant',\r\n    VISITED_WEIGHT: 'node visited-weight',\r\n    VISITED_WEIGHT_INSTANT: 'node visited-weight-instant',\r\n    PATH: 'node path',\r\n    PATH_INSTANT: 'node path-instant',\r\n    PATH_WEIGHT: 'node path-weight',\r\n    PATH_WEIGHT_INSTANT: 'node path-weight-instant',\r\n}\r\n\r\n/**\r\n * Represents the pathfinding visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindingVisualizer extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Current state of grid nodes\r\n            grid: [],\r\n            // Current cost of weighted nodes\r\n            weightCost: INIT_COST,\r\n            // Is the mouse down?\r\n            mouseIsDown: false,\r\n            // Are we currently allowed to interact with the grid\r\n            interactable: true,\r\n            // Current draw mode (0: none, 1: walls, 2: weights)\r\n            drawMode: 0,\r\n            // Are we erasing or drawing walls (null if neither)?\r\n            drawWall: null,\r\n            // Are we erasing or drawing weights (null if neither)?\r\n            drawWeight: null,\r\n            // Current start node position\r\n            startNode: INIT_START,\r\n            // Current target node position\r\n            targetNode: INIT_TARGET,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the grid with new nodes. Start and target\r\n     * node positions are preserved.\r\n     */\r\n    rebuildGrid () {\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.createNode(r, c, 1, false);\r\n                curRow.push(node);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the grid with new nodes. Main node types are\r\n     * preserved (start, target, wall, weight).\r\n     */\r\n    softRebuildGrid () {\r\n        const oldGrid = this.state.grid;\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.createNode(r, c, oldGrid[r][c].cost, oldGrid[r][c].isWall)\r\n                curRow.push(node);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Creates a new node with stored properties.\r\n     * \r\n     * @param {int} row row on grid\r\n     * @param {int} col column on grid\r\n     * @param {int} cost weight cost of node\r\n     * @param {boolean} isWall is node a wall\r\n     * \r\n     * @returns the new node object\r\n     */\r\n    createNode (row, col, cost, isWall) {\r\n        let curVisual = nodeTypes.NODE;\r\n        if (cost !== 1) curVisual = nodeTypes.WEIGHT;\r\n        if (isWall) curVisual = nodeTypes.WALL;\r\n\r\n        return {\r\n            curVisual: curVisual,\r\n            row: row,\r\n            col: col,\r\n            cost: cost,\r\n            isStart: row === this.state.startNode[0] && col === this.state.startNode[1],\r\n            isTarget: row === this.state.targetNode[0] && col === this.state.targetNode[1],\r\n            isWall: isWall,\r\n            previousNode: null,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the grid of nodes. Changes the properties of\r\n     * newly drawn node types according to their current visual state.\r\n     */\r\n    updateGridState () {\r\n        const grid = this.state.grid;\r\n\r\n        for (let r = 0; r < grid.length; r++) {\r\n            for (let c = 0; c < grid[0].length; c++) {\r\n                const node = grid[r][c];\r\n                const type = this.getNodeVisual(node);\r\n\r\n                node.curVisual = nodeTypes.NODE;\r\n                node.isStart = false;\r\n                node.isTarget = false;\r\n                node.isWall = false;\r\n                node.cost = 1;\r\n                \r\n                switch (type) {\r\n                    case nodeTypes.START: \r\n                    case nodeTypes.START_INSTANT:\r\n                        node.curVisual = nodeTypes.START_INSTANT;\r\n                        node.isStart = true;\r\n                        this.setState({startNode: [node.row, node.col]});\r\n                        break;\r\n                    case nodeTypes.TARGET: \r\n                    case nodeTypes.TARGET_INSTANT:\r\n                        node.curVisual = nodeTypes.TARGET_INSTANT;\r\n                        node.isTarget = true;\r\n                        this.setState({targetNode: [node.row, node.col]});\r\n                        break;\r\n                    case nodeTypes.WALL: \r\n                    case nodeTypes.WALL_INSTANT:\r\n                        node.curVisual = nodeTypes.WALL_INSTANT;\r\n                        node.isWall = true;\r\n                        break;\r\n                    case nodeTypes.WEIGHT:\r\n                    case nodeTypes.WEIGHT_INSTANT:\r\n                    case nodeTypes.VISITED_WEIGHT:\r\n                    case nodeTypes.VISITED_WEIGHT_INSTANT:\r\n                    case nodeTypes.PATH_WEIGHT:\r\n                    case nodeTypes.PATH_WEIGHT_INSTANT:\r\n                        node.curVisual = nodeTypes.WEIGHT_INSTANT;\r\n                        node.cost = this.state.weightCost;\r\n                        break;\r\n                    case nodeTypes.VISITED:\r\n                    case nodeTypes.VISITED_INSTANT:\r\n                        node.curVisual = nodeTypes.VISITED_INSTANT;\r\n                        break;\r\n                    case nodeTypes.PATH:\r\n                    case nodeTypes.PATH_INSTANT:\r\n                        node.curVisual = nodeTypes.PATH_INSTANT;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Updates the visual state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {nodeTypes} type new node type\r\n     */\r\n    updateNodeVisual (node, type) { document.getElementById(`node-${node.row}-${node.col}`).className = type; }\r\n\r\n    /**\r\n     * Gets the current node type.\r\n     * \r\n     * @param {Object} node \r\n     * \r\n     * @returns current node element class name\r\n     */\r\n    getNodeVisual (node) { return document.getElementById(`node-${node.row}-${node.col}`).className; }\r\n\r\n    /**\r\n     * Sets new start node position. Updates state, we are no\r\n     * longer placing the start node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    drawStartNode (node) { \r\n        const curStart = this.state.grid[this.state.startNode[0]][this.state.startNode[1]];\r\n\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(curStart, nodeTypes.NODE_ANIMATED);\r\n        this.updateNodeVisual(node, nodeTypes.START);\r\n    }\r\n\r\n    /**\r\n     * Sets new target node position. Updates state, we are no\r\n     * longer placing the target node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    drawTargetNode (node) { \r\n        const curTarget = this.state.grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(curTarget, nodeTypes.NODE_ANIMATED);\r\n        this.updateNodeVisual(node, nodeTypes.TARGET);\r\n    }\r\n\r\n    /**\r\n     * Updates the visual wall state of a given node. \r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isWall are we drawing (true) or erasing (false)\r\n     */\r\n    drawWallNode (node, isWall) {\r\n        if (node.cost !== 1 || node.isStart || node.isTarget) return;\r\n\r\n        if (!isWall) {\r\n            if (this.getNodeVisual(node) === nodeTypes.NODE) return; \r\n            this.updateNodeVisual(node, nodeTypes.NODE_ANIMATED)\r\n        } else if (this.getNodeVisual(node) !== nodeTypes.WALL_INSTANT) {\r\n            this.updateNodeVisual(node, nodeTypes.WALL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual weight state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isWeight are we drawing (true) or erasing (false)\r\n     */\r\n    drawWeightNode (node, isWeight) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        if (!isWeight) {\r\n            if (this.getNodeVisual(node) === nodeTypes.NODE) return; \r\n            this.updateNodeVisual(node, nodeTypes.NODE_ANIMATED);\r\n        } else if (this.getNodeVisual(node) !== nodeTypes.WEIGHT_INSTANT) {\r\n            this.updateNodeVisual(node, nodeTypes.WEIGHT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual visited state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    drawVisitedNode (node, isInstant) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        const isWeight = node.cost !== 1;\r\n\r\n        if (isInstant) {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT_INSTANT);\r\n            else this.updateNodeVisual(node, nodeTypes.VISITED_INSTANT);\r\n        } else {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT);\r\n            else this.updateNodeVisual(node, nodeTypes.VISITED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual path state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    drawPathNode (node, isInstant) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        const isWeight = node.cost !== 1;\r\n\r\n        if (isInstant) {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT_INSTANT);\r\n            else this.updateNodeVisual(node, nodeTypes.PATH_INSTANT);\r\n        } else {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT);\r\n            else this.updateNodeVisual(node, nodeTypes.PATH);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the entire grid.\r\n     */\r\n    clearGrid () {\r\n        this.clearWeights();\r\n        this.clearWalls();\r\n        this.clearPaths();\r\n    }\r\n\r\n    /**\r\n     * Clears the grid of all wall nodes.\r\n     */\r\n    clearWalls () { \r\n        if (!this.state.interactable) return;\r\n\r\n        const grid = this.state.grid;\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.isWall) {\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                    node.isWall = false;\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: grid});\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Clears the grid of all weighted nodes and resets their\r\n     * costs to 1.\r\n     */\r\n    clearWeights () {\r\n        if (!this.state.interactable) return;\r\n\r\n        const grid = this.state.grid;\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.cost !== 1) {\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                    node.cost = 1;\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: grid});\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Clears the visual grid of all path and visited type nodes.\r\n     * Updates the class name of each appropriate node object.\r\n     */\r\n    clearPaths () {\r\n        if (!this.state.interactable) return;\r\n\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.state.grid[r][c];\r\n                const type = this.getNodeVisual(node);\r\n\r\n                if (type === nodeTypes.VISITED || \r\n                    type === nodeTypes.VISITED_INSTANT ||\r\n                    type === nodeTypes.PATH || \r\n                    type === nodeTypes.PATH_INSTANT) {\r\n\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                }\r\n                else if (type === nodeTypes.VISITED_WEIGHT || \r\n                    type === nodeTypes.VISITED_WEIGHT_INSTANT || \r\n                    type === nodeTypes.PATH_WEIGHT ||\r\n                    type === nodeTypes.PATH_WEIGHT_INSTANT) {\r\n                \r\n                    this.updateNodeVisual(node, nodeTypes.WEIGHT_INSTANT);\r\n                }\r\n            }\r\n        }\r\n        this.updateAlgorithmInfo(0, 0, 0);\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Resets the start and target nodes to their initial locations.\r\n     */\r\n    resetStartTarget () {\r\n        if (!this.state.interactable) return;\r\n\r\n        this.clearPaths();\r\n\r\n        const initStart = this.state.grid[INIT_START[0]][INIT_START[1]];\r\n        const initTarget = this.state.grid[INIT_TARGET[0]][INIT_TARGET[1]];\r\n\r\n        this.drawStartNode(initStart);\r\n        this.drawTargetNode(initTarget);\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Sets new cost of weighted nodes.\r\n     * \r\n     * @param {int} weight new cost\r\n     */\r\n    setNewWeight (weight) { this.setState({weightCost: weight}); }\r\n\r\n    /**\r\n     * Sets the current draw mode.\r\n     * \r\n     * 0: none\r\n     * 1: walls\r\n     * 2: weights\r\n     * 3: start\r\n     * 4: target\r\n     * \r\n     * @param {int} mode new draw mode\r\n     */\r\n    setDrawMode (mode) { \r\n        if (this.state.drawMode === mode) mode = 0;\r\n        this.setState({drawMode: mode}); \r\n    }\r\n\r\n    /**\r\n     * Visualizes a given pathfinding algorithm. Uses the current state of\r\n     * the grid of nodes.\r\n     * \r\n     * @param {pathfindAlgorithms} algorithm pathfinding algorithm\r\n     * @param {boolean} diagonalNeighbors\r\n     * @param {int} speed time in miliseconds between visit animations\r\n     */\r\n    visualizePathfind (algorithm, diagonalNeighbors, speed) {\r\n        if (!this.state.interactable) return;\r\n\r\n        this.setState({drawMode: 0});\r\n        this.clearPaths();\r\n        this.softRebuildGrid();\r\n\r\n        const grid = this.state.grid;\r\n        const start = grid[this.state.startNode[0]][this.state.startNode[1]];\r\n        const target = grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n\r\n        var visitedNodes = [];\r\n        switch (algorithm) {\r\n            case pathfindAlgorithms.DIJKSTRA:\r\n                visitedNodes = dijkstra(grid, start, target, diagonalNeighbors);\r\n                break;\r\n            case pathfindAlgorithms.ASTAR:\r\n                visitedNodes = aStar(grid, start, target, diagonalNeighbors);\r\n                break;\r\n            case pathfindAlgorithms.BFS:\r\n                visitedNodes = breadthFirstSearch(grid, start, target, diagonalNeighbors);\r\n                break;\r\n            case pathfindAlgorithms.DFS:\r\n                visitedNodes = depthFirstSearch(grid, start, target, diagonalNeighbors);\r\n                break;\r\n            case pathfindAlgorithms.DEV:\r\n                visitedNodes = devAlg(grid, start, target, diagonalNeighbors);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        const shortestPath = getShortestPathNodes(target);\r\n        const totalCost = getShortestPathCost(target);\r\n\r\n        this.updateAlgorithmInfo(visitedNodes.length, shortestPath.length, totalCost);\r\n\r\n        this.animateSearch(visitedNodes, shortestPath, speed);\r\n    }\r\n\r\n    /**\r\n     * Animates the process of the pathfinding algorithm. Updates the class\r\n     * names of the nodes to change their appearance.\r\n     * \r\n     * @param {Array} visitedNodes array of visited nodes in order\r\n     * @param {Array} shortestPath array of shortest path nodes in order\r\n     * @param {int} speed time in miliseconds between visit animations\r\n     */\r\n    animateSearch (visitedNodes, shortestPath, speed) {\r\n        const isInstant = speed === 0;\r\n        if (!speed) speed = VISITED_SPEED;\r\n\r\n        if (isInstant) {\r\n            for (let i = 0; i < visitedNodes.length; i++) {\r\n                const node = visitedNodes[i];\r\n                this.drawVisitedNode(node, isInstant);\r\n            }\r\n            this.animatePath(shortestPath, isInstant);\r\n        } else {\r\n            this.setState({interactable: false});\r\n\r\n            for (let i = 0; i < visitedNodes.length; i++) {\r\n                setTimeout(() => {\r\n                    const node = visitedNodes[i];\r\n                    this.drawVisitedNode(node, isInstant);\r\n                }, speed * i);\r\n            }\r\n            setTimeout(() => { this.animatePath(shortestPath, isInstant); }, speed * visitedNodes.length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animates the shortest path from the start node to the target node.\r\n     * Updates the class names of the nodes to change their appearance.\r\n     * \r\n     * @param {Array} shortestPath array of shortest path nodes in order \r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    animatePath (shortestPath, isInstant) {\r\n        if (isInstant) {\r\n            for (let i = 1; i < shortestPath.length; i++) {\r\n                const node = shortestPath[i];\r\n                this.drawPathNode(node, isInstant);\r\n            }\r\n            setTimeout(() => { this.updateGridState() }, 0);\r\n        } else {\r\n            for (let i = 0; i < shortestPath.length; i++) {\r\n                setTimeout(() => {\r\n                    const node = shortestPath[i];\r\n                    this.drawPathNode(node, isInstant)\r\n                }, PATH_SPEED * i);\r\n            }\r\n            setTimeout(() => { \r\n                this.updateGridState();\r\n                this.setState({interactable: true});\r\n            }, (PATH_SPEED * shortestPath.length) + 1000);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual algorithm pathfind information.\r\n     * \r\n     * @param {int} visitedNodes amount of nodes visited\r\n     * @param {int} pathNodes amount of nodes in path\r\n     * @param {int} totalCost total cost of shortest path\r\n     */\r\n    updateAlgorithmInfo (visitedNodes, pathNodes, totalCost) {\r\n        if (pathNodes <= 1) pathNodes = 0;\r\n        if (totalCost <= 1) totalCost = 0;\r\n\r\n        document.getElementById(\"pv-stats-visited\").innerHTML = `${visitedNodes}`;\r\n        document.getElementById(\"pv-stats-path\").innerHTML = `${pathNodes}`;\r\n        document.getElementById(\"pv-stats-weighted\").innerHTML = `${totalCost}`;\r\n    }\r\n\r\n    /**\r\n     * Animates a generated maze.\r\n     * \r\n     * @param {mazeAlgorithms} algorithm maze algorithm to use\r\n     */\r\n    animateMaze (algorithm) {\r\n        var maze = [];\r\n\r\n        switch (algorithm) {\r\n            case mazeAlgorithms.RECURSIVE_DEVISION:\r\n                maze = recursiveDevision(ROW_COUNT, COL_COUNT);\r\n                break;\r\n            case mazeAlgorithms.RANDOM_WALL:\r\n                maze = randomWallMaze(ROW_COUNT, COL_COUNT);\r\n                break;\r\n            case mazeAlgorithms.RANDOM_WEIGHT:\r\n                maze = randomWeightMaze(ROW_COUNT, COL_COUNT);\r\n                break;\r\n            case mazeAlgorithms.RANDOM_WALL_WEIGHT:\r\n                maze = randomWallWeightMaze(ROW_COUNT, COL_COUNT);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        if (!this.state.interactable) return;\r\n        this.setState({interactable: false});\r\n        this.clearGrid();\r\n\r\n        for (let i = 0; i < maze.length; i++) {\r\n            setTimeout(() => {\r\n                const node = this.state.grid[maze[i][0]][maze[i][1]];\r\n                if (maze[i][2]) this.drawWeightNode(node, true);\r\n                else this.drawWallNode(node, true);\r\n            }, MAZE_SPEED * i);\r\n        }\r\n        setTimeout(() => {\r\n            this.updateGridState();\r\n            this.setState({interactable: true});\r\n        }, MAZE_SPEED * maze.length);\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Rebuilds the grid.\r\n     */\r\n    componentDidMount () { this.rebuildGrid(); }\r\n\r\n    /**\r\n     * Handles a mouse down event on a node. If we are placing the start or\r\n     * target node, update the node location and return. Otherwise, updates\r\n     * the node based on the current draw mode.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseDown (row, col) {\r\n        if (!this.state.interactable) return;\r\n        this.setState({mouseIsDown: true});\r\n\r\n        const grid = this.state.grid;\r\n        const node = grid[row][col];\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        switch (this.state.drawMode) {\r\n            case 1: // Wall\r\n                const isWall = node.isWall;\r\n                this.drawWallNode(node, !isWall);\r\n                this.setState({drawWall: !isWall});\r\n                break;\r\n            case 2: // Weight\r\n                const isWeight = node.cost !== 1;\r\n                this.drawWeightNode(node, !isWeight);\r\n                this.setState({drawWeight: !isWeight});\r\n                break;\r\n            case 3: // Start\r\n                this.clearPaths();\r\n                this.drawStartNode(node);\r\n                this.setState({drawMode: 0});\r\n                break;\r\n            case 4: // Target\r\n                this.clearPaths();\r\n                this.drawTargetNode(node);\r\n                this.setState({drawMode: 0});\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse up event. Sets the state so that nothing\r\n     * can be drawn.\r\n     */\r\n    handleMouseUp () {\r\n        if (!this.state.mouseIsDown) return;\r\n\r\n        this.updateGridState();\r\n\r\n        this.setState({\r\n            mouseIsDown: false,\r\n            drawWall: null,\r\n            drawWeight: null,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse enter event into a node. If the mouse is not down,\r\n     * return. Otherwise, updates the node based on the current draw mode.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseEnter (row, col) {\r\n        if (!this.state.interactable) return;\r\n\r\n        const grid = this.state.grid;\r\n        const node = grid[row][col];\r\n\r\n        const isWall = node.isWall;\r\n        const isWeight = node.cost !== 1;\r\n\r\n        const isPreview = !isWall && !isWeight && !node.isStart && !node.isTarget;\r\n\r\n        switch (this.state.drawMode) {\r\n            case 1:\r\n                if (this.state.mouseIsDown && isWall !== this.state.drawWall) {\r\n                    this.drawWallNode(node, !isWall);\r\n                } else if (!this.state.mouseIsDown && isPreview) this.updateNodeVisual(node, nodeTypes.WALL_PREVIEW);\r\n                break;\r\n            case 2:\r\n                if (this.state.mouseIsDown && isWeight !== this.state.drawWeight) {\r\n                    this.drawWeightNode(node, !isWeight);\r\n                } else if (!this.state.mouseIsDown && isPreview) this.updateNodeVisual(node, nodeTypes.WEIGHT_PREVIEW);\r\n                break; \r\n            case 3:\r\n                if (isPreview) this.updateNodeVisual(node, nodeTypes.START_PREVIEW);\r\n                break;\r\n            case 4:\r\n                if (isPreview) this.updateNodeVisual(node, nodeTypes.TARGET_PREVIEW);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse leave event from a node.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseLeft (row, col) {\r\n        if (this.state.mouseIsDown || this.state.drawMode === 0 || !this.state.interactable) return;\r\n        \r\n        const node = this.state.grid[row][col];\r\n\r\n        if (node.isWall || node.cost !== 1 || node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(node, node.curVisual);\r\n    }\r\n\r\n    /**\r\n     * Handles an animation end event of a node. Updates the class name of the\r\n     * node to the instant class version.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    handleAnimationEnd (node) {\r\n        const type = this.getNodeVisual(node);\r\n        switch (type) {\r\n            case nodeTypes.START:\r\n                this.updateNodeVisual(node, nodeTypes.START_INSTANT);\r\n                break;\r\n            case nodeTypes.TARGET:\r\n                this.updateNodeVisual(node, nodeTypes.TARGET_INSTANT);\r\n                break;\r\n            case nodeTypes.WALL:\r\n                this.updateNodeVisual(node, nodeTypes.WALL_INSTANT);\r\n                break;\r\n            case nodeTypes.WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.WEIGHT_INSTANT);\r\n                break;\r\n            case nodeTypes.VISITED:\r\n                this.updateNodeVisual(node, nodeTypes.VISITED_INSTANT);\r\n                break;\r\n            case nodeTypes.VISITED_WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT_INSTANT);\r\n                break;\r\n            case nodeTypes.PATH:\r\n                this.updateNodeVisual(node, nodeTypes.PATH_INSTANT);\r\n                break;\r\n            case nodeTypes.PATH_WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT_INSTANT);\r\n                break;\r\n            default:\r\n                this.updateNodeVisual(node, nodeTypes.NODE);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the pathfinding visualizer component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        //console.log(this.state.grid);\r\n\r\n        return (\r\n            <div className=\"pathfind-vis\">\r\n                <div className=\"pathfind-menu\">\r\n                    <PathfindMenu pathfinder={this} />\r\n                </div>\r\n                <div \r\n                className=\"grid\" \r\n                onMouseUp={() => this.handleMouseUp()}\r\n                onMouseLeave={() => this.handleMouseUp()}\r\n                onContextMenu={(e) => e.preventDefault()}\r\n                onDragStart={(e) => e.preventDefault()}\r\n                >\r\n                    {Array.from(this.state.grid).map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx} className=\"grid-row\">\r\n                                {Array.from(row).map((node, nodeIdx) => {\r\n                                    const {row, col, isStart, isTarget} = node;\r\n                                    return (\r\n                                        <Node key={nodeIdx}\r\n                                        row={row}\r\n                                        col={col}\r\n                                        isStart={isStart}\r\n                                        isTarget={isTarget}\r\n                                        mousePressed={(row, col) => this.handleMouseDown(row, col)}\r\n                                        mouseEntered={(row, col) => this.handleMouseEnter(row, col)}\r\n                                        mouseLeft={(row, col) => this.handleMouseLeft(row, col)}\r\n                                        animationEnded={() => this.handleAnimationEnd(node)}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindingVisualizer;","// Unsorted bar color\r\nconst UNSORTED = \"pink\";\r\n// Comparing bar color\r\nconst COMPARE = \"red\";\r\n// Sorted bar color\r\nconst SORTED = \"green\";\r\n// Swapping bar color\r\nconst SWAP = \"orange\";\r\n// Minimum bar color\r\nconst MIN = \"purple\";\r\n\r\n// Sorting algorithms\r\nexport const sortAlgorithms = {\r\n    SELECTION: \"Selection Sort\",\r\n    INSERTION: \"Insertion Sort\",\r\n    MERGE: \"Merge Sort\",\r\n}\r\n\r\n/**\r\n * Executes a Selection Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function selectionSort(array) {\r\n    const animations = [];\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n        var min = i;\r\n        animations.push([[MIN, min]]);\r\n        var newMin = true;\r\n        for (let k = i + 1; k < array.length; k++) {\r\n            if (newMin) {\r\n                animations.push([[COMPARE, k]]);\r\n                newMin = false;\r\n            } else animations.push([[UNSORTED, k-1], [COMPARE, k]]);\r\n            \r\n            if (array[min] > array[k]) {\r\n                animations.push([[UNSORTED, min], [MIN, k]]);\r\n                min = k;\r\n                newMin = true;\r\n            }\r\n        }\r\n        if (min !== i) {\r\n            animations.push([[UNSORTED, array.length-1], [SWAP, min, i], [null, min, array[i]], [null, i, array[min]]]);\r\n            animations.push([[UNSORTED, min], [SORTED, i]]);\r\n            var temp = array[i];\r\n            array[i] = array[min];\r\n            array[min] = temp;\r\n        } else animations.push([[UNSORTED, array.length-1], [SORTED, i]]);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Executes a Insertion Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function insertionSort(array) {\r\n    const animations = [];\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n        var cur = array[i];\r\n        var j = i - 1;\r\n        \r\n        animations.push([[COMPARE, j, i]]);\r\n        while (j >= 0) {\r\n            if (j + 2 >= array.length) animations.push([[COMPARE, j, j + 1]]);\r\n            else animations.push([[UNSORTED, j + 2], [COMPARE, j, j + 1]]);\r\n            if (array[j] <= cur) {\r\n                animations.push([[UNSORTED, j, j + 1]]);\r\n                break;\r\n            }\r\n            animations.push([[SWAP, j, j + 1], [null, j + 1, array[j]], [null, j, cur]]);\r\n            array[j + 1] = array[j];\r\n            j--;\r\n        }\r\n        if (j + 2 >= array.length) animations.push([[UNSORTED, j + 1]]);\r\n        else animations.push([[UNSORTED, j + 1, j + 2]]);\r\n        animations.push([[null, j + 1, cur]]);\r\n        array[j+1] = cur;\r\n    }\r\n    for (let i = array.length - 1; i >= 0; i--) animations.push([[SORTED, i]]);\r\n\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Executes a Merge Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function mergeSort(array) {\r\n    const animations = [];\r\n    array = doMergeSort(animations, array);\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Actual recursive Merge Sort function.\r\n * \r\n * @param {Array} animations array of animations\r\n * @param {Array} array array of values \r\n * \r\n * @returns sorted array\r\n */\r\nfunction doMergeSort(animations, array) {\r\n    const middle = array.length / 2;\r\n    if (array.length < 2) return array;\r\n    const left = array.splice(0, middle);\r\n    return merge(animations, doMergeSort(animations, left), doMergeSort(animations, array));\r\n}\r\n\r\n/**\r\n * Merge Sort helper function.\r\n * \r\n * @param {Array} animations array of animations\r\n * @param {Array} left left array\r\n * @param {Array} right right array\r\n * \r\n * @returns merged array\r\n */\r\nfunction merge (animations, left, right) {\r\n    var array = [];\r\n\r\n    while (left.length && right.length) {\r\n        if (left[0] < right[0]) array.push(left.shift());\r\n        else array.push(right.shift());\r\n    }\r\n    return [...array, ...left, ...right];\r\n}","import React from 'react';\r\n\r\nimport { sortAlgorithms } from '../Algorithms/SortAlgorithms';\r\n\r\n/**\r\n * Represents the settings bar in the menu of the sorting visualizer\r\n * component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SVisualizerSettings extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Currently selected sorting algorithm\r\n            curAlgorithm: null,\r\n            // Is the randomize button dropdown open?\r\n            randomizeDropdownHidden: true,\r\n            // Is the algorithm button dropdown open?\r\n            algorithmDropdownHidden: true,\r\n            // Is the visualize button dropdown open?\r\n            visualizeDropdownHidden: true,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the current algorithm for the information text as a string.\r\n     * \r\n     * @returns the string\r\n     */\r\n    getCurrentAlgorithmText() {\r\n        if (!this.state.curAlgorithm) return \"Select an Algorithm\";\r\n        return this.state.curAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * Renders the settings bar component.\r\n     * \r\n     * @returns a <div> element representing the settings bar\r\n     */\r\n    render () {\r\n\r\n        return (\r\n            <div className=\"sv-menu-bar\">\r\n                <div className=\"randomize-dropdown dropdown-animate\">\r\n                    <div className=\"sv-menu-bar-button\" \r\n                    onClick={() => this.props.sorter.reGenerateArray()}\r\n                    onMouseEnter={() => this.setState({randomizeDropdownHidden: false})}>\r\n                    <span>Randomize</span></div>\r\n                    <div className=\"sv-menu-dropdown-content randomize-drop-content dropdown-animate\"\r\n                    hidden={this.state.randomizeDropdownHidden}\r\n                    onClick={() => this.setState({randomizeDropdownHidden: true})}>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.reGenerateArray(10)}\r\n                        >Small Array</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.reGenerateArray(50)}\r\n                        >Medium Array</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.reGenerateArray(100)}\r\n                        >Large Array</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"algorithm-dropdown dropdown-animate\">\r\n                    <div className=\"sv-menu-bar-button\" \r\n                    onMouseEnter={() => this.setState({algorithmDropdownHidden: false})}>\r\n                    <span>Algorithm</span></div>\r\n                    <div className=\"sv-menu-dropdown-content algorithm-drop-content dropdown-animate\"\r\n                    hidden={this.state.algorithmDropdownHidden}\r\n                    onClick={() => this.setState({algorithmDropdownHidden: true})}>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: sortAlgorithms.SELECTION})}\r\n                        >Selection Sort</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: sortAlgorithms.INSERTION})}\r\n                        >Insertion Sort</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: sortAlgorithms.MERGE})}\r\n                        >Merge Sort</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"visualize-dropdown dropdown-animate\">\r\n                    <div className=\"sv-menu-bar-button\" \r\n                    onClick={() => this.props.sorter.visualizeSort(this.state.curAlgorithm)}\r\n                    onMouseEnter={() => this.setState({visualizeDropdownHidden: false})}>\r\n                    <span>Sort</span></div>\r\n                    <div className=\"sv-menu-dropdown-content visualize-drop-content dropdown-animate\"\r\n                    hidden={this.state.visualizeDropdownHidden}\r\n                    onClick={() => this.setState({visualizeDropdownHidden: true})}>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.visualizeSort(this.state.curAlgorithm, 500)}\r\n                        >Very Slow</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.visualizeSort(this.state.curAlgorithm, 100)}\r\n                        >Slow</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.visualizeSort(this.state.curAlgorithm, 50)}\r\n                        >Fast</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.visualizeSort(this.state.curAlgorithm, 10)}\r\n                        >Very Fast</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"sv-curalg dropdown-animate\">{this.getCurrentAlgorithmText()}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SVisualizerSettings;","import React from 'react';\r\n\r\nimport './SortMenu.css';\r\n\r\nimport SVisualizerSettings from './SVisualizerSettings';\r\n\r\n/**\r\n * Represents the top menu of the sorting visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SortMenu extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n \r\n    /**\r\n     * Renders the menu component.\r\n     * \r\n     * @returns a <div> element representing the menu\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"sort-menu\">\r\n                <SVisualizerSettings sorter={this.props.sorter} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortMenu;","import React from 'react';\r\n\r\nimport './SortingVisualizer.css';\r\n\r\nimport SortMenu from './Menu/SortMenu';\r\nimport { selectionSort, insertionSort, mergeSort, sortAlgorithms } from './Algorithms/SortAlgorithms';\r\n\r\n// Size of array\r\nconst ARRAY_SIZE = 100;\r\n// Minimum value in array\r\nconst MIN_VALUE = 5;\r\n// Maximum value in array\r\nconst MAX_VALUE = 500;\r\n// Default speed between animations in miliseconds\r\nconst DEFAULT_SPEED = 10;\r\n\r\n// Unsorted bar color\r\nconst UNSORTED = \"pink\";\r\n\r\n/**\r\n * Represents the sorting visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SortingVisualizer extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        // Array of bar values\r\n        this.state = { array: [] };\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the array with new random values.\r\n     * \r\n     * @param {int} size size of array\r\n     * @param {int} min minimum value\r\n     * @param {int} max maximum value\r\n     */\r\n    rebuildArray (size, min, max) {\r\n        const array = [];\r\n        for (let i = 0; i < size; i++) { array.push(this.createBar(min, max)); }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Creates a new bar with a random value.\r\n     * \r\n     * @param {int} min lower bound of value\r\n     * @param {int} max upper bound of value\r\n     * \r\n     * @returns the created bar\r\n     */\r\n    createBar (min, max) { return Math.floor(Math.random() * (max - min + 1) + min); }\r\n\r\n    /**\r\n     * Rebuilds the array and regenerates the visual array bars.\r\n     * \r\n     * @param {int} size size of new array\r\n     */\r\n    reGenerateArray (size) { \r\n        if (!size) size = ARRAY_SIZE;\r\n\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        for (let i = 0; i < this.state.array.length; i++) { bars[i].style.backgroundColor = UNSORTED; }\r\n\r\n        const array = this.rebuildArray(size, MIN_VALUE, MAX_VALUE);\r\n        this.setState({array: array}); \r\n    }\r\n\r\n    /**\r\n     * Visualizes a given sorting algorithm.\r\n     * \r\n     * @param {sortAlgorithms} algorithm sorting algorithm\r\n     * @param {int} speed time between animations in miliseconds\r\n     */\r\n    visualizeSort (algorithm, speed) {\r\n        const array = this.state.array;\r\n        var animations = [];\r\n\r\n        switch (algorithm) {\r\n            case sortAlgorithms.SELECTION:\r\n                animations = selectionSort(array);\r\n                break;\r\n            case sortAlgorithms.INSERTION:\r\n                animations = insertionSort(array);\r\n                break;\r\n            case sortAlgorithms.MERGE:\r\n                animations = mergeSort(array);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        this.animateSort(animations, speed);\r\n    }\r\n\r\n    /**\r\n     * Animates the process of the sorting algorithm. Iterates through an\r\n     * array of animation steps generated by the algorithm.\r\n     * \r\n     * @param {Array} animations array of animations\r\n     * @param {int} speed time between animations in miliseconds\r\n     */\r\n    animateSort (animations, speed) {\r\n        if (!speed) speed = DEFAULT_SPEED;\r\n\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n\r\n        var i = 0\r\n        for (const step of animations) {\r\n            setTimeout(() => {\r\n                for (const action of step) { \r\n                    if (action[0] === null) {\r\n                        bars[action[1]].style.height = `${action[2]}px`;\r\n                    } else {\r\n                        for (let k = 1; k < action.length; k++) {\r\n                            bars[action[k]].style.backgroundColor = action[0]; \r\n                        }\r\n                    }\r\n                }\r\n            }, speed * i++);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Rebuilds the array.\r\n     */\r\n    componentDidMount () {\r\n        const array = this.rebuildArray(ARRAY_SIZE, MIN_VALUE, MAX_VALUE);\r\n        this.setState({array: array});\r\n    }\r\n\r\n    /**\r\n     * Renders the sorting visualizer component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        //console.log(this.state.array);\r\n\r\n        return (\r\n            <div className=\"sort-vis\">\r\n                <div className=\"sort-menu\">\r\n                    <SortMenu sorter={this}/>\r\n                </div>\r\n                <div className=\"array\">\r\n                    {Array.from(this.state.array).map((bar, barIdx) => {\r\n                        return (\r\n                            <div className=\"bar\"\r\n                            key={barIdx}\r\n                            style={{\r\n                                backgroundColor: UNSORTED,\r\n                                height: `${bar}px`,\r\n                            }}/>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\r\n\r\nimport './NavBar.css';\r\n\r\nimport Home from '../Home/Home';\r\nimport PathfindingVisualizer from '../PathfindingVisualizer/PathfindingVisualizer';\r\nimport SortingVisualizer from '../SortingVisualizer/SortingVisualizer';\r\n\r\n// Default tab to display on page load\r\nconst DEFAULT_TAB = \"Home\";\r\n\r\n/**\r\n * Represents the navigation bar at the top of the page. Each tab\r\n * contains one component of the project.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass NavBar extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = { \r\n            navigateDropdownHidden: true,\r\n            curTab: DEFAULT_TAB,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Changes the currently displayed tab.\r\n     * \r\n     * @param {string} tab tab to change to\r\n     */\r\n    changeTab (tab) {\r\n        const elements = document.getElementsByClassName(\"tab-content\");\r\n        for (let i = 0; i < elements.length; i++) elements[i].style.display = \"none\";\r\n        document.getElementById(tab).style.display = \"block\";\r\n        this.setState({curTab: tab});\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Sets the current active tab.\r\n     */\r\n    componentDidMount () { document.getElementById(DEFAULT_TAB).style.display = \"block\"; }\r\n\r\n    /**\r\n     * Renders the navigation bar.\r\n     * \r\n     * @returns a <div> element representing the navigation bar\r\n     */\r\n    render () {\r\n        return (\r\n            <div>\r\n                <div className=\"topmenu\">\r\n                    <div className=\"topmenu-curtab\" \r\n                    onMouseEnter={() => this.setState({navigateDropdownHidden: false})}>\r\n                    <span>{this.state.curTab}</span>\r\n                        <div className=\"topmenu-tablist topmenu-tablist-animate\"\r\n                        hidden={this.state.navigateDropdownHidden}>\r\n                            <div className=\"topmenu-tab\"\r\n                            onClick={() => this.changeTab(\"Home\")}\r\n                            >Home</div>\r\n                            <div className=\"topmenu-tab\"\r\n                            onClick={() => this.changeTab(\"Pathfinding Visualizer\")}\r\n                            >Pathfinding Visualizer</div>\r\n                            <div className=\"topmenu-tab\"\r\n                            onClick={() => this.changeTab(\"Sorting Visualizer\")}\r\n                            >Sorting Visualizer</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div id=\"Home\" className=\"tab-content\">\r\n                        <Home changeTab={(tab) => this.changeTab(tab)}/>\r\n                    </div>\r\n                    <div id=\"Pathfinding Visualizer\" className=\"tab-content\">\r\n                        <PathfindingVisualizer />\r\n                    </div>\r\n                    <div id=\"Sorting Visualizer\" className=\"tab-content\">\r\n                        <SortingVisualizer />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import './App.css';\r\nimport NavBar from './NavBar/NavBar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar></NavBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}