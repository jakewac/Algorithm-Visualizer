{"version":3,"sources":["Home.js","utils.js","PathfindingVisualizer/PathfindAlgorithms.js","PathfindingVisualizer/MazeAlgorithms.js","PathfindingVisualizer/Node.js","PathfindingVisualizer/PathfindMenu.js","PathfindingVisualizer/PathfindingVisualizer.js","SortingVisualizer/SortAlgorithms.js","SortingVisualizer/SortMenu.js","SortingVisualizer/SortingVisualizer.js","NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","state","Card","CardHeader","href","CardBody","React","Component","random","min","max","Math","floor","QElement","element","priority","this","PriorityQueue","items","i","length","has","contains","splice","enqueue","qElement","contain","push","isEmpty","shift","str","pathfindAlgorithms","dijkstra","grid","start","target","visitedNodes","unvisitedNodes","nodes","row","node","getAllNodes","distance","sort","a","b","curNode","isWall","Infinity","isVisited","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","cost","previousNode","neighbors","col","filter","recursiveDevision","rows","cols","walls","r","c","innerWalls","buildWalls","h","minC","maxC","minR","maxR","rGap","cGap","addVWall","addHWall","numHoles","holes","hole","includes","Node","nodeType","type","isStart","isTarget","id","className","onMouseDown","mousePressed","onMouseEnter","mouseEntered","onMouseLeave","mouseLeft","onAnimationEnd","animationEnded","PathfindMenu","curAlgorithm","mazeDropdownHidden","clearDropdownHidden","algorithmDropdownHidden","pathfindDropdownHidden","drawMode","document","getElementById","pathfinder","setDrawMode","onClick","animateMaze","setState","hidden","clearGrid","clearWalls","clearWeights","clearPaths","resetStartTarget","visualizePathfind","keyNodePressed","keyAnimationEnded","getCurrentAlgorithmText","INIT_START","INIT_TARGET","nodeTypes","PathfindingVisualizer","weightCost","mouseIsDown","interactable","drawWall","drawWeight","startNode","targetNode","curRow","createNode","oldGrid","curVisual","rootDistance","getNodeVisual","curStart","updateNodeVisual","curTarget","isWeight","isInstant","updateGridState","updateAlgorithmInfo","initStart","initTarget","drawStartNode","drawTargetNode","weight","mode","algorithm","speed","softRebuildGrid","dequeue","manhattanD","abs","minDistance","setPriority","aStar","breadthFirstSearch","pop","depthFirstSearch","shortestPath","nodesInShortestPath","currentNode","unshift","getShortestPathNodes","totalCost","getShortestPathCost","animateSearch","drawVisitedNode","animatePath","setTimeout","drawPathNode","pathNodes","innerHTML","maze","drawWallNode","rebuildGrid","drawWeightNode","isPreview","onMouseUp","handleMouseUp","onContextMenu","e","preventDefault","onDragStart","Array","from","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseLeft","handleAnimationEnd","UNSORTED","COMPARE","SORTED","SWAP","MIN","sortAlgorithms","mergeSort","array","animations","doMergeSort","middle","left","right","merge","SortMenu","visualizeDropdownOpen","Container","Row","Col","ButtonDropdown","isOpen","toggle","toggleVisualize","Button","color","DropdownToggle","split","DropdownMenu","DropdownItem","sorter","visualizeSort","reGenerateArray","SortingVisualizer","size","createBar","rebuildArray","bars","getElementsByClassName","style","backgroundColor","newMin","k","temp","selectionSort","cur","j","insertionSort","animateSort","step","action","height","bar","barIdx","NavBar","activeTab","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.247ea57d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardHeader, CardBody\r\n} from 'reactstrap';\r\n\r\n/**\r\n * Represents the home tab component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass Home extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the home tab component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <CardHeader>\r\n                        Jake Waclawski<br></br>\r\n                        <a href=\"https://github.com/jmw3638/Pathfinder\">GitHub</a>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","/**\r\n * Generates a random integer between two given values.\r\n * \r\n * @param {int} min minimum value\r\n * @param {int} max maximum value \r\n * \r\n * @returns the generated integer\r\n */\r\nexport function random(min, max) { return Math.floor(Math.random() * (max - min + 1) + min); }\r\n\r\n/**\r\n * User defined PriorityQueue helper class. Stores element and its priority.\r\n */\r\nclass QElement { \r\n    constructor(element, priority) \r\n    { \r\n        this.element = element; \r\n        this.priority = priority; \r\n    } \r\n} \r\n  \r\n/**\r\n * Represents a priority queue data structure.\r\n */\r\nclass PriorityQueue { \r\n    constructor() { \r\n        this.items = []; \r\n    } \r\n  \r\n    /**\r\n     * Determines if an element is in the priority queue.\r\n     * \r\n     * @param {Object} element element to search for\r\n     * \r\n     * @returns the index of the element, false if not found\r\n     */\r\n    contains(element) {\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            if(this.items[i].element === element) return i;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets an element's priority.\r\n     * \r\n     * @param {Object} element the element\r\n     * @param {int} priority new priority\r\n     */\r\n    setPriority(element, priority) {\r\n        var has = this.contains(element);\r\n        if(!has) return;\r\n        this.items.splice(has, 1);\r\n        this.enqueue(element, priority);\r\n    }\r\n\r\n    /**\r\n     * Adds an element to the priority queue with a given priority.\r\n     * \r\n     * @param {Object} element \r\n     * @param {int} priority \r\n     */\r\n    enqueue(element, priority) \r\n    { \r\n        var qElement = new QElement(element, priority); \r\n        var contain = false; \r\n\r\n        for (var i = 0; i < this.items.length; i++) { \r\n            if (this.items[i].priority > qElement.priority) { \r\n                this.items.splice(i, 0, qElement); \r\n                contain = true; \r\n                break; \r\n            } \r\n        } \r\n\r\n        if (!contain) this.items.push(qElement);  \r\n    } \r\n\r\n    /**\r\n     * Removes and returns the first element from the priority queue.\r\n     * \r\n     * @returns the removed element, false if the queue is empty\r\n     */\r\n    dequeue() \r\n    { \r\n        if (this.isEmpty()) return false; \r\n        return this.items.shift(); \r\n    } \r\n\r\n\r\n    /**\r\n     * Returns the highest priority element in the queue without removing it.\r\n     * \r\n     * @returns highest priority element, false if empty\r\n     */\r\n    front() \r\n    { \r\n        if (this.isEmpty()) return false; \r\n        return this.items[0]; \r\n    } \r\n\r\n    /**\r\n     * Returns the lowest priority element in the queue without removing it.\r\n     * \r\n     * @returns lowest priority element, false if empty\r\n     */\r\n    rear() \r\n    {  \r\n        if (this.isEmpty()) return false; \r\n        return this.items[this.items.length - 1]; \r\n    } \r\n\r\n    /**\r\n     * Determines if the priority queue is empty or not.\r\n     * \r\n     * @returns if the priority queue is empty\r\n     */\r\n    isEmpty() { return this.items.length === 0; } \r\n\r\n\r\n    /**\r\n     * Prints all elements of the priority queue.\r\n     * \r\n     * @returns the generated print string\r\n     */\r\n    printPQueue() \r\n    { \r\n        var str = \"\"; \r\n        for (var i = 0; i < this.items.length; i++) str += this.items[i].element + \" \"; \r\n        return str; \r\n    } \r\n} \r\n\r\nexport default PriorityQueue;","import PriorityQueue from \"../utils\";\r\n\r\n// Pathfinding algorithms\r\nexport const pathfindAlgorithms = {\r\n    DIJKSTRA: \"Dijkstra\",\r\n    ASTAR: \"A-Star\",\r\n    BFS: \"Breadth First Search\",\r\n    DFS: \"Depth First Search\",\r\n}\r\n\r\n/**\r\n * Executes a Dijkstra's algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function dijkstra(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n        const curNode = unvisitedNodes.shift();\r\n        \r\n        if (!curNode) break;\r\n        if (curNode.isWall) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            neighbor.distance = curNode.distance + neighbor.cost;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes an A* (A-Star) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function aStar(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = new PriorityQueue();\r\n    unvisitedNodes.enqueue(start, 0);\r\n    start.distance = 0;\r\n    start.rootDistance = 0;\r\n    while (!unvisitedNodes.isEmpty()) {\r\n        const curNode = unvisitedNodes.dequeue().element;\r\n\r\n        if (curNode.isWall) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            const manhattanD = 2 * (Math.abs(target.row - neighbor.row) + (Math.abs(target.col - neighbor.col)));\r\n            neighbor.rootDistance = Math.min(neighbor.rootDistance, curNode.rootDistance + neighbor.cost);\r\n            const minDistance = Math.min(neighbor.distance, neighbor.rootDistance + manhattanD);\r\n            if (minDistance !== neighbor.distance) {\r\n                neighbor.distance = minDistance;\r\n                neighbor.previousNode = curNode;\r\n                if (unvisitedNodes.contains(neighbor)) unvisitedNodes.setPriority(neighbor, minDistance);\r\n            }\r\n            if (!unvisitedNodes.contains(neighbor)) unvisitedNodes.enqueue(neighbor, neighbor.distance);\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes Breadth First Search (BFS) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function breadthFirstSearch(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.shift();\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.isVisited) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode === target) return visitedNodes; \r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n            \r\n\r\n            neighbor.distance = curNode.distance + 1;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes a Depth First Search (DFS) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function depthFirstSearch(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.pop();\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.isVisited) continue;\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n            curNode.isVisited = true;\r\n            visitedNodes.push(curNode);\r\n\r\n            neighbor.distance = curNode.distance + 1;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Gets all of the nodes in the grid.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * \r\n * @returns an array containing all of the nodes\r\n */\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) nodes.push(node);\r\n    }\r\n    return nodes;\r\n}\r\n\r\n/**\r\n * Gets the shortest path of nodes from the target node to \r\n * the start node.\r\n * \r\n * @param {Object} targetNode target node\r\n * \r\n * @returns an array of shortest path nodes in order\r\n */\r\nexport function getShortestPathNodes(targetNode) {\r\n    const nodesInShortestPath = [];\r\n    let currentNode = targetNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPath;\r\n}\r\n\r\n/**\r\n * Gets the total weighted cost of the shortest path.\r\n * \r\n * @param {Object} targetNode target node\r\n * \r\n * @returns the total cost\r\n */\r\nexport function getShortestPathCost(targetNode) {\r\n    const nodesInShortestPath = [];\r\n    let currentNode = targetNode;\r\n    let totalCost = 0;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPath.unshift(currentNode);\r\n        totalCost += currentNode.cost;\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return totalCost;\r\n}\r\n\r\n/**\r\n * Gets all unvisited neighbors of a given node.\r\n * \r\n * @param {Object} node node\r\n * @param {Array} grid grid of nodes\r\n * \r\n * @returns an array containing all unvisited neighbors\r\n */\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {row, col} = node;\r\n    \r\n    if (col > 0) neighbors.push(grid[row][col - 1]); // West\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // South\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); // East\r\n    if (row > 0) neighbors.push(grid[row - 1][col]); // North\r\n    \r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}","import { random } from '../utils';\r\n\r\n/**\r\n * Algorithm for generating a maze using recursive devision.\r\n * \r\n * @param {int} rows number of rows\r\n * @param {int} cols number of columns\r\n * \r\n * @returns a grid of boolean values, true if wall node\r\n */\r\nexport function recursiveDevision(rows, cols) {\r\n    var walls = [];\r\n\r\n    //walls = innerWalls(walls, true, 0, cols-1, 0, rows-1);\r\n    walls = buildWalls(walls, rows, cols);\r\n    \r\n    return walls;\r\n}\r\n\r\n/**\r\n * Creates walls around the border of the maze.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} rows amount of rows \r\n * @param {int} cols amount of columns\r\n * \r\n * @returns a grid of walls\r\n */\r\nfunction buildWalls(walls, rows, cols) {\r\n    for (var r = 0; r < rows; r++) {\r\n        if (r === 0 || r === (rows-1)) {\r\n            for (var c = 0; c < cols; c++) {\r\n                walls.push([r, c]);\r\n            }\r\n        } else {\r\n            walls.push([r, 0]);\r\n            walls.push([r, cols-1]);\r\n        }\r\n    }\r\n\r\n    walls = innerWalls(walls, true, 1, cols-2, 1, rows-2);\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Recursive function that builds the inner walls of the maze.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {boolean} h is horizontal wall\r\n * @param {int} minC lower column bound\r\n * @param {int} maxC upper column bound\r\n * @param {int} minR lower row bound\r\n * @param {int} maxR upper row bound\r\n * \r\n * @returns a grid of walls\r\n */\r\nfunction innerWalls(walls, h, minC, maxC, minR, maxR) {\r\n    const rGap = maxR - minR;\r\n    const cGap = maxC - minC;\r\n\r\n    if (maxR - minR <= 1) return walls; \r\n    if (maxC - minC <= 1) return walls; \r\n\r\n    var r = Math.floor(random(minR+1, maxR-1)/2)*2;\r\n    var c = Math.floor(random(minC+1, maxC-1)/2)*2;\r\n\r\n    // ^ xor: one or the other but not both\r\n    if (rGap <= 5 ^ cGap<= 5) {\r\n        if (rGap <= 5) {\r\n            walls = addVWall(walls, minR, maxR, c);\r\n\r\n            walls = innerWalls(walls, !h, minC, c-1, minR, maxR);\r\n            walls = innerWalls(walls, !h, c+1, maxC, minR, maxR);\r\n        }\r\n        if (cGap <= 5) {\r\n            walls = addHWall(walls, minC, maxC, r);\r\n    \r\n            walls = innerWalls(walls, !h, minC, maxC, minR, r-1);\r\n            walls = innerWalls(walls, !h, minC, maxC, r+1, maxR);\r\n        }\r\n        return walls;\r\n    } \r\n    if (h) {\r\n        walls = addHWall(walls, minC, maxC, r);\r\n\r\n        walls = innerWalls(walls, !h, minC, maxC, minR, r-1);\r\n        walls = innerWalls(walls, !h, minC, maxC, r+1, maxR);\r\n    } else {\r\n        walls = addVWall(walls, minR, maxR, c);\r\n\r\n        walls = innerWalls(walls, !h, minC, c-1, minR, maxR);\r\n        walls = innerWalls(walls, !h, c+1, maxC, minR, maxR);\r\n    }\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Builds a horizontal wall at a given row.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} minC lower column bound\r\n * @param {int} maxC upper column bound\r\n * @param {int} r row\r\n */\r\nfunction addHWall(walls, minC, maxC, r) {\r\n    const numHoles = random(1, (maxC - minC)/4);\r\n    const holes = [];\r\n    for (let i = 0; i < numHoles; i++) {\r\n        const hole = Math.floor(random(minC, maxC)/2)*2+1;\r\n        holes.push(hole);\r\n    }\r\n\r\n    for (var i = minC; i <= maxC; i++) if (!holes.includes(i)) walls.push([r, i]); \r\n    return walls;\r\n}\r\n\r\n/**\r\n * Builds a vertical wall at a given column.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} minR lower row bound\r\n * @param {int} maxR upper row bound\r\n * @param {int} c column \r\n */\r\nfunction addVWall(walls, minR, maxR, c) {\r\n    const numHoles = random(1, (maxR - minR)/4);\r\n    const holes = [];\r\n    for (let i = 0; i < numHoles; i++) {\r\n        const hole = Math.floor(random(minR, maxR)/2)*2+1;\r\n        holes.push(hole);\r\n    }\r\n\r\n    for (var i = minR; i <= maxR; i++) if (!holes.includes(i)) walls.push([i, c]); \r\n    return walls;\r\n}","import React from 'react';\r\n\r\nimport './Node.css';\r\n\r\n/**\r\n * Represents a grid node on the screen. Extra class names\r\n * can be applied to change the appearance of the node.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass Node extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the node.\r\n     * \r\n     * @returns a <div> element representing the node\r\n     */\r\n    render () {\r\n        const nodeType = this.props.type ? this.props.type :\r\n        this.props.isStart ? 'start' : \r\n        this.props.isTarget ? 'target' : \r\n        '';\r\n\r\n        return (\r\n            <div \r\n            id={`node-${this.props.row}-${this.props.col}`} \r\n            className={`node ${nodeType}`}\r\n            onMouseDown={() => this.props.mousePressed(this.props.row, this.props.col)}\r\n            onMouseEnter={() => this.props.mouseEntered(this.props.row, this.props.col)}\r\n            onMouseLeave={() => this.props.mouseLeft(this.props.row, this.props.col)}\r\n            onAnimationEnd={() => this.props.animationEnded(nodeType)}\r\n            /> \r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React from 'react';\r\n\r\nimport Node from './Node';\r\nimport { pathfindAlgorithms } from './PathfindAlgorithms';\r\n\r\n/**\r\n * Represents the top menu of the pathfinding visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindMenu extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Currently selected pathfinding algorithm\r\n            curAlgorithm: null,\r\n            // Is the maze button dropdown open?\r\n            mazeDropdownHidden: true,\r\n            // Is the clear button dropdown open?\r\n            clearDropdownHidden: true,\r\n            // Is the algorithm button dropdown open?\r\n            algorithmDropdownHidden: true,\r\n            // Is the pathfind button dropdown open?\r\n            pathfindDropdownHidden: true,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the current algorithm for the information text as a string.\r\n     * \r\n     * @returns the string\r\n     */\r\n    getCurrentAlgorithmText() {\r\n        if (!this.state.curAlgorithm) return \"None\";\r\n        return this.state.curAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * Runs the animation for the pressed node. Sets the appropriate draw mode.\r\n     * \r\n     * @param {string} id element id\r\n     * @param {string} className class name to set\r\n     * @param {int} drawMode draw mode to set\r\n     */\r\n    keyNodePressed (id, className, drawMode) {\r\n        document.getElementById(`node-${id}`).className = className;\r\n        if (drawMode || drawMode === 0) this.props.pathfinder.setDrawMode(drawMode);\r\n    }\r\n\r\n    /**\r\n     * Reverts the node state to the instant version.\r\n     * \r\n     * @param {string} id node element id\r\n     * @param {string} className class name to set\r\n     */\r\n    keyAnimationEnded (id, className) { document.getElementById(`node-${id}`).className = `node ${className}`; }\r\n    \r\n    /**\r\n     * Renders the menu component.\r\n     * \r\n     * @returns a <div> element representing the menu\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"pathfind-menu\">\r\n                <div className=\"pv-menu-bar\">\r\n                    <div className=\"pv-title\">Pathfinding Visualizer</div>\r\n                    <div className=\"maze-dropdown dropdown-animate\">\r\n                        <div className=\"pv-menu-bar-button\" \r\n                        onClick={() => this.props.pathfinder.animateMaze()}\r\n                        onMouseEnter={() => this.setState({mazeDropdownHidden: false})}>\r\n                        <span>Maze</span></div>\r\n                        <div className=\"pv-menu-dropdown-content maze-drop-content dropdown-animate\"\r\n                        hidden={this.state.mazeDropdownHidden}\r\n                        onClick={() => this.setState({mazeDropdownHidden: true})}>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.props.pathfinder.animateMaze()}\r\n                            >Recursive Devision</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"clear-dropdown dropdown-animate\">\r\n                        <div className=\"pv-menu-bar-button\" \r\n                        onClick={() => this.props.pathfinder.clearGrid()}\r\n                        onMouseEnter={() => this.setState({clearDropdownHidden: false})}>\r\n                        <span>Clear</span></div>\r\n                        <div className=\"pv-menu-dropdown-content clear-drop-content dropdown-animate\"\r\n                        hidden={this.state.clearDropdownHidden} \r\n                        onClick={() => this.setState({clearDropdownHidden: true})}>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.props.pathfinder.clearWalls()}\r\n                            >Clear Walls</div>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.props.pathfinder.clearWeights()}\r\n                            >Clear Weights</div>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.props.pathfinder.clearPaths()}\r\n                            >Clear Path</div>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.props.pathfinder.resetStartTarget()}\r\n                            >Reset Start/Target</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"algorithm-dropdown dropdown-animate\">\r\n                        <div className=\"pv-menu-bar-button\"\r\n                        onMouseEnter={() => this.setState({algorithmDropdownHidden: false})}\r\n                        onClick={() => this.setState({curAlgorithm: null})}>\r\n                        <span>Algorithm</span></div>\r\n                        <div className=\"pv-menu-dropdown-content alg-drop-content dropdown-animate\"\r\n                        hidden={this.state.algorithmDropdownHidden} \r\n                        onClick={() => this.setState({algorithmDropdownHidden: true})}>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.DIJKSTRA})}\r\n                            >Dijkstra</div>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.ASTAR})}\r\n                            >A* (A-Star)</div>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.BFS})}\r\n                            >Breadth First Search</div>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.DFS})}\r\n                            >Depth First Search</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"pathfind-dropdown dropdown-animate\">\r\n                        <div className=\"pv-menu-bar-button\" \r\n                        onMouseEnter={() => this.setState({pathfindDropdownHidden: false})}\r\n                        onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm)}>\r\n                        <span>Pathfind</span></div>\r\n                        <div className=\"pv-menu-dropdown-content pathfind-drop-content dropdown-animate\"\r\n                        hidden={this.state.pathfindDropdownHidden}\r\n                        onClick={() => this.setState({pathfindDropdownHidden: true})}>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, 100)}\r\n                            >Very Slow</div>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, 50)}\r\n                            >Slow</div>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, 10)}\r\n                            >Fast</div>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, 5)}\r\n                            >Very Fast</div>\r\n                            <div className=\"pv-menu-dropdown-content-item\"\r\n                            onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, 0)}\r\n                            >Instant</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"pathfind-key\">\r\n                    <div className=\"key-item\" onClick={() => this.keyNodePressed(\"start-instant\", \"node start\", 3)}>\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"start-instant\"}\r\n                            row={\"start\"}\r\n                            col={\"instant\"}\r\n                            animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                            mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                        </div>\r\n                        <div id='start-text' className=\"key-text\">Start Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\" onClick={() => this.keyNodePressed(\"target-instant\", \"node target\", 4)}>\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"target-instant\"}\r\n                            row={\"target\"}\r\n                            col={\"instant\"}\r\n                            animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                            mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                        </div>\r\n                        <div className=\"key-text\">Target Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\" onClick={() => this.keyNodePressed(\"weight-instant\", \"node weight\", 2)}>\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"weight-instant\"}\r\n                            row={\"weight\"}\r\n                            col={\"instant\"}                           \r\n                            animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                            mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                        </div>\r\n                        <div className=\"key-text\">Weighted Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\" onClick={() => this.keyNodePressed(\"wall-instant\", \"node wall\", 1)}>\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"wall-instant\"}\r\n                            row={\"wall\"}\r\n                            col={\"instant\"}\r\n                            animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                            mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                        </div>\r\n                        <div className=\"key-text\">Wall Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\" onClick={() => this.keyNodePressed(\"unvisited-instant\", \"node node-animated\", 0)}>\r\n                        <div className=\"key-node\">\r\n                            <Node type={\"unvisited-instant\"}\r\n                            row={\"unvisited\"}\r\n                            col={\"instant\"}\r\n                            animationEnded={(type) => this.keyAnimationEnded(type, \"node\")}\r\n                            mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                        </div>\r\n                        <div className=\"key-text\">Unvisited Node</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\" onClick={() => this.keyNodePressed(\"visited-instant\", \"node visited\")}>\r\n                            <Node type={\"visited-instant\"}\r\n                            row={\"visited\"}\r\n                            col={\"instant\"}\r\n                            animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                            mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                        </div>\r\n                        <div className=\"key-node\" onClick={() => this.keyNodePressed(\"visited-weight-instant\", \"node visited-weight\")}>\r\n                            <Node type={\"visited-weight-instant\"}\r\n                            row={\"visited-weight\"}\r\n                            col={\"instant\"}\r\n                            animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                            mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>         \r\n                        </div>\r\n                        <div className=\"key-text\">Visited Nodes</div>\r\n                    </div>\r\n                    <div className=\"key-item\">\r\n                        <div className=\"key-node\" onClick={() => this.keyNodePressed(\"path-instant\", \"node path\")}>\r\n                            <Node type={\"path-instant\"}\r\n                            row={\"path\"}\r\n                            col={\"instant\"}\r\n                            animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                            mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                        </div>\r\n                        <div className=\"key-node\" onClick={() => this.keyNodePressed(\"path-weight-instant\", \"node path-weight\")}>\r\n                            <Node type={\"path-weight-instant\"}\r\n                            row={\"path-weight\"}\r\n                            col={\"instant\"}\r\n                            animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                            mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                        </div>\r\n                        <div className=\"key-text\">Path Nodes</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"pathfind-info\">\r\n                    <div className=\"info-item\">\r\n                        <div>Algorithm:</div>\r\n                        <div id=\"algorithm-info-text\" className=\"info-text\">{this.getCurrentAlgorithmText()}</div>\r\n                    </div>\r\n                    <div className=\"info-item\">\r\n                        <div>Visited Nodes:</div>\r\n                        <div id=\"visited-info-text\" className=\"info-text\">0</div>\r\n                    </div>\r\n                    <div className=\"info-item\">\r\n                        <div>Path Nodes:</div>\r\n                        <div id=\"path-info-text\" className=\"info-text\">No Path</div>\r\n                    </div>\r\n                    <div className=\"info-item\">\r\n                        <div>Path Cost:</div>\r\n                        <div id=\"weighted-info-text\" className=\"info-text\">0</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindMenu;","import React from 'react';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nimport { getShortestPathNodes, dijkstra, aStar, breadthFirstSearch, depthFirstSearch, pathfindAlgorithms, getShortestPathCost\r\n} from './PathfindAlgorithms';\r\nimport { recursiveDevision\r\n} from './MazeAlgorithms';\r\nimport PathfindMenu from './PathfindMenu';\r\nimport Node from './Node';\r\n\r\n// Number of rows in the grid\r\nconst ROW_COUNT = 29;\r\n// Number of columns in the grid\r\nconst COL_COUNT = 71;\r\n// Initial cost of weighted nodes\r\nconst INIT_COST = 15;\r\n// Initial coordinates of the start node [row, col]\r\nconst INIT_START = [14, 10];\r\n// Initial coordinates of the target noe [row, col]\r\nconst INIT_TARGET = [14, 60];\r\n// Speed between visited node animations in miliseconds\r\nconst VISITED_SPEED = 10;\r\n// Speed between shortest path node animations in miliseconds\r\nconst PATH_SPEED = 25;\r\n// Speed between maze wall node animations in miliseconds\r\nconst MAZE_SPEED = 10;\r\n\r\n// Node class types\r\nconst nodeTypes = {\r\n    NODE: 'node',\r\n    NODE_ANIMATED: 'node node-animated',\r\n    WALL: 'node wall',\r\n    WALL_INSTANT: 'node wall-instant',\r\n    WALL_PREVIEW: 'node wall-preview',\r\n    WEIGHT: 'node weight',\r\n    WEIGHT_INSTANT: 'node weight-instant',\r\n    WEIGHT_PREVIEW: 'node weight-preview',\r\n    START: 'node start',\r\n    START_INSTANT: 'node start-instant',\r\n    START_PREVIEW: 'node start-preview',\r\n    TARGET: 'node target',\r\n    TARGET_INSTANT: 'node target-instant',\r\n    TARGET_PREVIEW: 'node target-preview',\r\n    VISITED: 'node visited',\r\n    VISITED_INSTANT: 'node visited-instant',\r\n    VISITED_WEIGHT: 'node visited-weight',\r\n    VISITED_WEIGHT_INSTANT: 'node visited-weight-instant',\r\n    PATH: 'node path',\r\n    PATH_INSTANT: 'node path-instant',\r\n    PATH_WEIGHT: 'node path-weight',\r\n    PATH_WEIGHT_INSTANT: 'node path-weight-instant',\r\n}\r\n\r\n/**\r\n * Represents the pathfinding visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindingVisualizer extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Current state of grid nodes\r\n            grid: [],\r\n            // Current cost of weighted nodes\r\n            weightCost: INIT_COST,\r\n            // Is the mouse down?\r\n            mouseIsDown: false,\r\n            // Are we currently allowed to interact with the grid\r\n            interactable: true,\r\n            // Current draw mode (0: none, 1: walls, 2: weights)\r\n            drawMode: 0,\r\n            // Are we erasing or drawing walls (null if neither)?\r\n            drawWall: null,\r\n            // Are we erasing or drawing weights (null if neither)?\r\n            drawWeight: null,\r\n            // Current start node position\r\n            startNode: INIT_START,\r\n            // Current target node position\r\n            targetNode: INIT_TARGET,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the grid with new nodes. Start and target\r\n     * node positions are preserved.\r\n     */\r\n    rebuildGrid () {\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.createNode(r, c, 1, false);\r\n                curRow.push(node);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the grid with new nodes. Main node types are\r\n     * preserved (start, target, wall, weight).\r\n     */\r\n    softRebuildGrid () {\r\n        const oldGrid = this.state.grid;\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.createNode(r, c, oldGrid[r][c].cost, oldGrid[r][c].isWall)\r\n                curRow.push(node);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Creates a new node with stored properties.\r\n     * \r\n     * @param {int} row row on grid\r\n     * @param {int} col column on grid\r\n     * @param {int} cost weight cost of node\r\n     * @param {boolean} isWall is node a wall\r\n     * \r\n     * @returns the new node object\r\n     */\r\n    createNode (row, col, cost, isWall) {\r\n        let curVisual = nodeTypes.NODE;\r\n        if (cost !== 1) curVisual = nodeTypes.WEIGHT;\r\n        if (isWall) curVisual = nodeTypes.WALL;\r\n\r\n        return {\r\n            curVisual: curVisual,\r\n            row: row,\r\n            col: col,\r\n            cost: cost,\r\n            distance: Infinity,\r\n            rootDistance: Infinity,\r\n            isStart: row === this.state.startNode[0] && col === this.state.startNode[1],\r\n            isTarget: row === this.state.targetNode[0] && col === this.state.targetNode[1],\r\n            isWall: isWall,\r\n            previousNode: null,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the grid of nodes. Changes the properties of\r\n     * newly drawn node types according to their current visual state.\r\n     */\r\n    updateGridState () {\r\n        const grid = this.state.grid;\r\n\r\n        for (let r = 0; r < grid.length; r++) {\r\n            for (let c = 0; c < grid[0].length; c++) {\r\n                const node = grid[r][c];\r\n                const type = this.getNodeVisual(node);\r\n\r\n                node.curVisual = nodeTypes.NODE;\r\n                node.isStart = false;\r\n                node.isTarget = false;\r\n                node.isWall = false;\r\n                node.cost = 1;\r\n                \r\n                switch (type) {\r\n                    case nodeTypes.START: \r\n                    case nodeTypes.START_INSTANT:\r\n                        node.curVisual = nodeTypes.START_INSTANT;\r\n                        node.isStart = true;\r\n                        this.setState({startNode: [node.row, node.col]});\r\n                        break;\r\n                    case nodeTypes.TARGET: \r\n                    case nodeTypes.TARGET_INSTANT:\r\n                        node.curVisual = nodeTypes.TARGET_INSTANT;\r\n                        node.isTarget = true;\r\n                        this.setState({targetNode: [node.row, node.col]});\r\n                        break;\r\n                    case nodeTypes.WALL: \r\n                    case nodeTypes.WALL_INSTANT:\r\n                        node.curVisual = nodeTypes.WALL_INSTANT;\r\n                        node.isWall = true;\r\n                        break;\r\n                    case nodeTypes.WEIGHT:\r\n                    case nodeTypes.WEIGHT_INSTANT:\r\n                    case nodeTypes.VISITED_WEIGHT:\r\n                    case nodeTypes.VISITED_WEIGHT_INSTANT:\r\n                    case nodeTypes.PATH_WEIGHT:\r\n                    case nodeTypes.PATH_WEIGHT_INSTANT:\r\n                        node.curVisual = nodeTypes.WEIGHT_INSTANT;\r\n                        node.cost = this.state.weightCost;\r\n                        break;\r\n                    case nodeTypes.VISITED:\r\n                    case nodeTypes.VISITED_INSTANT:\r\n                        node.curVisual = nodeTypes.VISITED_INSTANT;\r\n                        break;\r\n                    case nodeTypes.PATH:\r\n                    case nodeTypes.PATH_INSTANT:\r\n                        node.curVisual = nodeTypes.PATH_INSTANT;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Updates the visual state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {nodeTypes} type new node type\r\n     */\r\n    updateNodeVisual (node, type) { document.getElementById(`node-${node.row}-${node.col}`).className = type; }\r\n\r\n    /**\r\n     * Gets the current node type.\r\n     * \r\n     * @param {Object} node \r\n     * \r\n     * @returns current node element class name\r\n     */\r\n    getNodeVisual (node) { return document.getElementById(`node-${node.row}-${node.col}`).className; }\r\n\r\n    /**\r\n     * Sets new start node position. Updates state, we are no\r\n     * longer placing the start node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    drawStartNode (node) { \r\n        const curStart = this.state.grid[this.state.startNode[0]][this.state.startNode[1]];\r\n\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(curStart, nodeTypes.NODE_ANIMATED);\r\n        this.updateNodeVisual(node, nodeTypes.START);\r\n    }\r\n\r\n    /**\r\n     * Sets new target node position. Updates state, we are no\r\n     * longer placing the target node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    drawTargetNode (node) { \r\n        const curTarget = this.state.grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(curTarget, nodeTypes.NODE_ANIMATED);\r\n        this.updateNodeVisual(node, nodeTypes.TARGET);\r\n    }\r\n\r\n    /**\r\n     * Updates the visual wall state of a given node. \r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isWall are we drawing (true) or erasing (false)\r\n     */\r\n    drawWallNode (node, isWall) {\r\n        if (node.cost !== 1 || node.isStart || node.isTarget) return;\r\n\r\n        if (!isWall) {\r\n            if (this.getNodeVisual(node) === nodeTypes.NODE) return; \r\n            this.updateNodeVisual(node, nodeTypes.NODE_ANIMATED)\r\n        } else if (this.getNodeVisual(node) !== nodeTypes.WALL_INSTANT) {\r\n            this.updateNodeVisual(node, nodeTypes.WALL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual weight state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isWeight are we drawing (true) or erasing (false)\r\n     */\r\n    drawWeightNode (node, isWeight) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        if (!isWeight) {\r\n            if (this.getNodeVisual(node) === nodeTypes.NODE) return; \r\n            this.updateNodeVisual(node, nodeTypes.NODE_ANIMATED);\r\n        } else if (this.getNodeVisual(node) !== nodeTypes.WEIGHT_INSTANT) {\r\n            this.updateNodeVisual(node, nodeTypes.WEIGHT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual visited state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    drawVisitedNode (node, isInstant) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        const isWeight = node.cost !== 1;\r\n\r\n        if (isInstant) {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT_INSTANT);\r\n            else this.updateNodeVisual(node, nodeTypes.VISITED_INSTANT);\r\n        } else {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT);\r\n            else this.updateNodeVisual(node, nodeTypes.VISITED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual path state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    drawPathNode (node, isInstant) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        const isWeight = node.cost !== 1;\r\n\r\n        if (isInstant) {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT_INSTANT);\r\n            else this.updateNodeVisual(node, nodeTypes.PATH_INSTANT);\r\n        } else {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT);\r\n            else this.updateNodeVisual(node, nodeTypes.PATH);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the entire grid.\r\n     */\r\n    clearGrid () {\r\n        this.clearWeights();\r\n        this.clearWalls();\r\n        this.clearPaths();\r\n    }\r\n\r\n    /**\r\n     * Clears the grid of all wall nodes.\r\n     */\r\n    clearWalls () { \r\n        if (!this.state.interactable) return;\r\n\r\n        const grid = this.state.grid;\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.isWall) {\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                    node.isWall = false;\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: grid});\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Clears the grid of all weighted nodes and resets their\r\n     * costs to 1.\r\n     */\r\n    clearWeights () {\r\n        if (!this.state.interactable) return;\r\n\r\n        const grid = this.state.grid;\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.cost !== 1) {\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                    node.cost = 1;\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: grid});\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Clears the visual grid of all path and visited type nodes.\r\n     * Updates the class name of each appropriate node object.\r\n     */\r\n    clearPaths () {\r\n        if (!this.state.interactable) return;\r\n\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.state.grid[r][c];\r\n                const type = this.getNodeVisual(node);\r\n\r\n                if (type === nodeTypes.VISITED || \r\n                    type === nodeTypes.VISITED_INSTANT ||\r\n                    type === nodeTypes.PATH || \r\n                    type === nodeTypes.PATH_INSTANT) {\r\n\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                }\r\n                else if (type === nodeTypes.VISITED_WEIGHT || \r\n                    type === nodeTypes.VISITED_WEIGHT_INSTANT || \r\n                    type === nodeTypes.PATH_WEIGHT ||\r\n                    type === nodeTypes.PATH_WEIGHT_INSTANT) {\r\n                \r\n                    this.updateNodeVisual(node, nodeTypes.WEIGHT_INSTANT);\r\n                }\r\n            }\r\n        }\r\n        this.updateAlgorithmInfo(\"None\", 0, 0, 0);\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Resets the start and target nodes to their initial locations.\r\n     */\r\n    resetStartTarget () {\r\n        if (!this.state.interactable) return;\r\n        \r\n        this.clearPaths();\r\n\r\n        const initStart = this.state.grid[INIT_START[0]][INIT_START[1]];\r\n        const initTarget = this.state.grid[INIT_TARGET[0]][INIT_TARGET[1]];\r\n\r\n        this.drawStartNode(initStart);\r\n        this.drawTargetNode(initTarget);\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Sets new cost of weighted nodes.\r\n     * \r\n     * @param {int} weight new cost\r\n     */\r\n    setNewWeight (weight) { this.setState({weightCost: weight}); }\r\n\r\n    /**\r\n     * Sets the current draw mode.\r\n     * \r\n     * 0: none\r\n     * 1: walls\r\n     * 2: weights\r\n     * 3: start\r\n     * 4: target\r\n     * \r\n     * @param {int} mode new draw mode\r\n     */\r\n    setDrawMode (mode) { \r\n        if (this.state.drawMode === mode) mode = 0;\r\n        this.setState({drawMode: mode}); \r\n    }\r\n\r\n    /**\r\n     * Visualizes a given pathfinding algorithm. Uses the current state of\r\n     * the grid of nodes.\r\n     * \r\n     * @param {pathfindAlgorithms} algorithm pathfinding algorithm\r\n     * @param {int} speed time in miliseconds between visit animations\r\n     */\r\n    visualizePathfind (algorithm, speed) {\r\n        if (!this.state.interactable) return;\r\n\r\n        this.clearPaths();\r\n        this.softRebuildGrid();\r\n\r\n        const grid = this.state.grid;\r\n        const start = grid[this.state.startNode[0]][this.state.startNode[1]];\r\n        const target = grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n\r\n        var visitedNodes = [];\r\n        switch (algorithm) {\r\n            case pathfindAlgorithms.DIJKSTRA:\r\n                visitedNodes = dijkstra(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.ASTAR:\r\n                visitedNodes = aStar(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.BFS:\r\n                visitedNodes = breadthFirstSearch(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.DFS:\r\n                visitedNodes = depthFirstSearch(grid, start, target);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        const shortestPath = getShortestPathNodes(target);\r\n        const totalCost = getShortestPathCost(target);\r\n\r\n        this.updateAlgorithmInfo(algorithm, visitedNodes.length, shortestPath.length, totalCost);\r\n\r\n        this.animateSearch(visitedNodes, shortestPath, speed);\r\n    }\r\n\r\n    /**\r\n     * Animates the process of the pathfinding algorithm. Updates the class\r\n     * names of the nodes to change their appearance.\r\n     * \r\n     * @param {Array} visitedNodes array of visited nodes in order\r\n     * @param {Array} shortestPath array of shortest path nodes in order\r\n     * @param {int} speed time in miliseconds between visit animations\r\n     */\r\n    animateSearch (visitedNodes, shortestPath, speed) {\r\n        const isInstant = speed === 0;\r\n        if (!speed) speed = VISITED_SPEED;\r\n\r\n        if (isInstant) {\r\n            for (let i = 0; i < visitedNodes.length; i++) {\r\n                const node = visitedNodes[i];\r\n                this.drawVisitedNode(node, isInstant);\r\n            }\r\n            this.animatePath(shortestPath, isInstant);\r\n        } else {\r\n            this.setState({interactable: false});\r\n\r\n            for (let i = 0; i < visitedNodes.length; i++) {\r\n                setTimeout(() => {\r\n                    const node = visitedNodes[i];\r\n                    this.drawVisitedNode(node, isInstant);\r\n                }, speed * i);\r\n            }\r\n            setTimeout(() => { this.animatePath(shortestPath, isInstant); }, speed * visitedNodes.length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animates the shortest path from the start node to the target node.\r\n     * Updates the class names of the nodes to change their appearance.\r\n     * \r\n     * @param {Array} shortestPath array of shortest path nodes in order \r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    animatePath (shortestPath, isInstant) {\r\n        if (isInstant) {\r\n            for (let i = 1; i < shortestPath.length; i++) {\r\n                const node = shortestPath[i];\r\n                this.drawPathNode(node, isInstant);\r\n            }\r\n            setTimeout(() => { this.updateGridState() }, 0);\r\n        } else {\r\n            for (let i = 0; i < shortestPath.length; i++) {\r\n                setTimeout(() => {\r\n                    const node = shortestPath[i];\r\n                    this.drawPathNode(node, isInstant)\r\n                }, PATH_SPEED * i);\r\n            }\r\n            setTimeout(() => { \r\n                this.updateGridState();\r\n                this.setState({interactable: true});\r\n            }, PATH_SPEED * shortestPath.length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual algorithm information.\r\n     * \r\n     * @param {string} algorithm current algorithm\r\n     * @param {int} visitedNodes amount of nodes visited\r\n     * @param {int} pathNodes amount of nodes in path\r\n     * @param {int} totalCost total cost of shortest path\r\n     */\r\n    updateAlgorithmInfo (algorithm, visitedNodes, pathNodes, totalCost) {\r\n        if (pathNodes <= 1) pathNodes = \"No Path\";\r\n        if (totalCost <= 1) totalCost = 0;\r\n\r\n        document.getElementById(\"visited-info-text\").innerHTML = `${visitedNodes}`;\r\n        document.getElementById(\"path-info-text\").innerHTML = `${pathNodes}`;\r\n        document.getElementById(\"weighted-info-text\").innerHTML = `${totalCost}`;\r\n    }\r\n\r\n    /**\r\n     * Animates a generated maze.\r\n     */\r\n    animateMaze () {\r\n        if (!this.state.interactable) return;\r\n\r\n        this.setState({interactable: false});\r\n        this.clearGrid();\r\n        const maze = recursiveDevision(ROW_COUNT, COL_COUNT);\r\n\r\n        for (let i = 0; i < maze.length; i++) {\r\n            setTimeout(() => {\r\n                const node = this.state.grid[maze[i][0]][maze[i][1]];\r\n                this.drawWallNode(node, true);\r\n            }, MAZE_SPEED * i);\r\n        }\r\n        setTimeout(() => {\r\n            this.updateGridState();\r\n            this.setState({interactable: true});\r\n        }, MAZE_SPEED * maze.length);\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Rebuilds the grid.\r\n     */\r\n    componentDidMount () { this.rebuildGrid(); }\r\n\r\n    /**\r\n     * Handles a mouse down event on a node. If we are placing the start or\r\n     * target node, update the node location and return. Otherwise, updates\r\n     * the node based on the current draw mode.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseDown (row, col) {\r\n        if (!this.state.interactable) return;\r\n        this.setState({mouseIsDown: true});\r\n\r\n        const grid = this.state.grid;\r\n        const node = grid[row][col];\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        switch (this.state.drawMode) {\r\n            case 1: // Wall\r\n                const isWall = node.isWall;\r\n                this.drawWallNode(node, !isWall);\r\n                this.setState({drawWall: !isWall});\r\n                break;\r\n            case 2: // Weight\r\n                const isWeight = node.cost !== 1;\r\n                this.drawWeightNode(node, !isWeight);\r\n                this.setState({drawWeight: !isWeight});\r\n                break;\r\n            case 3: // Start\r\n                this.clearPaths();\r\n                this.drawStartNode(node);\r\n                this.setState({drawMode: 0});\r\n                break;\r\n            case 4: // Target\r\n                this.clearPaths();\r\n                this.drawTargetNode(node);\r\n                this.setState({drawMode: 0});\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse up event. Sets the state so that nothing\r\n     * can be drawn.\r\n     */\r\n    handleMouseUp () {\r\n        if (!this.state.mouseIsDown) return;\r\n\r\n        this.updateGridState();\r\n\r\n        this.setState({\r\n            mouseIsDown: false,\r\n            drawWall: null,\r\n            drawWeight: null,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse enter event into a node. If the mouse is not down,\r\n     * return. Otherwise, updates the node based on the current draw mode.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseEnter (row, col) {\r\n        if (!this.state.interactable) return;\r\n\r\n        const grid = this.state.grid;\r\n        const node = grid[row][col];\r\n\r\n        const isWall = node.isWall;\r\n        const isWeight = node.cost !== 1;\r\n\r\n        const isPreview = !isWall && !isWeight && !node.isStart && !node.isTarget;\r\n\r\n        switch (this.state.drawMode) {\r\n            case 1:\r\n                if (this.state.mouseIsDown && isWall !== this.state.drawWall) {\r\n                    this.drawWallNode(node, !isWall);\r\n                } else if (!this.state.mouseIsDown && isPreview) this.updateNodeVisual(node, nodeTypes.WALL_PREVIEW);\r\n                break;\r\n            case 2:\r\n                if (this.state.mouseIsDown && isWeight !== this.state.drawWeight) {\r\n                    this.drawWeightNode(node, !isWeight);\r\n                } else if (!this.state.mouseIsDown && isPreview) this.updateNodeVisual(node, nodeTypes.WEIGHT_PREVIEW);\r\n                break; \r\n            case 3:\r\n                if (isPreview) this.updateNodeVisual(node, nodeTypes.START_PREVIEW);\r\n                break;\r\n            case 4:\r\n                if (isPreview) this.updateNodeVisual(node, nodeTypes.TARGET_PREVIEW);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse leave event from a node.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseLeft (row, col) {\r\n        if (this.state.mouseIsDown || this.state.drawMode === 0 || !this.state.interactable) return;\r\n        \r\n        const node = this.state.grid[row][col];\r\n\r\n        if (node.isWall || node.cost !== 1 || node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(node, node.curVisual);\r\n    }\r\n\r\n    /**\r\n     * Handles an animation end event of a node. Updates the class name of the\r\n     * node to the instant class version.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    handleAnimationEnd (node) {\r\n        const type = this.getNodeVisual(node);\r\n        switch (type) {\r\n            case nodeTypes.START:\r\n                this.updateNodeVisual(node, nodeTypes.START_INSTANT);\r\n                break;\r\n            case nodeTypes.TARGET:\r\n                this.updateNodeVisual(node, nodeTypes.TARGET_INSTANT);\r\n                break;\r\n            case nodeTypes.WALL:\r\n                this.updateNodeVisual(node, nodeTypes.WALL_INSTANT);\r\n                break;\r\n            case nodeTypes.WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.WEIGHT_INSTANT);\r\n                break;\r\n            case nodeTypes.VISITED:\r\n                this.updateNodeVisual(node, nodeTypes.VISITED_INSTANT);\r\n                break;\r\n            case nodeTypes.VISITED_WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT_INSTANT);\r\n                break;\r\n            case nodeTypes.PATH:\r\n                this.updateNodeVisual(node, nodeTypes.PATH_INSTANT);\r\n                break;\r\n            case nodeTypes.PATH_WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT_INSTANT);\r\n                break;\r\n            default:\r\n                this.updateNodeVisual(node, nodeTypes.NODE);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the pathfinding visualizer component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        //console.log(this.state.grid);\r\n\r\n        return (\r\n            <div className=\"pathfind-vis\">\r\n                <div className=\"pathfind-menu\">\r\n                    <PathfindMenu pathfinder={this} />\r\n                </div>\r\n                <div \r\n                className=\"grid\" \r\n                onMouseUp={() => this.handleMouseUp()}\r\n                onMouseLeave={() => this.handleMouseUp()}\r\n                onContextMenu={(e) => e.preventDefault()}\r\n                onDragStart={(e) => e.preventDefault()}\r\n                >\r\n                    {Array.from(this.state.grid).map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx} className=\"grid-row\">\r\n                                {Array.from(row).map((node, nodeIdx) => {\r\n                                    const {row, col, isStart, isTarget} = node;\r\n                                    return (\r\n                                        <Node key={nodeIdx}\r\n                                        row={row}\r\n                                        col={col}\r\n                                        isStart={isStart}\r\n                                        isTarget={isTarget}\r\n                                        mousePressed={(row, col) => this.handleMouseDown(row, col)}\r\n                                        mouseEntered={(row, col) => this.handleMouseEnter(row, col)}\r\n                                        mouseLeft={(row, col) => this.handleMouseLeft(row, col)}\r\n                                        animationEnded={() => this.handleAnimationEnd(node)}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindingVisualizer;","// Unsorted bar color\r\nconst UNSORTED = \"pink\";\r\n// Comparing bar color\r\nconst COMPARE = \"red\";\r\n// Sorted bar color\r\nconst SORTED = \"green\";\r\n// Swapping bar color\r\nconst SWAP = \"orange\";\r\n// Minimum bar color\r\nconst MIN = \"purple\";\r\n\r\n// Sorting algorithms\r\nexport const sortAlgorithms = {\r\n    SELECTION: \"selection\",\r\n    INSERTION: \"insertion\",\r\n    MERGE: \"merge\",\r\n}\r\n\r\n/**\r\n * Executes a Selection Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function selectionSort(array) {\r\n    const animations = [];\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n        var min = i;\r\n        animations.push([[MIN, min]]);\r\n        var newMin = true;\r\n        for (let k = i + 1; k < array.length; k++) {\r\n            if (newMin) {\r\n                animations.push([[COMPARE, k]]);\r\n                newMin = false;\r\n            } else animations.push([[UNSORTED, k-1], [COMPARE, k]]);\r\n            \r\n            if (array[min] > array[k]) {\r\n                animations.push([[UNSORTED, min], [MIN, k]]);\r\n                min = k;\r\n                newMin = true;\r\n            }\r\n        }\r\n        if (min !== i) {\r\n            animations.push([[UNSORTED, array.length-1], [SWAP, min, i], [null, min, array[i]], [null, i, array[min]]]);\r\n            animations.push([[UNSORTED, min], [SORTED, i]]);\r\n            var temp = array[i];\r\n            array[i] = array[min];\r\n            array[min] = temp;\r\n        } else animations.push([[UNSORTED, array.length-1], [SORTED, i]]);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Executes a Insertion Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function insertionSort(array) {\r\n    const animations = [];\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n        var cur = array[i];\r\n        var j = i - 1;\r\n        \r\n        animations.push([[COMPARE, j, i]]);\r\n        while (j >= 0) {\r\n            if (j + 2 >= array.length) animations.push([[COMPARE, j, j + 1]]);\r\n            else animations.push([[UNSORTED, j + 2], [COMPARE, j, j + 1]]);\r\n            if (array[j] <= cur) {\r\n                animations.push([[UNSORTED, j, j + 1]]);\r\n                break;\r\n            }\r\n            animations.push([[SWAP, j, j + 1], [null, j + 1, array[j]], [null, j, cur]]);\r\n            array[j + 1] = array[j];\r\n            j--;\r\n        }\r\n        if (j + 2 >= array.length) animations.push([[UNSORTED, j + 1]]);\r\n        else animations.push([[UNSORTED, j + 1, j + 2]]);\r\n        animations.push([[null, j + 1, cur]]);\r\n        array[j+1] = cur;\r\n    }\r\n    for (let i = array.length - 1; i >= 0; i--) animations.push([[SORTED, i]]);\r\n\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Executes a Merge Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function mergeSort(array) {\r\n    const animations = [];\r\n    array = doMergeSort(animations, array);\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Actual recursive Merge Sort function.\r\n * \r\n * @param {Array} animations array of animations\r\n * @param {Array} array array of values \r\n * \r\n * @returns sorted array\r\n */\r\nfunction doMergeSort(animations, array) {\r\n    const middle = array.length / 2;\r\n    if (array.length < 2) return array;\r\n    const left = array.splice(0, middle);\r\n    return merge(animations, doMergeSort(animations, left), doMergeSort(animations, array));\r\n}\r\n\r\n/**\r\n * Merge Sort helper function.\r\n * \r\n * @param {Array} animations array of animations\r\n * @param {Array} left left array\r\n * @param {Array} right right array\r\n * \r\n * @returns merged array\r\n */\r\nfunction merge (animations, left, right) {\r\n    var array = [];\r\n\r\n    while (left.length && right.length) {\r\n        if (left[0] < right[0]) array.push(left.shift());\r\n        else array.push(right.shift());\r\n    }\r\n    return [...array, ...left, ...right];\r\n}","import React from 'react';\r\nimport { Container, Row, Col, Button, ButtonDropdown, DropdownItem, DropdownToggle, DropdownMenu\r\n} from 'reactstrap';\r\n\r\nimport { sortAlgorithms } from './SortAlgorithms';\r\n\r\n/**\r\n * Represents the top menu of the sorting visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SortMenu extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        // Visualize button dropdown status\r\n        this.state = { visualizeDropdownOpen: false };\r\n    }\r\n\r\n    /**\r\n     * Toggles the visualize button dropdown.\r\n     */\r\n    toggleVisualize () { this.setState({visualizeDropdownOpen: !this.state.visualizeDropdownOpen}); }\r\n \r\n    /**\r\n     * Renders the menu component.\r\n     * \r\n     * @returns a <div> element representing the menu\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"sort-menu\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col className=\"title\">\r\n                            Sorting Visualizer\r\n                        </Col>\r\n                        <Col>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <ButtonDropdown isOpen={this.state.visualizeDropdownOpen} toggle={() => this.toggleVisualize()}>\r\n                                            <Button color=\"success\" onClick={() => this.toggleVisualize()}>Visualize</Button>\r\n                                            <DropdownToggle split color=\"success\" />\r\n                                            <DropdownMenu>\r\n                                                <DropdownItem onClick={() => this.props.sorter.visualizeSort(sortAlgorithms.SELECTION)}>Selection Sort</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.sorter.visualizeSort(sortAlgorithms.INSERTION)}>Insertion Sort</DropdownItem>\r\n                                                <DropdownItem onClick={() => this.props.sorter.visualizeSort(sortAlgorithms.MERGE)}>Merge Sort</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Button color=\"warning\" onClick={() => this.props.sorter.reGenerateArray()}>Randomize</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortMenu;","import React from 'react';\r\n\r\nimport './SortingVisualizer.css';\r\n\r\nimport { random } from '../utils';\r\nimport SortMenu from './SortMenu';\r\nimport { selectionSort, insertionSort, mergeSort, sortAlgorithms } from './SortAlgorithms';\r\n\r\n// Size of array\r\nconst ARRAY_SIZE = 100;\r\n// Minimum value in array\r\nconst MIN_VALUE = 5;\r\n// Maximum value in array\r\nconst MAX_VALUE = 500;\r\n// Speed between animations in miliseconds\r\nconst SPEED = 10;\r\n\r\n// Unsorted bar color\r\nconst UNSORTED = \"pink\";\r\n\r\n/**\r\n * Represents the sorting visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SortingVisualizer extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        // Array of bar values\r\n        this.state = { array: [] };\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the array with new random values.\r\n     * \r\n     * @param {int} size size of array\r\n     * @param {int} min minimum value\r\n     * @param {int} max maximum value\r\n     */\r\n    rebuildArray (size, min, max) {\r\n        const array = [];\r\n        for (let i = 0; i < size; i++) { array.push(this.createBar(min, max)); }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Creates a new bar with a random value.\r\n     * \r\n     * @param {int} min lower bound of value\r\n     * @param {int} max upper bound of value\r\n     * \r\n     * @returns the created bar\r\n     */\r\n    createBar (min, max) { return random(min, max); }\r\n\r\n    /**\r\n     * Rebuilds the array and regenerates the visual array bars.\r\n     */\r\n    reGenerateArray () { \r\n        var array = this.state.array;\r\n        array = this.rebuildArray(ARRAY_SIZE, MIN_VALUE, MAX_VALUE);\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        for (let i = 0; i < array.length; i++) { bars[i].style.backgroundColor = UNSORTED; }\r\n        this.setState({array: array}); \r\n    }\r\n\r\n    /**\r\n     * Visualizes a given sorting algorithm.\r\n     * \r\n     * @param {sortAlgorithms} algorithm sorting algorithm\r\n     */\r\n    visualizeSort (algorithm) {\r\n        const array = this.state.array;\r\n        var animations = [];\r\n\r\n        switch (algorithm) {\r\n            case sortAlgorithms.SELECTION:\r\n                animations = selectionSort(array);\r\n                break;\r\n            case sortAlgorithms.INSERTION:\r\n                animations = insertionSort(array);\r\n                break;\r\n            case sortAlgorithms.MERGE:\r\n                animations = mergeSort(array);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.animateSort(animations);\r\n    }\r\n\r\n    /**\r\n     * Animates the process of the sorting algorithm. Iterates through an\r\n     * array of animation steps generated by the algorithm.\r\n     * \r\n     * @param {Array} animations \r\n     */\r\n    animateSort (animations) {\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        var i = 0\r\n        for (const step of animations) {\r\n            setTimeout(() => {\r\n                for (const action of step) { \r\n                    if (action[0] === null) {\r\n                        bars[action[1]].style.height = `${action[2]}px`;\r\n                    } else {\r\n                        for (let k = 1; k < action.length; k++) {\r\n                            bars[action[k]].style.backgroundColor = action[0]; \r\n                        }\r\n                    }\r\n                }\r\n            }, SPEED * i++);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Rebuilds the array.\r\n     */\r\n    componentDidMount () {\r\n        const array = this.rebuildArray(ARRAY_SIZE, MIN_VALUE, MAX_VALUE);\r\n        this.setState({array: array});\r\n    }\r\n\r\n    /**\r\n     * Renders the sorting visualizer component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        //console.log(this.state.array);\r\n\r\n        return (\r\n            <div className=\"sort-vis\">\r\n                <div className=\"sort-menu\">\r\n                    <SortMenu sorter={this}/>\r\n                </div>\r\n                <div className=\"array\">\r\n                    {Array.from(this.state.array).map((bar, barIdx) => {\r\n                        return (\r\n                            <div className=\"bar\"\r\n                            key={barIdx}\r\n                            style={{\r\n                                backgroundColor: UNSORTED,\r\n                                height: `${bar}px`,\r\n                            }}/>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\r\nimport { NavItem, NavLink, Nav, TabContent, TabPane\r\n} from 'reactstrap'\r\nimport classnames from 'classnames';\r\n\r\nimport Home from './Home';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\n\r\n// Default tab to display on page load\r\nconst DEFAULT_TAB = \"home\";\r\n\r\n/**\r\n * Represents the navigation bar at the top of the page. Each tab\r\n * contains one component of the project.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass NavBar extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        // Current active tab\r\n        this.state = { activeTab: DEFAULT_TAB };\r\n    }\r\n\r\n    /**\r\n     * Renders the navigation bar.\r\n     * \r\n     * @returns a <div> element representing the navigation bar\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"nav-bar\">\r\n                <Nav tabs>\r\n                    <NavItem>\r\n                        <NavLink className={classnames({active: this.state.activeTab === \"home\"})}\r\n                        onClick={() => this.setState({activeTab: \"home\"})}\r\n                        >Home\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink className={classnames({active: this.state.activeTab === \"pathfind\"})}\r\n                        onClick={() => this.setState({activeTab: \"pathfind\"})}\r\n                        >Pathfinding Visualizer\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink className={classnames({active: this.state.activeTab === \"sort\"})}\r\n                        onClick={() => this.setState({activeTab: \"sort\"})}\r\n                        >Sorting Visualizer\r\n                        </NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n                <TabContent activeTab={this.state.activeTab}>\r\n                    <TabPane tabId=\"home\">\r\n                        <Home />\r\n                    </TabPane>\r\n                    <TabPane tabId=\"pathfind\">\r\n                        <PathfindingVisualizer />\r\n                    </TabPane>\r\n                    <TabPane tabId=\"sort\">\r\n                        <SortingVisualizer />\r\n                    </TabPane>\r\n                </TabContent>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import './App.css';\r\nimport NavBar from './NavBar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar></NavBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}