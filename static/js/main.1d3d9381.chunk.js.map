{"version":3,"sources":["Home/Home.js","Utils/utils.js","PathfindingVisualizer/Algorithms/PathfindAlgorithms.js","PathfindingVisualizer/Algorithms/MazeAlgorithms.js","PathfindingVisualizer/Menu/PathfindStats.js","PathfindingVisualizer/Grid/Node.js","PathfindingVisualizer/Menu/NodeKey.js","PathfindingVisualizer/Menu/PVisualizerSettings.js","PathfindingVisualizer/Menu/PathfindMenu.js","PathfindingVisualizer/PathfindingVisualizer.js","SortingVisualizer/Algorithms/SortAlgorithms.js","SortingVisualizer/Menu/SVisualizerSettings.js","SortingVisualizer/Menu/SortMenu.js","SortingVisualizer/SortingVisualizer.js","NavBar/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","state","Card","CardHeader","href","CardBody","CardFooter","className","onClick","changeTab","React","Component","random","min","max","Math","floor","QElement","element","priority","this","PriorityQueue","items","i","length","has","contains","splice","enqueue","qElement","contain","push","isEmpty","shift","str","pathfindAlgorithms","dijkstra","grid","start","target","visitedNodes","unvisitedNodes","nodes","row","node","getAllNodes","distance","sort","a","b","curNode","isWall","isVisited","Infinity","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","cost","previousNode","neighbors","col","filter","mazeAlgorithms","recursiveDevision","rows","cols","walls","r","c","innerWalls","buildWalls","h","minC","maxC","minR","maxR","rGap","cGap","addVWall","addHWall","numHoles","holes","hole","includes","PathfindStats","id","Node","nodeType","type","isStart","isTarget","onMouseDown","mousePressed","onMouseEnter","mouseEntered","onMouseLeave","mouseLeft","onAnimationEnd","animationEnded","NodeKey","drawMode","document","getElementById","pathfinder","setDrawMode","keyNodePressed","keyAnimationEnded","PVisualizerSettings","curAlgorithm","mazeDropdownHidden","clearDropdownHidden","algorithmDropdownHidden","pathfindDropdownHidden","setState","hidden","animateMaze","clearGrid","clearWalls","clearWeights","clearPaths","resetStartTarget","visualizePathfind","getCurrentAlgorithmText","PathfindMenu","ROW_COUNT","COL_COUNT","INIT_START","INIT_TARGET","nodeTypes","PathfindingVisualizer","weightCost","mouseIsDown","interactable","drawWall","drawWeight","startNode","targetNode","curRow","createNode","oldGrid","curVisual","rootDistance","getNodeVisual","curStart","updateNodeVisual","curTarget","isWeight","isInstant","updateGridState","updateAlgorithmInfo","initStart","initTarget","drawStartNode","drawTargetNode","weight","mode","algorithm","speed","softRebuildGrid","dequeue","manhattanD","abs","minDistance","setPriority","aStar","breadthFirstSearch","pop","depthFirstSearch","shortestPath","nodesInShortestPath","currentNode","unshift","getShortestPathNodes","totalCost","getShortestPathCost","animateSearch","drawVisitedNode","animatePath","setTimeout","drawPathNode","pathNodes","innerHTML","maze","randomWallMaze","randomWeightMaze","rNum","randomWallWeightMaze","drawWeightNode","drawWallNode","rebuildGrid","isPreview","onMouseUp","handleMouseUp","onContextMenu","e","preventDefault","onDragStart","Array","from","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseLeft","handleAnimationEnd","UNSORTED","COMPARE","SORTED","SWAP","MIN","sortAlgorithms","mergeSort","array","animations","doMergeSort","middle","left","right","merge","SVisualizerSettings","randomizeDropdownHidden","visualizeDropdownHidden","sorter","reGenerateArray","visualizeSort","SortMenu","SortingVisualizer","size","createBar","bars","getElementsByClassName","style","backgroundColor","rebuildArray","newMin","k","temp","selectionSort","cur","j","insertionSort","animateSort","step","action","height","bar","barIdx","DEFAULT_TAB","NavBar","navigateDropdownHidden","curTab","tab","elements","display","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1d3d9381.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Card, CardHeader, CardBody, CardFooter\r\n} from 'reactstrap';\r\n\r\nimport './Home.css';\r\n\r\n/**\r\n * Represents the home tab component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass Home extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the home tab component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <h1>Algorithm Visualizer</h1>\r\n                        <h4>Jake Waclawski</h4>\r\n                        <a href=\"https://github.com/jmw3638/Pathfinder\">GitHub</a><br />\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        \r\n                    </CardBody>\r\n                    <CardFooter>\r\n                        <div className=\"home-visualizer-button\"\r\n                        onClick={() => this.props.changeTab(\"Pathfinding Visualizer\")}\r\n                        >Pathfinding Visualizer</div>\r\n                        <div className=\"home-visualizer-button\"\r\n                        onClick={() => this.props.changeTab(\"Sorting Visualizer\")}\r\n                        >Sorting Visualizer</div>\r\n                    </CardFooter>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","/**\r\n * Generates a random integer between two given values.\r\n * \r\n * @param {int} min minimum value\r\n * @param {int} max maximum value \r\n * \r\n * @returns the generated integer\r\n */\r\nexport function random(min, max) { return Math.floor(Math.random() * (max - min + 1) + min); }\r\n\r\n/**\r\n * User defined PriorityQueue helper class. Stores element and its priority.\r\n */\r\nclass QElement { \r\n    constructor(element, priority) \r\n    { \r\n        this.element = element; \r\n        this.priority = priority; \r\n    } \r\n} \r\n  \r\n/**\r\n * Represents a priority queue data structure.\r\n */\r\nclass PriorityQueue { \r\n    constructor() { \r\n        this.items = []; \r\n    } \r\n  \r\n    /**\r\n     * Determines if an element is in the priority queue.\r\n     * \r\n     * @param {Object} element element to search for\r\n     * \r\n     * @returns the index of the element, false if not found\r\n     */\r\n    contains(element) {\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            if(this.items[i].element === element) return i;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets an element's priority.\r\n     * \r\n     * @param {Object} element the element\r\n     * @param {int} priority new priority\r\n     */\r\n    setPriority(element, priority) {\r\n        var has = this.contains(element);\r\n        if(!has) return;\r\n        this.items.splice(has, 1);\r\n        this.enqueue(element, priority);\r\n    }\r\n\r\n    /**\r\n     * Adds an element to the priority queue with a given priority.\r\n     * \r\n     * @param {Object} element \r\n     * @param {int} priority \r\n     */\r\n    enqueue(element, priority) \r\n    { \r\n        var qElement = new QElement(element, priority); \r\n        var contain = false; \r\n\r\n        for (var i = 0; i < this.items.length; i++) { \r\n            if (this.items[i].priority > qElement.priority) { \r\n                this.items.splice(i, 0, qElement); \r\n                contain = true; \r\n                break; \r\n            } \r\n        } \r\n\r\n        if (!contain) this.items.push(qElement);  \r\n    } \r\n\r\n    /**\r\n     * Removes and returns the first element from the priority queue.\r\n     * \r\n     * @returns the removed element, false if the queue is empty\r\n     */\r\n    dequeue() \r\n    { \r\n        if (this.isEmpty()) return false; \r\n        return this.items.shift(); \r\n    } \r\n\r\n\r\n    /**\r\n     * Returns the highest priority element in the queue without removing it.\r\n     * \r\n     * @returns highest priority element, false if empty\r\n     */\r\n    front() \r\n    { \r\n        if (this.isEmpty()) return false; \r\n        return this.items[0]; \r\n    } \r\n\r\n    /**\r\n     * Returns the lowest priority element in the queue without removing it.\r\n     * \r\n     * @returns lowest priority element, false if empty\r\n     */\r\n    rear() \r\n    {  \r\n        if (this.isEmpty()) return false; \r\n        return this.items[this.items.length - 1]; \r\n    } \r\n\r\n    /**\r\n     * Determines if the priority queue is empty or not.\r\n     * \r\n     * @returns if the priority queue is empty\r\n     */\r\n    isEmpty() { return this.items.length === 0; } \r\n\r\n\r\n    /**\r\n     * Prints all elements of the priority queue.\r\n     * \r\n     * @returns the generated print string\r\n     */\r\n    printPQueue() \r\n    { \r\n        var str = \"\"; \r\n        for (var i = 0; i < this.items.length; i++) str += this.items[i].element + \" \"; \r\n        return str; \r\n    } \r\n} \r\n\r\nexport default PriorityQueue;","import PriorityQueue from \"../../Utils/utils\";\r\n\r\n// Pathfinding algorithms\r\nexport const pathfindAlgorithms = {\r\n    DIJKSTRA: \"Dijkstra\",\r\n    ASTAR: \"A* (A-Star)\",\r\n    BFS: \"Breadth First Search\",\r\n    DFS: \"Depth First Search\",\r\n}\r\n\r\n/**\r\n * Executes a Dijkstra's algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function dijkstra(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n        const curNode = unvisitedNodes.shift();\r\n        \r\n        if (!curNode) break;\r\n        if (curNode.isWall) continue;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            neighbor.distance = curNode.distance + neighbor.cost;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes an A* (A-Star) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function aStar(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = new PriorityQueue();\r\n    unvisitedNodes.enqueue(start, 0);\r\n    start.distance = 0;\r\n    start.rootDistance = 0;\r\n    while (!unvisitedNodes.isEmpty()) {\r\n        const curNode = unvisitedNodes.dequeue().element;\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.isVisited) continue;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            const manhattanD = 2 * (Math.abs(target.row - neighbor.row) + (Math.abs(target.col - neighbor.col)));\r\n            neighbor.rootDistance = Math.min(neighbor.rootDistance, curNode.rootDistance + neighbor.cost);\r\n            const minDistance = Math.min(neighbor.distance, neighbor.rootDistance + manhattanD);\r\n            if (minDistance !== neighbor.distance) {\r\n                neighbor.distance = minDistance;\r\n                neighbor.previousNode = curNode;\r\n                if (unvisitedNodes.contains(neighbor)) unvisitedNodes.setPriority(neighbor, minDistance);\r\n            }\r\n            if (!unvisitedNodes.contains(neighbor)) unvisitedNodes.enqueue(neighbor, neighbor.distance);\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes Breadth First Search (BFS) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function breadthFirstSearch(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.shift();\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.isVisited) continue;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n        if (curNode === target) return visitedNodes; \r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n\r\n            neighbor.distance = curNode.distance + 1;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Executes a Depth First Search (DFS) algorithm search.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * @param {Object} start start node\r\n * @param {Object} target target node\r\n * \r\n * @returns an array of visited nodes in order\r\n */\r\nexport function depthFirstSearch(grid, start, target) {\r\n    const visitedNodes = [];\r\n    const unvisitedNodes = [start];\r\n    start.distance = 0;\r\n    while (unvisitedNodes.length !== 0) {\r\n        const curNode = unvisitedNodes.pop();\r\n\r\n        if (curNode.isWall) continue;\r\n        if (curNode.isVisited) continue;\r\n\r\n        curNode.isVisited = true;\r\n        visitedNodes.push(curNode);\r\n\r\n        if (curNode.distance === Infinity) return visitedNodes;\r\n        if (curNode === target) return visitedNodes;\r\n\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n        for (const neighbor of unvisitedNeighbors) {\r\n            unvisitedNodes.push(neighbor);\r\n\r\n            neighbor.distance = curNode.distance + 1;\r\n            neighbor.previousNode = curNode;\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\n/**\r\n * Gets all of the nodes in the grid.\r\n * \r\n * @param {Array} grid grid of nodes\r\n * \r\n * @returns an array containing all of the nodes\r\n */\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) nodes.push(node);\r\n    }\r\n    return nodes;\r\n}\r\n\r\n/**\r\n * Gets the shortest path of nodes from the target node to \r\n * the start node.\r\n * \r\n * @param {Object} targetNode target node\r\n * \r\n * @returns an array of shortest path nodes in order\r\n */\r\nexport function getShortestPathNodes(targetNode) {\r\n    const nodesInShortestPath = [];\r\n    let currentNode = targetNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPath;\r\n}\r\n\r\n/**\r\n * Gets the total weighted cost of the shortest path.\r\n * \r\n * @param {Object} targetNode target node\r\n * \r\n * @returns the total cost\r\n */\r\nexport function getShortestPathCost(targetNode) {\r\n    const nodesInShortestPath = [];\r\n    let currentNode = targetNode;\r\n    let totalCost = 0;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPath.unshift(currentNode);\r\n        totalCost += currentNode.cost;\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return totalCost;\r\n}\r\n\r\n/**\r\n * Gets all unvisited neighbors of a given node.\r\n * \r\n * @param {Object} node node\r\n * @param {Array} grid grid of nodes\r\n * \r\n * @returns an array containing all unvisited neighbors\r\n */\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {row, col} = node;\r\n    \r\n    if (col > 0) neighbors.push(grid[row][col - 1]); // West\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // South\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); // East\r\n    if (row > 0) neighbors.push(grid[row - 1][col]); // North\r\n    \r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}","import { random } from '../../Utils/utils';\r\n\r\n// Maze algorithms\r\nexport const mazeAlgorithms = {\r\n    RECURSIVE_DEVISION: \"Recursive Devision\",\r\n    RANDOM_WALL: \"Random Wall\",\r\n    RANDOM_WEIGHT: \"Random Weight\",\r\n    RANDOM_WALL_WEIGHT: \"Random Wall/Weight\"\r\n}\r\n\r\n/**\r\n * Algorithm for generating a random wall maze.\r\n * \r\n * @param {int} rows number of rows\r\n * @param {int} cols number of columns\r\n * \r\n * @returns a grid of boolean values, true if wall node\r\n */\r\nexport function randomWallMaze(rows, cols) {\r\n    var walls = []\r\n\r\n    for (let r = 0; r < rows; r++) {\r\n        for (let c = 0; c < cols; c++) {\r\n            const rNum = random(1, 10);\r\n            if (rNum <= 3) walls.push([r, c]);\r\n        }\r\n    }\r\n\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Algorithm for generating a random weight maze.\r\n * \r\n * @param {int} rows number of rows\r\n * @param {int} cols number of columns\r\n * \r\n * @returns a grid of boolean values, true if wall node\r\n */\r\nexport function randomWeightMaze(rows, cols) {\r\n    var walls = []\r\n\r\n    for (let r = 0; r < rows; r++) {\r\n        for (let c = 0; c < cols; c++) {\r\n            const rNum = random(1, 10);\r\n            if (rNum <= 3) walls.push([r, c, true]);\r\n        }\r\n    }\r\n\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Algorithm for generating a random wall/weight maze.\r\n * \r\n * @param {int} rows number of rows\r\n * @param {int} cols number of columns\r\n * \r\n * @returns a grid of boolean values, true if wall node\r\n */\r\nexport function randomWallWeightMaze(rows, cols) {\r\n    var walls = []\r\n\r\n    for (let r = 0; r < rows; r++) {\r\n        for (let c = 0; c < cols; c++) {\r\n            const rNum = random(1, 10);\r\n            if (rNum <= 2) walls.push([r, c]);\r\n            if (rNum >= 8) walls.push([r, c, true]);\r\n        }\r\n    }\r\n\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Algorithm for generating a maze using recursive devision.\r\n * \r\n * @param {int} rows number of rows\r\n * @param {int} cols number of columns\r\n * \r\n * @returns a grid of boolean values, true if wall node\r\n */\r\nexport function recursiveDevision(rows, cols) {\r\n    var walls = [];\r\n\r\n    //walls = innerWalls(walls, true, 0, cols-1, 0, rows-1);\r\n    walls = buildWalls(walls, rows, cols);\r\n    \r\n    return walls;\r\n}\r\n\r\n/**\r\n * Creates walls around the border of the maze.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} rows amount of rows \r\n * @param {int} cols amount of columns\r\n * \r\n * @returns a grid of walls\r\n */\r\nfunction buildWalls(walls, rows, cols) {\r\n    for (var r = 0; r < rows; r++) {\r\n        if (r === 0 || r === (rows-1)) {\r\n            for (var c = 0; c < cols; c++) {\r\n                walls.push([r, c]);\r\n            }\r\n        } else {\r\n            walls.push([r, 0]);\r\n            walls.push([r, cols-1]);\r\n        }\r\n    }\r\n\r\n    walls = innerWalls(walls, random(0, 1), 1, cols-2, 1, rows-2);\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Recursive function that builds the inner walls of the maze.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {boolean} h is horizontal wall\r\n * @param {int} minC lower column bound\r\n * @param {int} maxC upper column bound\r\n * @param {int} minR lower row bound\r\n * @param {int} maxR upper row bound\r\n * \r\n * @returns a grid of walls\r\n */\r\nfunction innerWalls(walls, h, minC, maxC, minR, maxR) {\r\n    const rGap = maxR - minR;\r\n    const cGap = maxC - minC;\r\n\r\n    if (maxR - minR <= 1) return walls; \r\n    if (maxC - minC <= 1) return walls; \r\n\r\n    var r = Math.floor(random(minR+1, maxR-1)/2)*2;\r\n    var c = Math.floor(random(minC+1, maxC-1)/2)*2;\r\n\r\n    // ^ xor: one or the other but not both\r\n    if (rGap <= 5 ^ cGap<= 5) {\r\n        if (rGap <= 5) {\r\n            walls = addVWall(walls, minR, maxR, c);\r\n\r\n            walls = innerWalls(walls, !h, minC, c-1, minR, maxR);\r\n            walls = innerWalls(walls, !h, c+1, maxC, minR, maxR);\r\n        }\r\n        if (cGap <= 5) {\r\n            walls = addHWall(walls, minC, maxC, r);\r\n    \r\n            walls = innerWalls(walls, !h, minC, maxC, minR, r-1);\r\n            walls = innerWalls(walls, !h, minC, maxC, r+1, maxR);\r\n        }\r\n        return walls;\r\n    } \r\n    if (h) {\r\n        walls = addHWall(walls, minC, maxC, r);\r\n\r\n        walls = innerWalls(walls, !h, minC, maxC, minR, r-1);\r\n        walls = innerWalls(walls, !h, minC, maxC, r+1, maxR);\r\n    } else {\r\n        walls = addVWall(walls, minR, maxR, c);\r\n\r\n        walls = innerWalls(walls, !h, minC, c-1, minR, maxR);\r\n        walls = innerWalls(walls, !h, c+1, maxC, minR, maxR);\r\n    }\r\n    return walls;\r\n}\r\n\r\n/**\r\n * Builds a horizontal wall at a given row.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} minC lower column bound\r\n * @param {int} maxC upper column bound\r\n * @param {int} r row\r\n */\r\nfunction addHWall(walls, minC, maxC, r) {\r\n    const numHoles = random(1, (maxC - minC)/4);\r\n    const holes = [];\r\n    for (let i = 0; i < numHoles; i++) {\r\n        const hole = Math.floor(random(minC, maxC)/2)*2+1;\r\n        holes.push(hole);\r\n    }\r\n\r\n    for (var i = minC; i <= maxC; i++) if (!holes.includes(i)) walls.push([r, i]); \r\n    return walls;\r\n}\r\n\r\n/**\r\n * Builds a vertical wall at a given column.\r\n * \r\n * @param {Array} walls grid of walls\r\n * @param {int} minR lower row bound\r\n * @param {int} maxR upper row bound\r\n * @param {int} c column \r\n */\r\nfunction addVWall(walls, minR, maxR, c) {\r\n    const numHoles = random(1, (maxR - minR)/4);\r\n    const holes = [];\r\n    for (let i = 0; i < numHoles; i++) {\r\n        const hole = Math.floor(random(minR, maxR)/2)*2+1;\r\n        holes.push(hole);\r\n    }\r\n\r\n    for (var i = minR; i <= maxR; i++) if (!holes.includes(i)) walls.push([i, c]); \r\n    return walls;\r\n}","import React from 'react';\r\n\r\n/**\r\n * Represents the algorithm stats text above the grid of the pathfinding\r\n * visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindStats extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the algorithm stats component.\r\n     * \r\n     * @returns a <div> element representing the stats text\r\n     */\r\n    render () {\r\n\r\n        return (\r\n            <div className=\"pv-stats\">\r\n                <div className=\"pv-stats-item\">\r\n                    <div>Visited Nodes:</div>\r\n                    <div id=\"pv-stats-visited\" className=\"pv-stats-text\">0</div>\r\n                </div>\r\n                <div className=\"pv-stats-item\">\r\n                    <div>Path Nodes:</div>\r\n                    <div id=\"pv-stats-path\" className=\"pv-stats-text\">0</div>\r\n                </div>\r\n                <div className=\"pv-stats-item\">\r\n                    <div>Path Cost:</div>\r\n                    <div id=\"pv-stats-weighted\" className=\"pv-stats-text\">0</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindStats;","import React from 'react';\r\n\r\nimport './Node.css';\r\n\r\n/**\r\n * Represents a grid node on the screen. Extra class names\r\n * can be applied to change the appearance of the node.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass Node extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Renders the node.\r\n     * \r\n     * @returns a <div> element representing the node\r\n     */\r\n    render () {\r\n        const nodeType = this.props.type ? this.props.type :\r\n        this.props.isStart ? 'start' : \r\n        this.props.isTarget ? 'target' : \r\n        '';\r\n\r\n        return (\r\n            <div \r\n            id={`node-${this.props.row}-${this.props.col}`} \r\n            className={`node ${nodeType}`}\r\n            onMouseDown={() => this.props.mousePressed(this.props.row, this.props.col)}\r\n            onMouseEnter={() => this.props.mouseEntered(this.props.row, this.props.col)}\r\n            onMouseLeave={() => this.props.mouseLeft(this.props.row, this.props.col)}\r\n            onAnimationEnd={() => this.props.animationEnded(nodeType)}\r\n            /> \r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React from 'react';\r\n\r\nimport Node from '../Grid/Node';\r\n\r\n/**\r\n * Represents the node key in the menu.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass NodeKey extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    /**\r\n     * Runs the animation for the pressed node. Sets the appropriate draw mode.\r\n     * \r\n     * @param {string} id element id\r\n     * @param {string} className class name to set\r\n     * @param {int} drawMode draw mode to set\r\n     */\r\n    keyNodePressed (id, className, drawMode) {\r\n        document.getElementById(`node-${id}`).className = className;\r\n        if (drawMode || drawMode === 0) this.props.pathfinder.setDrawMode(drawMode);\r\n    }\r\n\r\n    /**\r\n     * Reverts the node state to the instant version.\r\n     * \r\n     * @param {string} id node element id\r\n     * @param {string} className class name to set\r\n     */\r\n    keyAnimationEnded (id, className) { document.getElementById(`node-${id}`).className = `node ${className}`; }\r\n\r\n    /**\r\n     * Renders the key component.\r\n     * \r\n     * @returns a <div> element representing the key\r\n     */\r\n    render () {\r\n\r\n        return (\r\n            <div className=\"pv-key\">\r\n                <div className=\"pv-key-item\" onClick={() => this.keyNodePressed(\"start-instant\", \"node start\", 3)}>\r\n                    <div className=\"pv-key-node\">\r\n                        <Node type={\"start-instant\"}\r\n                        row={\"start\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div id='start-text' className=\"pv-key-text\">Start Node</div>\r\n                </div>\r\n                <div className=\"pv-key-item\" onClick={() => this.keyNodePressed(\"target-instant\", \"node target\", 4)}>\r\n                    <div className=\"pv-key-node\">\r\n                        <Node type={\"target-instant\"}\r\n                        row={\"target\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-text\">Target Node</div>\r\n                </div>\r\n                <div className=\"pv-key-item\" onClick={() => this.keyNodePressed(\"weight-instant\", \"node weight\", 2)}>\r\n                    <div className=\"pv-key-node\">\r\n                        <Node type={\"weight-instant\"}\r\n                        row={\"weight\"}\r\n                        col={\"instant\"}                           \r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-text\">Weighted Node</div>\r\n                </div>\r\n                <div className=\"pv-key-item\" onClick={() => this.keyNodePressed(\"wall-instant\", \"node wall\", 1)}>\r\n                    <div className=\"pv-key-node\">\r\n                        <Node type={\"wall-instant\"}\r\n                        row={\"wall\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-text\">Wall Node</div>\r\n                </div>\r\n                <div className=\"pv-key-item\" onClick={() => this.keyNodePressed(\"unvisited-instant\", \"node node-animated\", 0)}>\r\n                    <div className=\"pv-key-node\">\r\n                        <Node type={\"unvisited-instant\"}\r\n                        row={\"unvisited\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, \"node\")}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-text\">Unvisited Node</div>\r\n                </div>\r\n                <div className=\"pv-key-item\">\r\n                    <div className=\"pv-key-node\" onClick={() => this.keyNodePressed(\"visited-instant\", \"node visited\")}>\r\n                        <Node type={\"visited-instant\"}\r\n                        row={\"visited\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-node\" onClick={() => this.keyNodePressed(\"visited-weight-instant\", \"node visited-weight\")}>\r\n                        <Node type={\"visited-weight-instant\"}\r\n                        row={\"visited-weight\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>         \r\n                    </div>\r\n                    <div className=\"pv-key-text\">Visited Nodes</div>\r\n                </div>\r\n                <div className=\"pv-key-item\">\r\n                    <div className=\"pv-key-node\" onClick={() => this.keyNodePressed(\"path-instant\", \"node path\")}>\r\n                        <Node type={\"path-instant\"}\r\n                        row={\"path\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-node\" onClick={() => this.keyNodePressed(\"path-weight-instant\", \"node path-weight\")}>\r\n                        <Node type={\"path-weight-instant\"}\r\n                        row={\"path-weight\"}\r\n                        col={\"instant\"}\r\n                        animationEnded={(type) => this.keyAnimationEnded(type, type)}\r\n                        mousePressed={() => null} mouseEntered={() => null} mouseLeft={() => null}/>\r\n                    </div>\r\n                    <div className=\"pv-key-text\">Path Nodes</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NodeKey;","import React from 'react';\r\n\r\nimport { pathfindAlgorithms } from '../Algorithms/PathfindAlgorithms';\r\nimport { mazeAlgorithms } from '../Algorithms/MazeAlgorithms';\r\n\r\n/**\r\n * Represents the settings bar in the menu of the pathfinding visualizer\r\n * component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PVisualizerSettings extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Currently selected pathfinding algorithm\r\n            curAlgorithm: null,\r\n            // Is the maze button dropdown open?\r\n            mazeDropdownHidden: true,\r\n            // Is the clear button dropdown open?\r\n            clearDropdownHidden: true,\r\n            // Is the algorithm button dropdown open?\r\n            algorithmDropdownHidden: true,\r\n            // Is the pathfind button dropdown open?\r\n            pathfindDropdownHidden: true,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the current algorithm for the information text as a string.\r\n     * \r\n     * @returns the string\r\n     */\r\n    getCurrentAlgorithmText() {\r\n        if (!this.state.curAlgorithm) return \"Select an Algorithm\";\r\n        return this.state.curAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * Renders the settings bar component.\r\n     * \r\n     * @returns a <div> element representing the settings bar\r\n     */\r\n    render () {\r\n\r\n        return (\r\n            <div className=\"pv-menu-bar\">\r\n                <div className=\"maze-dropdown dropdown-animate\">\r\n                    <div className=\"pv-menu-bar-button\" \r\n                    onMouseEnter={() => this.setState({mazeDropdownHidden: false})}>\r\n                    <span>Maze</span></div>\r\n                    <div className=\"pv-menu-dropdown-content maze-drop-content dropdown-animate\"\r\n                    hidden={this.state.mazeDropdownHidden}\r\n                    onClick={() => this.setState({mazeDropdownHidden: true})}>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.animateMaze(mazeAlgorithms.RECURSIVE_DEVISION)}\r\n                        >Recursive Devision</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.animateMaze(mazeAlgorithms.RANDOM_WALL)}\r\n                        >Random Wall</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.animateMaze(mazeAlgorithms.RANDOM_WEIGHT)}\r\n                        >Random Weight</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.animateMaze(mazeAlgorithms.RANDOM_WALL_WEIGHT)}\r\n                        >Random Wall/Weight</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"clear-dropdown dropdown-animate\">\r\n                    <div className=\"pv-menu-bar-button\" \r\n                    onClick={() => this.props.pathfinder.clearGrid()}\r\n                    onMouseEnter={() => this.setState({clearDropdownHidden: false})}>\r\n                    <span>Clear</span></div>\r\n                    <div className=\"pv-menu-dropdown-content clear-drop-content dropdown-animate\"\r\n                    hidden={this.state.clearDropdownHidden} \r\n                    onClick={() => this.setState({clearDropdownHidden: true})}>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.clearWalls()}\r\n                        >Clear Walls</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.clearWeights()}\r\n                        >Clear Weights</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.clearPaths()}\r\n                        >Clear Path</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.resetStartTarget()}\r\n                        >Reset Start/Target</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"algorithm-dropdown dropdown-animate\">\r\n                    <div className=\"pv-menu-bar-button\"\r\n                    onMouseEnter={() => this.setState({algorithmDropdownHidden: false})}\r\n                    onClick={() => this.setState({curAlgorithm: null})}>\r\n                    <span>Algorithm</span></div>\r\n                    <div className=\"pv-menu-dropdown-content alg-drop-content dropdown-animate\"\r\n                    hidden={this.state.algorithmDropdownHidden} \r\n                    onClick={() => this.setState({algorithmDropdownHidden: true})}>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.DIJKSTRA})}\r\n                        >Dijkstra</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.ASTAR})}\r\n                        >A* (A-Star)</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.BFS})}\r\n                        >Breadth First Search</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: pathfindAlgorithms.DFS})}\r\n                        >Depth First Search</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"pathfind-dropdown dropdown-animate\">\r\n                    <div className=\"pv-menu-bar-button\" \r\n                    onMouseEnter={() => this.setState({pathfindDropdownHidden: false})}\r\n                    onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm)}>\r\n                    <span>Pathfind</span></div>\r\n                    <div className=\"pv-menu-dropdown-content pathfind-drop-content dropdown-animate\"\r\n                    hidden={this.state.pathfindDropdownHidden}\r\n                    onClick={() => this.setState({pathfindDropdownHidden: true})}>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, 250)}\r\n                        >Very Slow</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, 50)}\r\n                        >Slow</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, 15)}\r\n                        >Fast</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, 5)}\r\n                        >Very Fast</div>\r\n                        <div className=\"pv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.pathfinder.visualizePathfind(this.state.curAlgorithm, 0)}\r\n                        >Instant</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"pv-curalg dropdown-animate\">{this.getCurrentAlgorithmText()}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PVisualizerSettings;","import React from 'react';\r\n\r\nimport './PathfindMenu.css';\r\n\r\nimport PathfindStats from './PathfindStats';\r\nimport NodeKey from './NodeKey';\r\nimport PVisualizerSettings from './PVisualizerSettings';\r\n\r\n/**\r\n * Represents the menu above the grid of the pathfinding visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindMenu extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n    \r\n    /**\r\n     * Renders the menu component.\r\n     * \r\n     * @returns a <div> element representing the menu\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"pathfind-menu\">\r\n                <PVisualizerSettings pathfinder={this.props.pathfinder} />\r\n                <NodeKey pathfinder={this.props.pathfinder} />\r\n                <PathfindStats />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindMenu;","import React from 'react';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nimport { getShortestPathNodes, dijkstra, aStar, breadthFirstSearch, depthFirstSearch, pathfindAlgorithms, getShortestPathCost\r\n} from './Algorithms/PathfindAlgorithms';\r\nimport { recursiveDevision, mazeAlgorithms, randomWallMaze, randomWeightMaze, randomWallWeightMaze\r\n} from './Algorithms/MazeAlgorithms';\r\nimport PathfindMenu from './Menu/PathfindMenu';\r\nimport Node from './Grid/Node';\r\n\r\n// Number of rows in the grid\r\nconst ROW_COUNT = 29;\r\n// Number of columns in the grid\r\nconst COL_COUNT = 71;\r\n// Initial cost of weighted nodes\r\nconst INIT_COST = 15;\r\n// Initial coordinates of the start node [row, col]\r\nconst INIT_START = [14, 10];\r\n// Initial coordinates of the target noe [row, col]\r\nconst INIT_TARGET = [14, 60];\r\n// Default speed between visited node animations in miliseconds\r\nconst VISITED_SPEED = 15;\r\n// Speed between shortest path node animations in miliseconds\r\nconst PATH_SPEED = 25;\r\n// Speed between maze wall node animations in miliseconds\r\nconst MAZE_SPEED = 10;\r\n\r\n// Node class types\r\nconst nodeTypes = {\r\n    NODE: 'node',\r\n    NODE_ANIMATED: 'node node-animated',\r\n    WALL: 'node wall',\r\n    WALL_INSTANT: 'node wall-instant',\r\n    WALL_PREVIEW: 'node wall-preview',\r\n    WEIGHT: 'node weight',\r\n    WEIGHT_INSTANT: 'node weight-instant',\r\n    WEIGHT_PREVIEW: 'node weight-preview',\r\n    START: 'node start',\r\n    START_INSTANT: 'node start-instant',\r\n    START_PREVIEW: 'node start-preview',\r\n    TARGET: 'node target',\r\n    TARGET_INSTANT: 'node target-instant',\r\n    TARGET_PREVIEW: 'node target-preview',\r\n    VISITED: 'node visited',\r\n    VISITED_INSTANT: 'node visited-instant',\r\n    VISITED_WEIGHT: 'node visited-weight',\r\n    VISITED_WEIGHT_INSTANT: 'node visited-weight-instant',\r\n    PATH: 'node path',\r\n    PATH_INSTANT: 'node path-instant',\r\n    PATH_WEIGHT: 'node path-weight',\r\n    PATH_WEIGHT_INSTANT: 'node path-weight-instant',\r\n}\r\n\r\n/**\r\n * Represents the pathfinding visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass PathfindingVisualizer extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Current state of grid nodes\r\n            grid: [],\r\n            // Current cost of weighted nodes\r\n            weightCost: INIT_COST,\r\n            // Is the mouse down?\r\n            mouseIsDown: false,\r\n            // Are we currently allowed to interact with the grid\r\n            interactable: true,\r\n            // Current draw mode (0: none, 1: walls, 2: weights)\r\n            drawMode: 0,\r\n            // Are we erasing or drawing walls (null if neither)?\r\n            drawWall: null,\r\n            // Are we erasing or drawing weights (null if neither)?\r\n            drawWeight: null,\r\n            // Current start node position\r\n            startNode: INIT_START,\r\n            // Current target node position\r\n            targetNode: INIT_TARGET,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the grid with new nodes. Start and target\r\n     * node positions are preserved.\r\n     */\r\n    rebuildGrid () {\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.createNode(r, c, 1, false);\r\n                curRow.push(node);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the grid with new nodes. Main node types are\r\n     * preserved (start, target, wall, weight).\r\n     */\r\n    softRebuildGrid () {\r\n        const oldGrid = this.state.grid;\r\n        const grid = [];\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            const curRow = [];\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.createNode(r, c, oldGrid[r][c].cost, oldGrid[r][c].isWall)\r\n                curRow.push(node);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Creates a new node with stored properties.\r\n     * \r\n     * @param {int} row row on grid\r\n     * @param {int} col column on grid\r\n     * @param {int} cost weight cost of node\r\n     * @param {boolean} isWall is node a wall\r\n     * \r\n     * @returns the new node object\r\n     */\r\n    createNode (row, col, cost, isWall) {\r\n        let curVisual = nodeTypes.NODE;\r\n        if (cost !== 1) curVisual = nodeTypes.WEIGHT;\r\n        if (isWall) curVisual = nodeTypes.WALL;\r\n\r\n        return {\r\n            curVisual: curVisual,\r\n            row: row,\r\n            col: col,\r\n            cost: cost,\r\n            distance: Infinity,\r\n            rootDistance: Infinity,\r\n            isStart: row === this.state.startNode[0] && col === this.state.startNode[1],\r\n            isTarget: row === this.state.targetNode[0] && col === this.state.targetNode[1],\r\n            isWall: isWall,\r\n            previousNode: null,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the grid of nodes. Changes the properties of\r\n     * newly drawn node types according to their current visual state.\r\n     */\r\n    updateGridState () {\r\n        const grid = this.state.grid;\r\n\r\n        for (let r = 0; r < grid.length; r++) {\r\n            for (let c = 0; c < grid[0].length; c++) {\r\n                const node = grid[r][c];\r\n                const type = this.getNodeVisual(node);\r\n\r\n                node.curVisual = nodeTypes.NODE;\r\n                node.isStart = false;\r\n                node.isTarget = false;\r\n                node.isWall = false;\r\n                node.cost = 1;\r\n                \r\n                switch (type) {\r\n                    case nodeTypes.START: \r\n                    case nodeTypes.START_INSTANT:\r\n                        node.curVisual = nodeTypes.START_INSTANT;\r\n                        node.isStart = true;\r\n                        this.setState({startNode: [node.row, node.col]});\r\n                        break;\r\n                    case nodeTypes.TARGET: \r\n                    case nodeTypes.TARGET_INSTANT:\r\n                        node.curVisual = nodeTypes.TARGET_INSTANT;\r\n                        node.isTarget = true;\r\n                        this.setState({targetNode: [node.row, node.col]});\r\n                        break;\r\n                    case nodeTypes.WALL: \r\n                    case nodeTypes.WALL_INSTANT:\r\n                        node.curVisual = nodeTypes.WALL_INSTANT;\r\n                        node.isWall = true;\r\n                        break;\r\n                    case nodeTypes.WEIGHT:\r\n                    case nodeTypes.WEIGHT_INSTANT:\r\n                    case nodeTypes.VISITED_WEIGHT:\r\n                    case nodeTypes.VISITED_WEIGHT_INSTANT:\r\n                    case nodeTypes.PATH_WEIGHT:\r\n                    case nodeTypes.PATH_WEIGHT_INSTANT:\r\n                        node.curVisual = nodeTypes.WEIGHT_INSTANT;\r\n                        node.cost = this.state.weightCost;\r\n                        break;\r\n                    case nodeTypes.VISITED:\r\n                    case nodeTypes.VISITED_INSTANT:\r\n                        node.curVisual = nodeTypes.VISITED_INSTANT;\r\n                        break;\r\n                    case nodeTypes.PATH:\r\n                    case nodeTypes.PATH_INSTANT:\r\n                        node.curVisual = nodeTypes.PATH_INSTANT;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({grid: grid});\r\n    }\r\n\r\n    /**\r\n     * Updates the visual state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {nodeTypes} type new node type\r\n     */\r\n    updateNodeVisual (node, type) { document.getElementById(`node-${node.row}-${node.col}`).className = type; }\r\n\r\n    /**\r\n     * Gets the current node type.\r\n     * \r\n     * @param {Object} node \r\n     * \r\n     * @returns current node element class name\r\n     */\r\n    getNodeVisual (node) { return document.getElementById(`node-${node.row}-${node.col}`).className; }\r\n\r\n    /**\r\n     * Sets new start node position. Updates state, we are no\r\n     * longer placing the start node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    drawStartNode (node) { \r\n        const curStart = this.state.grid[this.state.startNode[0]][this.state.startNode[1]];\r\n\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(curStart, nodeTypes.NODE_ANIMATED);\r\n        this.updateNodeVisual(node, nodeTypes.START);\r\n    }\r\n\r\n    /**\r\n     * Sets new target node position. Updates state, we are no\r\n     * longer placing the target node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    drawTargetNode (node) { \r\n        const curTarget = this.state.grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(curTarget, nodeTypes.NODE_ANIMATED);\r\n        this.updateNodeVisual(node, nodeTypes.TARGET);\r\n    }\r\n\r\n    /**\r\n     * Updates the visual wall state of a given node. \r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isWall are we drawing (true) or erasing (false)\r\n     */\r\n    drawWallNode (node, isWall) {\r\n        if (node.cost !== 1 || node.isStart || node.isTarget) return;\r\n\r\n        if (!isWall) {\r\n            if (this.getNodeVisual(node) === nodeTypes.NODE) return; \r\n            this.updateNodeVisual(node, nodeTypes.NODE_ANIMATED)\r\n        } else if (this.getNodeVisual(node) !== nodeTypes.WALL_INSTANT) {\r\n            this.updateNodeVisual(node, nodeTypes.WALL);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual weight state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isWeight are we drawing (true) or erasing (false)\r\n     */\r\n    drawWeightNode (node, isWeight) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        if (!isWeight) {\r\n            if (this.getNodeVisual(node) === nodeTypes.NODE) return; \r\n            this.updateNodeVisual(node, nodeTypes.NODE_ANIMATED);\r\n        } else if (this.getNodeVisual(node) !== nodeTypes.WEIGHT_INSTANT) {\r\n            this.updateNodeVisual(node, nodeTypes.WEIGHT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual visited state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    drawVisitedNode (node, isInstant) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        const isWeight = node.cost !== 1;\r\n\r\n        if (isInstant) {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT_INSTANT);\r\n            else this.updateNodeVisual(node, nodeTypes.VISITED_INSTANT);\r\n        } else {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT);\r\n            else this.updateNodeVisual(node, nodeTypes.VISITED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual path state of a given node.\r\n     * \r\n     * @param {Object} node node on grid\r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    drawPathNode (node, isInstant) {\r\n        if (node.isWall || node.isStart || node.isTarget) return;\r\n\r\n        const isWeight = node.cost !== 1;\r\n\r\n        if (isInstant) {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT_INSTANT);\r\n            else this.updateNodeVisual(node, nodeTypes.PATH_INSTANT);\r\n        } else {\r\n            if (isWeight) this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT);\r\n            else this.updateNodeVisual(node, nodeTypes.PATH);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the entire grid.\r\n     */\r\n    clearGrid () {\r\n        this.clearWeights();\r\n        this.clearWalls();\r\n        this.clearPaths();\r\n    }\r\n\r\n    /**\r\n     * Clears the grid of all wall nodes.\r\n     */\r\n    clearWalls () { \r\n        if (!this.state.interactable) return;\r\n\r\n        const grid = this.state.grid;\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.isWall) {\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                    node.isWall = false;\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: grid});\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Clears the grid of all weighted nodes and resets their\r\n     * costs to 1.\r\n     */\r\n    clearWeights () {\r\n        if (!this.state.interactable) return;\r\n\r\n        const grid = this.state.grid;\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                if (node.cost !== 1) {\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                    node.cost = 1;\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid: grid});\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Clears the visual grid of all path and visited type nodes.\r\n     * Updates the class name of each appropriate node object.\r\n     */\r\n    clearPaths () {\r\n        if (!this.state.interactable) return;\r\n\r\n        for (let r = 0; r < ROW_COUNT; r++) {\r\n            for (let c = 0; c < COL_COUNT; c++) {\r\n                const node = this.state.grid[r][c];\r\n                const type = this.getNodeVisual(node);\r\n\r\n                if (type === nodeTypes.VISITED || \r\n                    type === nodeTypes.VISITED_INSTANT ||\r\n                    type === nodeTypes.PATH || \r\n                    type === nodeTypes.PATH_INSTANT) {\r\n\r\n                    this.updateNodeVisual(node, nodeTypes.NODE);\r\n                }\r\n                else if (type === nodeTypes.VISITED_WEIGHT || \r\n                    type === nodeTypes.VISITED_WEIGHT_INSTANT || \r\n                    type === nodeTypes.PATH_WEIGHT ||\r\n                    type === nodeTypes.PATH_WEIGHT_INSTANT) {\r\n                \r\n                    this.updateNodeVisual(node, nodeTypes.WEIGHT_INSTANT);\r\n                }\r\n            }\r\n        }\r\n        this.updateAlgorithmInfo(0, 0, 0);\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Resets the start and target nodes to their initial locations.\r\n     */\r\n    resetStartTarget () {\r\n        if (!this.state.interactable) return;\r\n\r\n        this.clearPaths();\r\n\r\n        const initStart = this.state.grid[INIT_START[0]][INIT_START[1]];\r\n        const initTarget = this.state.grid[INIT_TARGET[0]][INIT_TARGET[1]];\r\n\r\n        this.drawStartNode(initStart);\r\n        this.drawTargetNode(initTarget);\r\n        this.updateGridState();\r\n    }\r\n\r\n    /**\r\n     * Sets new cost of weighted nodes.\r\n     * \r\n     * @param {int} weight new cost\r\n     */\r\n    setNewWeight (weight) { this.setState({weightCost: weight}); }\r\n\r\n    /**\r\n     * Sets the current draw mode.\r\n     * \r\n     * 0: none\r\n     * 1: walls\r\n     * 2: weights\r\n     * 3: start\r\n     * 4: target\r\n     * \r\n     * @param {int} mode new draw mode\r\n     */\r\n    setDrawMode (mode) { \r\n        if (this.state.drawMode === mode) mode = 0;\r\n        this.setState({drawMode: mode}); \r\n    }\r\n\r\n    /**\r\n     * Visualizes a given pathfinding algorithm. Uses the current state of\r\n     * the grid of nodes.\r\n     * \r\n     * @param {pathfindAlgorithms} algorithm pathfinding algorithm\r\n     * @param {int} speed time in miliseconds between visit animations\r\n     */\r\n    visualizePathfind (algorithm, speed) {\r\n        if (!this.state.interactable) return;\r\n\r\n        this.clearPaths();\r\n        this.softRebuildGrid();\r\n\r\n        const grid = this.state.grid;\r\n        const start = grid[this.state.startNode[0]][this.state.startNode[1]];\r\n        const target = grid[this.state.targetNode[0]][this.state.targetNode[1]];\r\n\r\n        var visitedNodes = [];\r\n        switch (algorithm) {\r\n            case pathfindAlgorithms.DIJKSTRA:\r\n                visitedNodes = dijkstra(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.ASTAR:\r\n                visitedNodes = aStar(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.BFS:\r\n                visitedNodes = breadthFirstSearch(grid, start, target);\r\n                break;\r\n            case pathfindAlgorithms.DFS:\r\n                visitedNodes = depthFirstSearch(grid, start, target);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        const shortestPath = getShortestPathNodes(target);\r\n        const totalCost = getShortestPathCost(target);\r\n\r\n        this.updateAlgorithmInfo(visitedNodes.length, shortestPath.length, totalCost);\r\n\r\n        this.animateSearch(visitedNodes, shortestPath, speed);\r\n    }\r\n\r\n    /**\r\n     * Animates the process of the pathfinding algorithm. Updates the class\r\n     * names of the nodes to change their appearance.\r\n     * \r\n     * @param {Array} visitedNodes array of visited nodes in order\r\n     * @param {Array} shortestPath array of shortest path nodes in order\r\n     * @param {int} speed time in miliseconds between visit animations\r\n     */\r\n    animateSearch (visitedNodes, shortestPath, speed) {\r\n        const isInstant = speed === 0;\r\n        if (!speed) speed = VISITED_SPEED;\r\n\r\n        if (isInstant) {\r\n            for (let i = 0; i < visitedNodes.length; i++) {\r\n                const node = visitedNodes[i];\r\n                this.drawVisitedNode(node, isInstant);\r\n            }\r\n            this.animatePath(shortestPath, isInstant);\r\n        } else {\r\n            this.setState({\r\n                interactable: false,\r\n                drawMode: 0,\r\n            });\r\n\r\n            for (let i = 0; i < visitedNodes.length; i++) {\r\n                setTimeout(() => {\r\n                    const node = visitedNodes[i];\r\n                    this.drawVisitedNode(node, isInstant);\r\n                }, speed * i);\r\n            }\r\n            setTimeout(() => { this.animatePath(shortestPath, isInstant); }, speed * visitedNodes.length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Animates the shortest path from the start node to the target node.\r\n     * Updates the class names of the nodes to change their appearance.\r\n     * \r\n     * @param {Array} shortestPath array of shortest path nodes in order \r\n     * @param {boolean} isInstant true if drawing instantly\r\n     */\r\n    animatePath (shortestPath, isInstant) {\r\n        if (isInstant) {\r\n            for (let i = 1; i < shortestPath.length; i++) {\r\n                const node = shortestPath[i];\r\n                this.drawPathNode(node, isInstant);\r\n            }\r\n            setTimeout(() => { this.updateGridState() }, 0);\r\n        } else {\r\n            for (let i = 0; i < shortestPath.length; i++) {\r\n                setTimeout(() => {\r\n                    const node = shortestPath[i];\r\n                    this.drawPathNode(node, isInstant)\r\n                }, PATH_SPEED * i);\r\n            }\r\n            setTimeout(() => { \r\n                this.updateGridState();\r\n                this.setState({interactable: true});\r\n            }, (PATH_SPEED * shortestPath.length) + 1000);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the visual algorithm pathfind information.\r\n     * \r\n     * @param {int} visitedNodes amount of nodes visited\r\n     * @param {int} pathNodes amount of nodes in path\r\n     * @param {int} totalCost total cost of shortest path\r\n     */\r\n    updateAlgorithmInfo (visitedNodes, pathNodes, totalCost) {\r\n        if (pathNodes <= 1) pathNodes = 0;\r\n        if (totalCost <= 1) totalCost = 0;\r\n\r\n        document.getElementById(\"pv-stats-visited\").innerHTML = `${visitedNodes}`;\r\n        document.getElementById(\"pv-stats-path\").innerHTML = `${pathNodes}`;\r\n        document.getElementById(\"pv-stats-weighted\").innerHTML = `${totalCost}`;\r\n    }\r\n\r\n    /**\r\n     * Animates a generated maze.\r\n     * \r\n     * @param {mazeAlgorithms} algorithm maze algorithm to use\r\n     */\r\n    animateMaze (algorithm) {\r\n        var maze = [];\r\n\r\n        switch (algorithm) {\r\n            case mazeAlgorithms.RECURSIVE_DEVISION:\r\n                maze = recursiveDevision(ROW_COUNT, COL_COUNT);\r\n                break;\r\n            case mazeAlgorithms.RANDOM_WALL:\r\n                maze = randomWallMaze(ROW_COUNT, COL_COUNT);\r\n                break;\r\n            case mazeAlgorithms.RANDOM_WEIGHT:\r\n                maze = randomWeightMaze(ROW_COUNT, COL_COUNT);\r\n                break;\r\n            case mazeAlgorithms.RANDOM_WALL_WEIGHT:\r\n                maze = randomWallWeightMaze(ROW_COUNT, COL_COUNT);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        if (!this.state.interactable) return;\r\n        this.setState({interactable: false});\r\n        this.clearGrid();\r\n\r\n        for (let i = 0; i < maze.length; i++) {\r\n            setTimeout(() => {\r\n                const node = this.state.grid[maze[i][0]][maze[i][1]];\r\n                if (maze[i][2]) this.drawWeightNode(node, true);\r\n                else this.drawWallNode(node, true);\r\n            }, MAZE_SPEED * i);\r\n        }\r\n        setTimeout(() => {\r\n            this.updateGridState();\r\n            this.setState({interactable: true});\r\n        }, MAZE_SPEED * maze.length);\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Rebuilds the grid.\r\n     */\r\n    componentDidMount () { this.rebuildGrid(); }\r\n\r\n    /**\r\n     * Handles a mouse down event on a node. If we are placing the start or\r\n     * target node, update the node location and return. Otherwise, updates\r\n     * the node based on the current draw mode.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseDown (row, col) {\r\n        if (!this.state.interactable) return;\r\n        this.setState({mouseIsDown: true});\r\n\r\n        const grid = this.state.grid;\r\n        const node = grid[row][col];\r\n        if (node.isStart || node.isTarget) return;\r\n\r\n        switch (this.state.drawMode) {\r\n            case 1: // Wall\r\n                const isWall = node.isWall;\r\n                this.drawWallNode(node, !isWall);\r\n                this.setState({drawWall: !isWall});\r\n                break;\r\n            case 2: // Weight\r\n                const isWeight = node.cost !== 1;\r\n                this.drawWeightNode(node, !isWeight);\r\n                this.setState({drawWeight: !isWeight});\r\n                break;\r\n            case 3: // Start\r\n                this.clearPaths();\r\n                this.drawStartNode(node);\r\n                this.setState({drawMode: 0});\r\n                break;\r\n            case 4: // Target\r\n                this.clearPaths();\r\n                this.drawTargetNode(node);\r\n                this.setState({drawMode: 0});\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse up event. Sets the state so that nothing\r\n     * can be drawn.\r\n     */\r\n    handleMouseUp () {\r\n        if (!this.state.mouseIsDown) return;\r\n\r\n        this.updateGridState();\r\n\r\n        this.setState({\r\n            mouseIsDown: false,\r\n            drawWall: null,\r\n            drawWeight: null,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse enter event into a node. If the mouse is not down,\r\n     * return. Otherwise, updates the node based on the current draw mode.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseEnter (row, col) {\r\n        if (!this.state.interactable) return;\r\n\r\n        const grid = this.state.grid;\r\n        const node = grid[row][col];\r\n\r\n        const isWall = node.isWall;\r\n        const isWeight = node.cost !== 1;\r\n\r\n        const isPreview = !isWall && !isWeight && !node.isStart && !node.isTarget;\r\n\r\n        switch (this.state.drawMode) {\r\n            case 1:\r\n                if (this.state.mouseIsDown && isWall !== this.state.drawWall) {\r\n                    this.drawWallNode(node, !isWall);\r\n                } else if (!this.state.mouseIsDown && isPreview) this.updateNodeVisual(node, nodeTypes.WALL_PREVIEW);\r\n                break;\r\n            case 2:\r\n                if (this.state.mouseIsDown && isWeight !== this.state.drawWeight) {\r\n                    this.drawWeightNode(node, !isWeight);\r\n                } else if (!this.state.mouseIsDown && isPreview) this.updateNodeVisual(node, nodeTypes.WEIGHT_PREVIEW);\r\n                break; \r\n            case 3:\r\n                if (isPreview) this.updateNodeVisual(node, nodeTypes.START_PREVIEW);\r\n                break;\r\n            case 4:\r\n                if (isPreview) this.updateNodeVisual(node, nodeTypes.TARGET_PREVIEW);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a mouse leave event from a node.\r\n     * \r\n     * @param {int} row row of node on grid\r\n     * @param {int} col column of node on grid\r\n     */\r\n    handleMouseLeft (row, col) {\r\n        if (this.state.mouseIsDown || this.state.drawMode === 0 || !this.state.interactable) return;\r\n        \r\n        const node = this.state.grid[row][col];\r\n\r\n        if (node.isWall || node.cost !== 1 || node.isStart || node.isTarget) return;\r\n\r\n        this.updateNodeVisual(node, node.curVisual);\r\n    }\r\n\r\n    /**\r\n     * Handles an animation end event of a node. Updates the class name of the\r\n     * node to the instant class version.\r\n     * \r\n     * @param {Object} node node on grid\r\n     */\r\n    handleAnimationEnd (node) {\r\n        const type = this.getNodeVisual(node);\r\n        switch (type) {\r\n            case nodeTypes.START:\r\n                this.updateNodeVisual(node, nodeTypes.START_INSTANT);\r\n                break;\r\n            case nodeTypes.TARGET:\r\n                this.updateNodeVisual(node, nodeTypes.TARGET_INSTANT);\r\n                break;\r\n            case nodeTypes.WALL:\r\n                this.updateNodeVisual(node, nodeTypes.WALL_INSTANT);\r\n                break;\r\n            case nodeTypes.WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.WEIGHT_INSTANT);\r\n                break;\r\n            case nodeTypes.VISITED:\r\n                this.updateNodeVisual(node, nodeTypes.VISITED_INSTANT);\r\n                break;\r\n            case nodeTypes.VISITED_WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.VISITED_WEIGHT_INSTANT);\r\n                break;\r\n            case nodeTypes.PATH:\r\n                this.updateNodeVisual(node, nodeTypes.PATH_INSTANT);\r\n                break;\r\n            case nodeTypes.PATH_WEIGHT:\r\n                this.updateNodeVisual(node, nodeTypes.PATH_WEIGHT_INSTANT);\r\n                break;\r\n            default:\r\n                this.updateNodeVisual(node, nodeTypes.NODE);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders the pathfinding visualizer component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        //console.log(this.state.grid);\r\n\r\n        return (\r\n            <div className=\"pathfind-vis\">\r\n                <div className=\"pathfind-menu\">\r\n                    <PathfindMenu pathfinder={this} />\r\n                </div>\r\n                <div \r\n                className=\"grid\" \r\n                onMouseUp={() => this.handleMouseUp()}\r\n                onMouseLeave={() => this.handleMouseUp()}\r\n                onContextMenu={(e) => e.preventDefault()}\r\n                onDragStart={(e) => e.preventDefault()}\r\n                >\r\n                    {Array.from(this.state.grid).map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx} className=\"grid-row\">\r\n                                {Array.from(row).map((node, nodeIdx) => {\r\n                                    const {row, col, isStart, isTarget} = node;\r\n                                    return (\r\n                                        <Node key={nodeIdx}\r\n                                        row={row}\r\n                                        col={col}\r\n                                        isStart={isStart}\r\n                                        isTarget={isTarget}\r\n                                        mousePressed={(row, col) => this.handleMouseDown(row, col)}\r\n                                        mouseEntered={(row, col) => this.handleMouseEnter(row, col)}\r\n                                        mouseLeft={(row, col) => this.handleMouseLeft(row, col)}\r\n                                        animationEnded={() => this.handleAnimationEnd(node)}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathfindingVisualizer;","// Unsorted bar color\r\nconst UNSORTED = \"pink\";\r\n// Comparing bar color\r\nconst COMPARE = \"red\";\r\n// Sorted bar color\r\nconst SORTED = \"green\";\r\n// Swapping bar color\r\nconst SWAP = \"orange\";\r\n// Minimum bar color\r\nconst MIN = \"purple\";\r\n\r\n// Sorting algorithms\r\nexport const sortAlgorithms = {\r\n    SELECTION: \"Selection Sort\",\r\n    INSERTION: \"Insertion Sort\",\r\n    MERGE: \"Merge Sort\",\r\n}\r\n\r\n/**\r\n * Executes a Selection Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function selectionSort(array) {\r\n    const animations = [];\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n        var min = i;\r\n        animations.push([[MIN, min]]);\r\n        var newMin = true;\r\n        for (let k = i + 1; k < array.length; k++) {\r\n            if (newMin) {\r\n                animations.push([[COMPARE, k]]);\r\n                newMin = false;\r\n            } else animations.push([[UNSORTED, k-1], [COMPARE, k]]);\r\n            \r\n            if (array[min] > array[k]) {\r\n                animations.push([[UNSORTED, min], [MIN, k]]);\r\n                min = k;\r\n                newMin = true;\r\n            }\r\n        }\r\n        if (min !== i) {\r\n            animations.push([[UNSORTED, array.length-1], [SWAP, min, i], [null, min, array[i]], [null, i, array[min]]]);\r\n            animations.push([[UNSORTED, min], [SORTED, i]]);\r\n            var temp = array[i];\r\n            array[i] = array[min];\r\n            array[min] = temp;\r\n        } else animations.push([[UNSORTED, array.length-1], [SORTED, i]]);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Executes a Insertion Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function insertionSort(array) {\r\n    const animations = [];\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n        var cur = array[i];\r\n        var j = i - 1;\r\n        \r\n        animations.push([[COMPARE, j, i]]);\r\n        while (j >= 0) {\r\n            if (j + 2 >= array.length) animations.push([[COMPARE, j, j + 1]]);\r\n            else animations.push([[UNSORTED, j + 2], [COMPARE, j, j + 1]]);\r\n            if (array[j] <= cur) {\r\n                animations.push([[UNSORTED, j, j + 1]]);\r\n                break;\r\n            }\r\n            animations.push([[SWAP, j, j + 1], [null, j + 1, array[j]], [null, j, cur]]);\r\n            array[j + 1] = array[j];\r\n            j--;\r\n        }\r\n        if (j + 2 >= array.length) animations.push([[UNSORTED, j + 1]]);\r\n        else animations.push([[UNSORTED, j + 1, j + 2]]);\r\n        animations.push([[null, j + 1, cur]]);\r\n        array[j+1] = cur;\r\n    }\r\n    for (let i = array.length - 1; i >= 0; i--) animations.push([[SORTED, i]]);\r\n\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Executes a Merge Sort on an array.\r\n * \r\n * @param {Array} array array of values\r\n * \r\n * @returns an array of animations\r\n */\r\nexport function mergeSort(array) {\r\n    const animations = [];\r\n    array = doMergeSort(animations, array);\r\n    return animations;\r\n}\r\n\r\n/**\r\n * Actual recursive Merge Sort function.\r\n * \r\n * @param {Array} animations array of animations\r\n * @param {Array} array array of values \r\n * \r\n * @returns sorted array\r\n */\r\nfunction doMergeSort(animations, array) {\r\n    const middle = array.length / 2;\r\n    if (array.length < 2) return array;\r\n    const left = array.splice(0, middle);\r\n    return merge(animations, doMergeSort(animations, left), doMergeSort(animations, array));\r\n}\r\n\r\n/**\r\n * Merge Sort helper function.\r\n * \r\n * @param {Array} animations array of animations\r\n * @param {Array} left left array\r\n * @param {Array} right right array\r\n * \r\n * @returns merged array\r\n */\r\nfunction merge (animations, left, right) {\r\n    var array = [];\r\n\r\n    while (left.length && right.length) {\r\n        if (left[0] < right[0]) array.push(left.shift());\r\n        else array.push(right.shift());\r\n    }\r\n    return [...array, ...left, ...right];\r\n}","import React from 'react';\r\n\r\nimport { sortAlgorithms } from '../Algorithms/SortAlgorithms';\r\n\r\n/**\r\n * Represents the settings bar in the menu of the sorting visualizer\r\n * component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SVisualizerSettings extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // Currently selected sorting algorithm\r\n            curAlgorithm: null,\r\n            // Is the randomize button dropdown open?\r\n            randomizeDropdownHidden: true,\r\n            // Is the algorithm button dropdown open?\r\n            algorithmDropdownHidden: true,\r\n            // Is the visualize button dropdown open?\r\n            visualizeDropdownHidden: true,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the current algorithm for the information text as a string.\r\n     * \r\n     * @returns the string\r\n     */\r\n    getCurrentAlgorithmText() {\r\n        if (!this.state.curAlgorithm) return \"Select an Algorithm\";\r\n        return this.state.curAlgorithm;\r\n    }\r\n\r\n    /**\r\n     * Renders the settings bar component.\r\n     * \r\n     * @returns a <div> element representing the settings bar\r\n     */\r\n    render () {\r\n\r\n        return (\r\n            <div className=\"sv-menu-bar\">\r\n                <div className=\"randomize-dropdown dropdown-animate\">\r\n                    <div className=\"sv-menu-bar-button\" \r\n                    onClick={() => this.props.sorter.reGenerateArray()}\r\n                    onMouseEnter={() => this.setState({randomizeDropdownHidden: false})}>\r\n                    <span>Randomize</span></div>\r\n                    <div className=\"sv-menu-dropdown-content randomize-drop-content dropdown-animate\"\r\n                    hidden={this.state.randomizeDropdownHidden}\r\n                    onClick={() => this.setState({randomizeDropdownHidden: true})}>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.reGenerateArray(10)}\r\n                        >Small Array</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.reGenerateArray(50)}\r\n                        >Medium Array</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.reGenerateArray(100)}\r\n                        >Large Array</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"algorithm-dropdown dropdown-animate\">\r\n                    <div className=\"sv-menu-bar-button\" \r\n                    onMouseEnter={() => this.setState({algorithmDropdownHidden: false})}>\r\n                    <span>Algorithm</span></div>\r\n                    <div className=\"sv-menu-dropdown-content algorithm-drop-content dropdown-animate\"\r\n                    hidden={this.state.algorithmDropdownHidden}\r\n                    onClick={() => this.setState({algorithmDropdownHidden: true})}>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: sortAlgorithms.SELECTION})}\r\n                        >Selection Sort</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: sortAlgorithms.INSERTION})}\r\n                        >Insertion Sort</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.setState({curAlgorithm: sortAlgorithms.MERGE})}\r\n                        >Merge Sort</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"visualize-dropdown dropdown-animate\">\r\n                    <div className=\"sv-menu-bar-button\" \r\n                    onClick={() => this.props.sorter.visualizeSort(this.state.curAlgorithm)}\r\n                    onMouseEnter={() => this.setState({visualizeDropdownHidden: false})}>\r\n                    <span>Sort</span></div>\r\n                    <div className=\"sv-menu-dropdown-content visualize-drop-content dropdown-animate\"\r\n                    hidden={this.state.visualizeDropdownHidden}\r\n                    onClick={() => this.setState({visualizeDropdownHidden: true})}>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.visualizeSort(this.state.curAlgorithm, 500)}\r\n                        >Very Slow</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.visualizeSort(this.state.curAlgorithm, 100)}\r\n                        >Slow</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.visualizeSort(this.state.curAlgorithm, 50)}\r\n                        >Fast</div>\r\n                        <div className=\"sv-menu-dropdown-content-item\"\r\n                        onClick={() => this.props.sorter.visualizeSort(this.state.curAlgorithm, 10)}\r\n                        >Very Fast</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"sv-curalg dropdown-animate\">{this.getCurrentAlgorithmText()}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SVisualizerSettings;","import React from 'react';\r\n\r\nimport './SortMenu.css';\r\n\r\nimport SVisualizerSettings from './SVisualizerSettings';\r\n\r\n/**\r\n * Represents the top menu of the sorting visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SortMenu extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n \r\n    /**\r\n     * Renders the menu component.\r\n     * \r\n     * @returns a <div> element representing the menu\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"sort-menu\">\r\n                <SVisualizerSettings sorter={this.props.sorter} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortMenu;","import React from 'react';\r\n\r\nimport './SortingVisualizer.css';\r\n\r\nimport { random } from '../Utils/utils';\r\nimport SortMenu from './Menu/SortMenu';\r\nimport { selectionSort, insertionSort, mergeSort, sortAlgorithms } from './Algorithms/SortAlgorithms';\r\n\r\n// Size of array\r\nconst ARRAY_SIZE = 100;\r\n// Minimum value in array\r\nconst MIN_VALUE = 5;\r\n// Maximum value in array\r\nconst MAX_VALUE = 500;\r\n// Default speed between animations in miliseconds\r\nconst DEFAULT_SPEED = 10;\r\n\r\n// Unsorted bar color\r\nconst UNSORTED = \"pink\";\r\n\r\n/**\r\n * Represents the sorting visualizer component.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass SortingVisualizer extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        // Array of bar values\r\n        this.state = { array: [] };\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the array with new random values.\r\n     * \r\n     * @param {int} size size of array\r\n     * @param {int} min minimum value\r\n     * @param {int} max maximum value\r\n     */\r\n    rebuildArray (size, min, max) {\r\n        const array = [];\r\n        for (let i = 0; i < size; i++) { array.push(this.createBar(min, max)); }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Creates a new bar with a random value.\r\n     * \r\n     * @param {int} min lower bound of value\r\n     * @param {int} max upper bound of value\r\n     * \r\n     * @returns the created bar\r\n     */\r\n    createBar (min, max) { return random(min, max); }\r\n\r\n    /**\r\n     * Rebuilds the array and regenerates the visual array bars.\r\n     * \r\n     * @param {int} size size of new array\r\n     */\r\n    reGenerateArray (size) { \r\n        if (!size) size = ARRAY_SIZE;\r\n\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        for (let i = 0; i < this.state.array.length; i++) { bars[i].style.backgroundColor = UNSORTED; }\r\n\r\n        const array = this.rebuildArray(size, MIN_VALUE, MAX_VALUE);\r\n        this.setState({array: array}); \r\n    }\r\n\r\n    /**\r\n     * Visualizes a given sorting algorithm.\r\n     * \r\n     * @param {sortAlgorithms} algorithm sorting algorithm\r\n     * @param {int} speed time between animations in miliseconds\r\n     */\r\n    visualizeSort (algorithm, speed) {\r\n        const array = this.state.array;\r\n        var animations = [];\r\n\r\n        switch (algorithm) {\r\n            case sortAlgorithms.SELECTION:\r\n                animations = selectionSort(array);\r\n                break;\r\n            case sortAlgorithms.INSERTION:\r\n                animations = insertionSort(array);\r\n                break;\r\n            case sortAlgorithms.MERGE:\r\n                animations = mergeSort(array);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        this.animateSort(animations, speed);\r\n    }\r\n\r\n    /**\r\n     * Animates the process of the sorting algorithm. Iterates through an\r\n     * array of animation steps generated by the algorithm.\r\n     * \r\n     * @param {Array} animations array of animations\r\n     * @param {int} speed time between animations in miliseconds\r\n     */\r\n    animateSort (animations, speed) {\r\n        if (!speed) speed = DEFAULT_SPEED;\r\n\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n\r\n        var i = 0\r\n        for (const step of animations) {\r\n            setTimeout(() => {\r\n                for (const action of step) { \r\n                    if (action[0] === null) {\r\n                        bars[action[1]].style.height = `${action[2]}px`;\r\n                    } else {\r\n                        for (let k = 1; k < action.length; k++) {\r\n                            bars[action[k]].style.backgroundColor = action[0]; \r\n                        }\r\n                    }\r\n                }\r\n            }, speed * i++);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Rebuilds the array.\r\n     */\r\n    componentDidMount () {\r\n        const array = this.rebuildArray(ARRAY_SIZE, MIN_VALUE, MAX_VALUE);\r\n        this.setState({array: array});\r\n    }\r\n\r\n    /**\r\n     * Renders the sorting visualizer component.\r\n     * \r\n     * @returns a <div> element representing the component\r\n     */\r\n    render () {\r\n        //console.log(this.state.array);\r\n\r\n        return (\r\n            <div className=\"sort-vis\">\r\n                <div className=\"sort-menu\">\r\n                    <SortMenu sorter={this}/>\r\n                </div>\r\n                <div className=\"array\">\r\n                    {Array.from(this.state.array).map((bar, barIdx) => {\r\n                        return (\r\n                            <div className=\"bar\"\r\n                            key={barIdx}\r\n                            style={{\r\n                                backgroundColor: UNSORTED,\r\n                                height: `${bar}px`,\r\n                            }}/>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\r\n\r\nimport './NavBar.css';\r\n\r\nimport Home from '../Home/Home';\r\nimport PathfindingVisualizer from '../PathfindingVisualizer/PathfindingVisualizer';\r\nimport SortingVisualizer from '../SortingVisualizer/SortingVisualizer';\r\n\r\n// Default tab to display on page load\r\nconst DEFAULT_TAB = \"Home\";\r\n\r\n/**\r\n * Represents the navigation bar at the top of the page. Each tab\r\n * contains one component of the project.\r\n * \r\n * @author Jake Waclawski\r\n */\r\nclass NavBar extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = { \r\n            navigateDropdownHidden: true,\r\n            curTab: DEFAULT_TAB,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Changes the currently displayed tab.\r\n     * \r\n     * @param {string} tab tab to change to\r\n     */\r\n    changeTab (tab) {\r\n        const elements = document.getElementsByClassName(\"tab-content\");\r\n        for (let i = 0; i < elements.length; i++) elements[i].style.display = \"none\";\r\n        document.getElementById(tab).style.display = \"block\";\r\n        this.setState({curTab: tab});\r\n    }\r\n\r\n    /**\r\n     * Runs on page load. Sets the current active tab.\r\n     */\r\n    componentDidMount () { document.getElementById(DEFAULT_TAB).style.display = \"block\"; }\r\n\r\n    /**\r\n     * Renders the navigation bar.\r\n     * \r\n     * @returns a <div> element representing the navigation bar\r\n     */\r\n    render () {\r\n        return (\r\n            <div className=\"project\">\r\n                <div className=\"navbar\">\r\n                    <div className=\"navigate-dropdown navbar-dropdown-animate\">\r\n                    <div className=\"navbar-button\" \r\n                    onClick={() => null}\r\n                    onMouseEnter={() => this.setState({navigateDropdownHidden: false})}>\r\n                    <span>{this.state.curTab}</span></div>\r\n                    <div className=\"navbar-dropdown-content navigate-drop-content navbar-dropdown-animate\"\r\n                    hidden={this.state.navigateDropdownHidden}\r\n                    onClick={() => this.setState({navigateDropdownHidden: true})}>\r\n                        <div className=\"navbar-dropdown-content-item\"\r\n                        onClick={() => this.changeTab(\"Home\")}\r\n                        ><span>Home</span></div>\r\n                        <div className=\"navbar-dropdown-content-item\"\r\n                        onClick={() => this.changeTab(\"Pathfinding Visualizer\")}\r\n                        ><span>Pathfinding Visualizer</span></div>\r\n                        <div className=\"navbar-dropdown-content-item\"\r\n                        onClick={() => this.changeTab(\"Sorting Visualizer\")}\r\n                        ><span>Sorting Visualizer</span></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"tab-content-holder\">\r\n                    <div id=\"Home\" className=\"tab-content\">\r\n                        <Home changeTab={(tab) => this.changeTab(tab)}/>\r\n                    </div>\r\n                    <div id=\"Pathfinding Visualizer\" className=\"tab-content\">\r\n                        <PathfindingVisualizer />\r\n                    </div>\r\n                    <div id=\"Sorting Visualizer\" className=\"tab-content\">\r\n                        <SortingVisualizer />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import './App.css';\r\nimport NavBar from './NavBar/NavBar';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar></NavBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}